<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux 導入手順書</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p>Info: Version <a href="../1.7/">1.7.x</a> is available.</p>
<p style="text-align:right;"><a href="install.html.en">English Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>第１章　TOMOYO Linux 対応カーネルとツールのインストール</h1>

<p>このページでは、 TOMOYO Linux 対応カーネルとツールをインストールする手順について説明します。</p>

<hr>

<h2>ステップ１：カーネルおよびツールのインストール</h2>

<p>ツールパッケージをコンパイルするには以下のコマンドを実行してください。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# wget -O ccs-tools-1.6.9-20110401.tar.gz 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/30298/ccs-tools-1.6.9-20110401.tar.gz'<br>
[root@tomoyo ~]# tar -zxf ccs-tools-1.6.9-20110401.tar.gz<br>
[root@tomoyo ~]# make -C ccstools/ install
</td></tr>
</table>

<p>カーネルをコンパイルするためには、以下のパッケージが必要です。</p>

<ul>
<li>gcc</li>
<li>make</li>
<li>ncurses</li>
</ul>

<p>make menuconfig を実行し、「File systems」画面の一番下に表示される以下の項目を選択してください。</p>

<ul>
<li>[*] SAKURA (Domain-Free Mandatory Access Control) support</li>
<li>[*] TOMOYO (Domain-Based Mandatory Access Control) support</li>
<li>(2048) Default maximal count for learning mode</li>
<li>(/sbin/modprobe /sbin/hotplug) Built-in domain initializer programs</li>
<li>[*]&nbsp;&nbsp;&nbsp;Auditing interface support</li>
<li>(1024)&nbsp;&nbsp;Default maximal count for grant log</li>
<li>(1024)&nbsp;&nbsp;Default maximal count for reject log</li>
<li>&lt;M&gt; SYAORAN (Tamper-Proof Device Filesystem) support</li>
</ul>

<p>カーネル 2.6 には、 CONFIG_DEBUG_INFO という名前のコンパイルオプションが存在します。このオプションが有効である場合、コンパイルされたコードのサイズが約１０倍の大きさになります。このオプションを有効にすると、 /usr/src/ ディレクトリで約１ＧＢ、 /lib/modules/ ディレクトリで約３００ＭＢの余分なディスク領域を消費します。<br>
ディスク領域を節約したい場合、以下のオプションを無効にしてください。</p>

<table border="1">
<tr><td>
Kernel hacking ---&gt;[&nbsp;] &nbsp;&nbsp;Compile the kernel with debug info
</td></tr>
</table>

<p>以下のリストからあなたの使いたいバージョンを選択してください。</p>

<table border="1">
<tr><td>
<a name="2.6-vanilla">バニラ 2.6 カーネル</a><br>
(2.6.11 以降に対応しています。)
</td><td>
# ソースディレクトリへ移動する。<br>
cd /usr/src/<br>
# カーネルのソースをダウンロードする。<br>
wget http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.31.14.tar.bz2<br>
# 展開する。<br>
tar -jxf linux-2.6.31.14.tar.bz2<br>
# 展開されたソースのディレクトリへ移動する。<br>
cd linux-2.6.31.14<br>
# ソースから world writable 属性を取り除く。<br>
find -print0 | xargs -0 chmod go-w --<br>
# TOMOYO Linux カーネルパッチをダウンロードする。<br>
wget -O ccs-patch-1.6.9-20110505.tar.gz 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/30297/ccs-patch-1.6.9-20110505.tar.gz'<br>
# 署名を確認する。<br>
wget -O ccs-patch-1.6.9-20110505.tar.gz.asc 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/30297/ccs-patch-1.6.9-20110505.tar.gz.asc'<br>
gpg ccs-patch-1.6.9-20110505.tar.gz.asc<br>
# 展開する。<br>
tar -zxf ccs-patch-1.6.9-20110505.tar.gz<br>
# カーネルパッチを適用する。<br>
patch -sp1 &lt; patches/ccs-patch-2.6.31.diff<br>
# TOMOYO Linux 用のオプションを選択する。<br>
make -s menuconfig<br>
# 通常通りコンパイルする。<br>
make -s<br>
make -s modules modules_install install
</td></tr><tr><td>
<a name="2.4-vanilla">バニラ 2.4 カーネル</a><br>
(2.4.30 以降に対応しています。)
</td><td>
# ソースディレクトリへ移動する。<br>
cd /usr/src/<br>
# カーネルのソースをダウンロードする。<br>
wget http://www.kernel.org/pub/linux/kernel/v2.4/linux-2.4.37.11.tar.bz2<br>
# 展開する。<br>
tar -jxf linux-2.4.37.11.tar.bz2<br>
# 展開されたソースのディレクトリへ移動する。<br>
cd linux-2.4.37.11<br>
# ソースから world writable 属性を取り除く。<br>
find -print0 | xargs -0 chmod go-w --<br>
# TOMOYO Linux カーネルパッチをダウンロードする。<br>
wget -O ccs-patch-1.6.9-20110505.tar.gz 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/30297/ccs-patch-1.6.9-20110505.tar.gz'<br>
# 署名を確認する。<br>
wget -O ccs-patch-1.6.9-20110505.tar.gz.asc 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/30297/ccs-patch-1.6.9-20110505.tar.gz.asc'<br>
gpg ccs-patch-1.6.9-20110505.tar.gz.asc<br>
# 展開する。<br>
tar -zxf ccs-patch-1.6.9-20110505.tar.gz<br>
# カーネルパッチを適用する。<br>
patch -sp1 &lt; patches/ccs-patch-2.4.37.diff<br>
# TOMOYO Linux 用のオプションを選択する。<br>
make -s menuconfig<br>
# 通常通りコンパイルする。<br>
make -s dep<br>
make -s<br>
make -s modules modules_install install
</td></tr><tr><td>
<a name="Fedora11">Fedora 11</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-f11-2.6.30.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-f11-2.6.30.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-f11-2.6.30.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /root/rpmbuild/SPECS/ccs-kernel.spec
</td></tr><tr><td>
<a name="CentOS3.9">CentOS 3.9</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c3-2.4.21.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-c3-2.4.21.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c3-2.4.21.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="CentOS4.9">CentOS 4.9</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c4-2.6.9.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-c4-2.6.9.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c4-2.6.9.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="CentOS5.6">CentOS 5.6</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c5-2.6.18.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-c5-2.6.18.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c5-2.6.18.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i686 --without kabichk /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="Etch">Debian Etch</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-debian_etch.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-debian_etch.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-debian_etch.sh<br>
</td></tr><tr><td>
<a name="Lenny">Debian Lenny</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-debian_lenny.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-debian_lenny.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-debian_lenny.sh<br>
</td></tr><tr><td>
<a name="OpenSUSE11.0">OpenSUSE 11.0</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-suse11.0-2.6.25.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-suse11.0-2.6.25.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-suse11.0-2.6.25.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="OpenSUSE11.1">OpenSUSE 11.1</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-suse11.1-2.6.27.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-suse11.1-2.6.27.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-suse11.1-2.6.27.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="Asianux2">Asianux 2.0</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ax2-2.6.9.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-ax2-2.6.9.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ax2-2.6.9.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i686 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="Asianux3">Asianux 3.0</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ax3-2.6.18.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-ax3-2.6.18.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ax3-2.6.18.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i686 --without kabichk /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="Ubuntu6.06">Ubuntu 6.06</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ubuntu_6.06.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-ubuntu_6.06.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ubuntu_6.06.sh<br>
</td></tr><tr><td>
<a name="Ubuntu8.04">Ubuntu 8.04</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ubuntu_8.04.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-ubuntu_8.04.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ubuntu_8.04.sh<br>
</td></tr><tr><td>
<a name="Ubuntu8.10">Ubuntu 8.10</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ubuntu_8.10.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-ubuntu_8.10.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ubuntu_8.10.sh<br>
</td></tr><tr><td>
<a name="Ubuntu9.04">Ubuntu 9.04</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ubuntu_9.04.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-ubuntu_9.04.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ubuntu_9.04.sh<br>
</td></tr><tr><td>
<a name="VineLinux4.2">VineLinux 4.2</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-vl4.2-2.6.16.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-vl4.2-2.6.16.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-vl4.2-2.6.16.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="VineLinux5.2">VineLinux 5.2</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-vl5.2-2.6.27.sh 'http://svn.sourceforge.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.6.x/ccs-patch/specs/build-vl5.2-2.6.27.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-vl5.2-2.6.27.sh<br>
# パッケージを作成する。<br>
rpmbuild -bb --target i586 /tmp/ccs-kernel.spec
</td></tr><tr><td>
<a name="Gentoo">Gentoo</a>
</td><td>
# layman パッケージをインストールする。<br>
emerge layman<br>
# subversion パッケージをインストールする。<br>
emerge subversion<br>
# レポジトリを登録する。<br>
layman -f -a sunrise<br>
# layman 用の make.conf を取り込むように /etc/make.conf を設定する。<br>
echo "source /usr/local/portage/layman/make.conf" &gt;&gt; /etc/make.conf<br>
# カーネルのソースをダウンロードする。<br>
emerge ccs-sources<br>
# genkernel コマンドを実行する。<br>
genkernel --menuconfig all<br>
# http://www.gentoo.org/doc/ja/kernel-upgrade.xml を見ながら grub の設定を行う。<br>
</td></tr>
</table>

<hr>

<p><a href="index.html.ja">目次へ戻る</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
