Index: security/ccsecurity/autobind.c
===================================================================
--- security/ccsecurity/autobind.c	(revision 4896)
+++ security/ccsecurity/autobind.c	(working copy)
@@ -94,6 +94,8 @@
  * @is_delete: True if it is a delete request.
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 int ccs_write_reserved_port(char *data, const bool is_delete)
 {
Index: security/ccsecurity/domain.c
===================================================================
--- security/ccsecurity/domain.c	(revision 4896)
+++ security/ccsecurity/domain.c	(working copy)
@@ -23,7 +23,7 @@
 /* The list for "struct ccs_domain_info". */
 LIST_HEAD(ccs_domain_list);
 
-/* List of domain policy. */
+/* List of policy. */
 struct list_head ccs_policy_list[CCS_MAX_POLICY];
 /* List of "struct ccs_group". */
 struct list_head ccs_group_list[CCS_MAX_GROUP];
@@ -105,14 +105,14 @@
 					       struct ccs_acl_info *,
 					       const bool))
 {
-	int error = param->is_delete ? -ENOENT : -ENOMEM;
+	struct ccs_domain_info * const domain = param->domain;
+	const bool is_delete = param->is_delete;
+	int error = is_delete ? -ENOENT : -ENOMEM;
 	struct ccs_acl_info *entry;
 	const u8 type = new_entry->type;
 	const u8 i = type == CCS_TYPE_AUTO_EXECUTE_HANDLER ||
 		type == CCS_TYPE_DENIED_EXECUTE_HANDLER ||
 		type == CCS_TYPE_AUTO_TASK_ACL;
-	const bool is_delete = param->is_delete;
-	struct ccs_domain_info * const domain = param->domain;
 	if (param->data[0]) {
 		new_entry->cond = ccs_get_condition(param->data);
 		if (!new_entry->cond)
Index: security/ccsecurity/signal.c
===================================================================
--- security/ccsecurity/signal.c	(revision 4896)
+++ security/ccsecurity/signal.c	(working copy)
@@ -169,6 +169,8 @@
  * @param: Pointer to "struct ccs_acl_param".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 static int ccs_write_signal(struct ccs_acl_param *param)
 {
Index: security/ccsecurity/file.c
===================================================================
--- security/ccsecurity/file.c	(revision 4896)
+++ security/ccsecurity/file.c	(working copy)
@@ -1203,6 +1203,8 @@
  * @param: Pointer to "struct ccs_acl_param".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 int ccs_write_file(struct ccs_acl_param *param)
 {
Index: security/ccsecurity/environ.c
===================================================================
--- security/ccsecurity/environ.c	(revision 4896)
+++ security/ccsecurity/environ.c	(working copy)
@@ -85,6 +85,8 @@
  * @param: Pointer to "struct ccs_acl_param".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 static int ccs_write_env(struct ccs_acl_param *param)
 {
Index: security/ccsecurity/capability.c
===================================================================
--- security/ccsecurity/capability.c	(revision 4896)
+++ security/ccsecurity/capability.c	(working copy)
@@ -119,6 +119,8 @@
  * @param: Pointer to "struct ccs_acl_param".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 int ccs_write_capability(struct ccs_acl_param *param)
 {
Index: security/ccsecurity/internal.h
===================================================================
--- security/ccsecurity/internal.h	(revision 4896)
+++ security/ccsecurity/internal.h	(working copy)
@@ -801,7 +801,7 @@
 	struct list_head list;
 	struct ccs_condition *cond; /* Maybe NULL. */
 	bool is_deleted;
-	u8 type; /* = one of values in "enum ccs_acl_entry_type_index" */
+	u8 type; /* One of values in "enum ccs_acl_entry_type_index". */
 } __attribute__((__packed__));
 
 /* Structure for holding a word. */
@@ -1096,7 +1096,7 @@
 	/* Name of this domain. Never NULL.          */
 	const struct ccs_path_info *domainname;
 	u8 profile;        /* Profile number to use. */
-	u8 group;
+	u8 group;          /* Group number to use.   */
 	bool is_deleted;   /* Delete flag.           */
 	bool flags[CCS_MAX_DOMAIN_INFO_FLAGS];
 };
Index: security/ccsecurity/policy_io.c
===================================================================
--- security/ccsecurity/policy_io.c	(revision 4896)
+++ security/ccsecurity/policy_io.c	(working copy)
@@ -741,7 +741,7 @@
 				ccs_io_printf(head, "%s=%u ",
 					      ccs_pref_keywords[i],
 					      profile->pref[i]);
-			ccs_set_string(head, " }\n");
+			ccs_set_string(head, "}\n");
 			head->r.step++;
 		}
 		break;
@@ -1018,6 +1018,8 @@
  * @param: Pointer to "struct ccs_acl_param".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 static int ccs_write_task(struct ccs_acl_param *param)
 {
@@ -1071,6 +1073,8 @@
  * @is_delete: True if it is a delete request.
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 static int ccs_write_domain2(char *data, struct ccs_domain_info *domain,
 			     const bool is_delete)
@@ -1113,6 +1117,8 @@
  * @head: Pointer to "struct ccs_io_buffer".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 static int ccs_write_domain(struct ccs_io_buffer *head)
 {
Index: security/ccsecurity/network.c
===================================================================
--- security/ccsecurity/network.c	(revision 4896)
+++ security/ccsecurity/network.c	(working copy)
@@ -302,6 +302,8 @@
  * @param: Pointer to "struct ccs_acl_param".
  *
  * Returns 0 on success, negative value otherwise.
+ *
+ * Caller holds ccs_read_lock().
  */
 int ccs_write_inet_network(struct ccs_acl_param *param)
 {
