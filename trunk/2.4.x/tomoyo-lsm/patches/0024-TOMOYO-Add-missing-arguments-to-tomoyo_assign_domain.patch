Subject: TOMOYO: Add missing arguments to tomoyo_assign_domain().

Centralize domain creation code and generate audit log upon creation.

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/common.c |    2 -
 security/tomoyo/common.h |    6 +++
 security/tomoyo/domain.c |   72 ++++++++++++++++++++++++++---------------------
 3 files changed, 47 insertions(+), 33 deletions(-)

--- security-testing-2.6.orig/security/tomoyo/common.c
+++ security-testing-2.6/security/tomoyo/common.c
@@ -871,7 +871,7 @@ static int tomoyo_write_domain(struct to
 		else if (is_select)
 			domain = tomoyo_find_domain(data);
 		else
-			domain = tomoyo_assign_domain(data, 0);
+			domain = tomoyo_assign_domain(data, 0, 0, false);
 		head->write_var1 = domain;
 		return 0;
 	}
--- security-testing-2.6.orig/security/tomoyo/common.h
+++ security-testing-2.6/security/tomoyo/common.h
@@ -691,7 +691,9 @@ int tomoyo_write_group(char *data, const
 int tomoyo_write_transition_control(char *data, const bool is_delete,
 				    const u8 type);
 struct tomoyo_domain_info *tomoyo_assign_domain(const char *domainname,
-						const u8 profile);
+						const u8 profile,
+						const u8 group,
+						const bool transit);
 struct tomoyo_domain_info *tomoyo_find_domain(const char *domainname);
 struct tomoyo_group *tomoyo_get_group(const char *group_name, const u8 type);
 struct tomoyo_profile *tomoyo_profile(const u8 profile);
@@ -721,6 +723,8 @@ void tomoyo_read_log(struct tomoyo_io_bu
 void tomoyo_run_gc(void);
 void tomoyo_update_stat(const u8 index);
 void tomoyo_warn_oom(const char *function);
+void tomoyo_write_log(struct tomoyo_request_info *r, const char *fmt, ...)
+	__attribute__ ((format(printf, 2, 3)));
 void tomoyo_write_log2(struct tomoyo_request_info *r, int len, const char *fmt,
 		       va_list args);
 
--- security-testing-2.6.orig/security/tomoyo/domain.c
+++ security-testing-2.6/security/tomoyo/domain.c
@@ -400,49 +400,58 @@ int tomoyo_write_aggregator(char *data, 
  *
  * @domainname: The name of domain.
  * @profile:    Profile number to assign if the domain was newly created.
+ * @group:      Group number to assign if the domain was newly created.
+ * @transit:    True if transit to domain found or created.
  *
  * Returns pointer to "struct tomoyo_domain_info" on success, NULL otherwise.
  *
  * Caller holds tomoyo_read_lock().
  */
 struct tomoyo_domain_info *tomoyo_assign_domain(const char *domainname,
-						const u8 profile)
+						const u8 profile,
+						const u8 group,
+						const bool transit)
 {
-	struct tomoyo_domain_info *entry;
-	struct tomoyo_domain_info *domain = NULL;
-	const struct tomoyo_path_info *saved_domainname;
-	bool found = false;
+	struct tomoyo_domain_info e = { };
+	struct tomoyo_domain_info *entry = tomoyo_find_domain(domainname);
+	bool created = false;
 
-	if (!tomoyo_correct_domain(domainname))
+	if (entry)
+		goto out;
+	if (strlen(domainname) >= TOMOYO_EXEC_TMPSIZE - 10 ||
+	    !tomoyo_correct_domain(domainname))
 		return NULL;
-	saved_domainname = tomoyo_get_name(domainname);
-	if (!saved_domainname)
+	e.profile = profile;
+	e.group = group;
+	e.domainname = tomoyo_get_name(domainname);
+	if (!e.domainname)
 		return NULL;
-	entry = kzalloc(sizeof(*entry), GFP_NOFS);
 	if (mutex_lock_interruptible(&tomoyo_policy_lock))
 		goto out;
-	list_for_each_entry_rcu(domain, &tomoyo_domain_list, list) {
-		if (domain->is_deleted ||
-		    tomoyo_pathcmp(saved_domainname, domain->domainname))
-			continue;
-		found = true;
-		break;
-	}
-	if (!found && tomoyo_memory_ok(entry)) {
-		INIT_LIST_HEAD(&entry->acl_info_list);
-		entry->domainname = saved_domainname;
-		saved_domainname = NULL;
-		entry->profile = profile;
-		list_add_tail_rcu(&entry->list, &tomoyo_domain_list);
-		domain = entry;
-		entry = NULL;
-		found = true;
+	entry = tomoyo_find_domain(domainname);
+	if (!entry) {
+		entry = tomoyo_commit_ok(&e, sizeof(e));
+		if (entry) {
+			INIT_LIST_HEAD(&entry->acl_info_list);
+			list_add_tail_rcu(&entry->list, &tomoyo_domain_list);
+			created = true;
+		}
 	}
 	mutex_unlock(&tomoyo_policy_lock);
- out:
-	tomoyo_put_name(saved_domainname);
-	kfree(entry);
-	return found ? domain : NULL;
+out:
+	tomoyo_put_name(e.domainname);
+	if (entry && transit) {
+		tomoyo_current_security()->tomoyo_domain_info = entry;
+		if (created) {
+			struct tomoyo_request_info r;
+			tomoyo_init_request_info(&r, TOMOYO_MAC_FILE_EXECUTE);
+			r.granted = false;
+			tomoyo_write_log(&r, "use_profile %u\n", profile);
+			tomoyo_write_log(&r, "use_group %u\n", group);
+			tomoyo_update_stat(TOMOYO_STAT_POLICY_UPDATES);
+		}
+	}
+	return entry;
 }
 
 /**
@@ -556,13 +565,14 @@ static int tomoyo_find_next_domain(struc
 	 * security->tomoyo_domain_info.
 	 */
 	smp_wmb();
-	if (!domain && strlen(ee->tmp) < TOMOYO_EXEC_TMPSIZE - 10)
-		domain = tomoyo_assign_domain(ee->tmp, old_domain->profile);
 	/*
 	 * Proceed to the next domain in order to allow checking permissions
 	 * for binary loader programs. Current thread will go back to the
 	 * previous domain if do_execve() failed.
 	 */
+	if (!domain)
+		domain = tomoyo_assign_domain(ee->tmp, old_domain->profile,
+					      old_domain->group, true);
 	if (domain) {
 		retval = 0;
 		security->tomoyo_domain_info = domain;
