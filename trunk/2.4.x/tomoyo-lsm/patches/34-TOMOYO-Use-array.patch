Subject: TOMOYO: Use array for value type.

Use "u8 value_type[2]" instead of "u8 min_type" and "u8 max_type".

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/common.c |    4 ++--
 security/tomoyo/common.h |    9 +++++----
 security/tomoyo/util.c   |    6 +++---
 3 files changed, 10 insertions(+), 9 deletions(-)

--- security-testing-2.6.orig/security/tomoyo/common.c
+++ security-testing-2.6/security/tomoyo/common.c
@@ -275,8 +275,8 @@ static void tomoyo_print_number_union(st
 		int i;
 		unsigned long min = ptr->values[0];
 		const unsigned long max = ptr->values[1];
-		u8 min_type = ptr->min_type;
-		const u8 max_type = ptr->max_type;
+		u8 min_type = ptr->value_type[0];
+		const u8 max_type = ptr->value_type[1];
 		char buffer[128];
 		buffer[0] = '\0';
 		for (i = 0; i < 2; i++) {
--- security-testing-2.6.orig/security/tomoyo/common.h
+++ security-testing-2.6/security/tomoyo/common.h
@@ -312,8 +312,7 @@ struct tomoyo_number_union {
 	unsigned long values[2]; /* Maybe NULL. */
 	struct tomoyo_group *group;
 	/* One of values in "enum tomoyo_value_type". */
-	u8 min_type;
-	u8 max_type;
+	u8 value_type[2];
 	/* True if @group != NULL, false otherwise. */
 	u8 is_group;
 };
@@ -888,8 +887,10 @@ static inline bool tomoyo_same_number_un
 (const struct tomoyo_number_union *p1, const struct tomoyo_number_union *p2)
 {
 	return p1->values[0] == p2->values[0] && p1->values[1] == p2->values[1]
-		&& p1->group == p2->group && p1->min_type == p2->min_type &&
-		p1->max_type == p2->max_type && p1->is_group == p2->is_group;
+		&& p1->group == p2->group &&
+		p1->value_type[0] == p2->value_type[0] &&
+		p1->value_type[1] == p2->value_type[1] &&
+		p1->is_group == p2->is_group;
 }
 
 #if defined(CONFIG_SLOB)
--- security-testing-2.6.orig/security/tomoyo/util.c
+++ security-testing-2.6/security/tomoyo/util.c
@@ -237,10 +237,10 @@ bool tomoyo_parse_number_union(char *dat
 	if (!type)
 		return false;
 	num->values[0] = v;
-	num->min_type = type;
+	num->value_type[0] = type;
 	if (!*data) {
 		num->values[1] = v;
-		num->max_type = type;
+		num->value_type[1] = type;
 		return true;
 	}
 	if (*data++ != '-')
@@ -249,7 +249,7 @@ bool tomoyo_parse_number_union(char *dat
 	if (!type || *data)
 		return false;
 	num->values[1] = v;
-	num->max_type = type;
+	num->value_type[1] = type;
 	return true;
 }
 
