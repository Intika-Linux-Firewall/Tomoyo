Subject: TOMOYO: Use appropriate signedness.

Many of variables are unsigned.
read()/write() returns ssize_t.

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/common.c |   20 ++++++++++----------
 security/tomoyo/common.h |   26 ++++++++++++--------------
 2 files changed, 22 insertions(+), 24 deletions(-)

--- security-testing-2.6.orig/security/tomoyo/common.c
+++ security-testing-2.6/security/tomoyo/common.c
@@ -128,7 +128,7 @@ static bool tomoyo_flush(struct tomoyo_i
 {
 	while (head->r.w_pos) {
 		const char *w = head->r.w[0];
-		int len = strlen(w);
+		size_t len = strlen(w);
 		if (len) {
 			if (len > head->read_user_buf_avail)
 				len = head->read_user_buf_avail;
@@ -187,8 +187,8 @@ static void tomoyo_set_string(struct tom
 void tomoyo_io_printf(struct tomoyo_io_buffer *head, const char *fmt, ...)
 {
 	va_list args;
-	int len;
-	int pos = head->r.avail;
+	size_t len;
+	size_t pos = head->r.avail;
 	int size = head->readbuf_size - pos;
 	if (size <= 0)
 		return;
@@ -1703,8 +1703,8 @@ static int tomoyo_poll_query(struct file
 static void tomoyo_read_query(struct tomoyo_io_buffer *head)
 {
 	struct list_head *tmp;
-	int pos = 0;
-	int len = 0;
+	unsigned int pos = 0;
+	size_t len = 0;
 	char *buf;
 	if (head->r.w_pos)
 		return;
@@ -2069,8 +2069,8 @@ int tomoyo_poll_control(struct file *fil
  *
  * Returns bytes read on success, negative value otherwise.
  */
-int tomoyo_read_control(struct file *file, char __user *buffer,
-			const int buffer_len)
+ssize_t tomoyo_read_control(struct file *file, char __user *buffer,
+			    const size_t buffer_len)
 {
 	int len;
 	struct tomoyo_io_buffer *head = file->private_data;
@@ -2102,12 +2102,12 @@ int tomoyo_read_control(struct file *fil
  *
  * Returns @buffer_len on success, negative value otherwise.
  */
-int tomoyo_write_control(struct file *file, const char __user *buffer,
-			 const int buffer_len)
+ssize_t tomoyo_write_control(struct file *file, const char __user *buffer,
+			     const size_t buffer_len)
 {
 	struct tomoyo_io_buffer *head = file->private_data;
 	int error = buffer_len;
-	int avail_len = buffer_len;
+	size_t avail_len = buffer_len;
 	char *cp0 = head->write_buf;
 	int idx;
 
--- security-testing-2.6.orig/security/tomoyo/common.h
+++ security-testing-2.6/security/tomoyo/common.h
@@ -552,14 +552,14 @@ struct tomoyo_io_buffer {
 	/* Exclusive lock for this structure.   */
 	struct mutex io_sem;
 	char __user *read_user_buf;
-	int read_user_buf_avail;
+	size_t read_user_buf_avail;
 	struct {
 		struct list_head *domain;
 		struct list_head *group;
 		struct list_head *acl;
-		int avail;
-		int step;
-		int query_index;
+		size_t avail;
+		unsigned int step;
+		unsigned int query_index;
 		u16 index;
 		u8 acl_group_index;
 		u8 bit;
@@ -574,15 +574,15 @@ struct tomoyo_io_buffer {
 	/* Buffer for reading.                  */
 	char *read_buf;
 	/* Size of read buffer.                 */
-	int readbuf_size;
+	size_t readbuf_size;
 	/* Buffer for writing.                  */
 	char *write_buf;
 	/* Bytes available for writing.         */
-	int write_avail;
+	size_t write_avail;
 	/* Size of write buffer.                */
-	int writebuf_size;
+	size_t writebuf_size;
 	/* Type of this interface.              */
-	u8 type;
+	enum tomoyo_securityfs_interface_index type;
 	/* Users counter protected by tomoyo_io_buffer_list_lock. */
 	u8 users;
 	/* List for telling GC not to kfree() elements. */
@@ -681,8 +681,6 @@ int tomoyo_path_permission(struct tomoyo
 			   const struct tomoyo_path_info *filename);
 int tomoyo_poll_control(struct file *file, poll_table *wait);
 int tomoyo_poll_log(struct file *file, poll_table *wait);
-int tomoyo_read_control(struct file *file, char __user *buffer,
-			const int buffer_len);
 int tomoyo_start_execve(struct linux_binprm *bprm, struct tomoyo_execve **eep);
 int tomoyo_supervisor(struct tomoyo_request_info *r, const char *fmt, ...)
 	__attribute__ ((format(printf, 2, 3)));
@@ -702,12 +700,14 @@ int tomoyo_update_policy(struct tomoyo_a
 						  const struct tomoyo_acl_head
 						  *));
 int tomoyo_write_aggregator(char *data, const bool is_delete);
-int tomoyo_write_control(struct file *file, const char __user *buffer,
-			 const int buffer_len);
 int tomoyo_write_file(struct tomoyo_acl_param *param);
 int tomoyo_write_group(char *data, const bool is_delete, const u8 type);
 int tomoyo_write_transition_control(char *data, const bool is_delete,
 				    const u8 type);
+ssize_t tomoyo_read_control(struct file *file, char __user *buffer,
+			    const size_t buffer_len);
+ssize_t tomoyo_write_control(struct file *file, const char __user *buffer,
+			     const size_t buffer_len);
 struct tomoyo_domain_info *tomoyo_assign_domain(const char *domainname,
 						const u8 profile,
 						const u8 group,
@@ -717,8 +717,6 @@ struct tomoyo_group *tomoyo_get_group(co
 struct tomoyo_profile *tomoyo_profile(const u8 profile);
 struct tomoyo_security *tomoyo_find_task_security(const struct task_struct *
 						  task);
-unsigned int tomoyo_check_flags(const struct tomoyo_domain_info *domain,
-				const u8 index);
 void *tomoyo_commit_ok(void *data, const unsigned int size);
 #ifdef CONFIG_SECURITY_TOMOYO_USE_BUILTIN_POLICY
 void __init tomoyo_load_builtin_policy(void);
