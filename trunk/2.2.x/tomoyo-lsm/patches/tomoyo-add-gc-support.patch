Subject: TOMOYO: Add garbage collector support.

This patch makes TOMOYO to manage list of pointers and allows an administrator
release memory used by marked-as-deleted list elements.

Signed-off-by: Kentaro Takeda <takedakn@nttdata.co.jp>
Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/common.c   |   98 +++++++++++++++++++++++++++++++++++++++++++++
 security/tomoyo/common.h   |    7 +++
 security/tomoyo/domain.c   |   74 +++++++++++++++++++++++++++++++++
 security/tomoyo/file.c     |   71 ++++++++++++++++++++++++++++++++
 security/tomoyo/realpath.c |   36 ++++++++++++++++
 security/tomoyo/realpath.h |    7 +--
 6 files changed, 289 insertions(+), 4 deletions(-)

--- security-testing-2.6.git.orig/security/tomoyo/common.c
+++ security-testing-2.6.git/security/tomoyo/common.c
@@ -1143,6 +1143,30 @@ static int tomoyo_update_manager_entry(c
 }
 
 /**
+ * tomoyo_cleanup_manager - Clean up deleted "struct tomoyo_policy_manager_entry".
+ */
+static void tomoyo_cleanup_manager(void)
+{
+	struct tomoyo_policy_manager_entry *ptr;
+	struct tomoyo_policy_manager_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_policy_manager_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_policy_manager_list,
+				 entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_policy_manager_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->manager);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_write_manager_policy - Write manager policy.
  *
  * @head: Pointer to "struct tomoyo_io_buffer".
@@ -1596,6 +1620,69 @@ tail_mark:
 }
 
 /**
+ * tomoyo_cleanup_domain_policy - Clean up deleted domain policy.
+ */
+static void tomoyo_cleanup_domain_policy(void)
+{
+	struct tomoyo_domain_info *domain;
+	struct tomoyo_domain_info *next_domain;
+	struct tomoyo_acl_info *acl;
+	struct tomoyo_acl_info *next_acl;
+	LIST_HEAD(q_domain);
+	LIST_HEAD(q_acl);
+	down_write(&tomoyo_domain_list_lock);
+	list_for_each_entry_safe(domain, next_domain, &tomoyo_domain_list,
+				 entry.list) {
+		const bool can_delete_domain = domain->is_deleted &&
+			!atomic_read(&domain->entry.users);
+		if (can_delete_domain) {
+			list_for_each_entry(acl, &domain->acl_info_list,
+					    entry.list)
+				acl->type |= TOMOYO_ACL_DELETED;
+		}
+		list_for_each_entry_safe(acl, next_acl, &domain->acl_info_list,
+					 entry.list) {
+			if (!(acl->type & TOMOYO_ACL_DELETED)
+			    || atomic_read(&acl->entry.users))
+				continue;
+			list_del(&acl->entry.list);
+			list_add(&acl->entry.list, &q_acl);
+		}
+		if (can_delete_domain && list_empty(&domain->acl_info_list)) {
+			list_del(&domain->entry.list);
+			list_add(&domain->entry.list, &q_domain);
+		}
+	}
+	up_write(&tomoyo_domain_list_lock);
+	list_for_each_entry_safe(acl, next_acl, &q_acl, entry.list) {
+		switch (tomoyo_acl_type1(acl)) {
+			struct tomoyo_single_path_acl_record *acl1;
+			struct tomoyo_double_path_acl_record *acl2;
+		case TOMOYO_TYPE_SINGLE_PATH_ACL:
+			acl1 = container_of(acl,
+				    struct tomoyo_single_path_acl_record,
+					    head);
+			tomoyo_put_name(acl1->filename);
+			break;
+		case TOMOYO_TYPE_DOUBLE_PATH_ACL:
+			acl2 = container_of(acl,
+				    struct tomoyo_double_path_acl_record,
+					    head);
+			tomoyo_put_name(acl2->filename1);
+			tomoyo_put_name(acl2->filename2);
+			break;
+		}
+		list_del(&acl->entry.list);
+		tomoyo_free_element(acl);
+	}
+	list_for_each_entry_safe(domain, next_domain, &q_domain, entry.list) {
+		tomoyo_put_name(domain->domainname);
+		list_del(&domain->entry.list);
+		tomoyo_free_element(domain);
+	}
+}
+
+/**
  * tomoyo_write_domain_profile - Assign profile for specified domain.
  *
  * @head: Pointer to "struct tomoyo_io_buffer".
@@ -2147,6 +2234,7 @@ static int tomoyo_write_control(struct f
 static int tomoyo_close_control(struct file *file)
 {
 	struct tomoyo_io_buffer *head = file->private_data;
+	const bool is_write = head->write_buf != NULL;
 
 	/* Release memory used for policy I/O. */
 	tomoyo_free(head->read_buf);
@@ -2160,6 +2248,16 @@ static int tomoyo_close_control(struct f
 	tomoyo_free(head);
 	head = NULL;
 	file->private_data = NULL;
+	if (is_write) {
+		tomoyo_cleanup_allow_read();
+		tomoyo_cleanup_file_pattern();
+		tomoyo_cleanup_no_rewrite();
+		tomoyo_cleanup_initializer();
+		tomoyo_cleanup_keep_domain();
+		tomoyo_cleanup_alias();
+		tomoyo_cleanup_manager();
+		tomoyo_cleanup_domain_policy();
+	}
 	return 0;
 }
 
--- security-testing-2.6.git.orig/security/tomoyo/common.h
+++ security-testing-2.6.git/security/tomoyo/common.h
@@ -395,6 +395,13 @@ void tomoyo_fill_path_info(struct tomoyo
 /* Run policy loader when /sbin/init starts. */
 void tomoyo_load_policy(const char *filename);
 
+void tomoyo_cleanup_allow_read(void);
+void tomoyo_cleanup_file_pattern(void);
+void tomoyo_cleanup_no_rewrite(void);
+void tomoyo_cleanup_initializer(void);
+void tomoyo_cleanup_keep_domain(void);
+void tomoyo_cleanup_alias(void);
+
 /* strcmp() for "struct tomoyo_path_info" structure. */
 static inline bool tomoyo_pathcmp(const struct tomoyo_path_info *a,
 				  const struct tomoyo_path_info *b)
--- security-testing-2.6.git.orig/security/tomoyo/domain.c
+++ security-testing-2.6.git/security/tomoyo/domain.c
@@ -257,6 +257,31 @@ static int tomoyo_update_domain_initiali
 }
 
 /**
+ * tomoyo_cleanup_initializer - Clean up deleted "struct tomoyo_domain_initializer_entry".
+ */
+void tomoyo_cleanup_initializer(void)
+{
+	struct tomoyo_domain_initializer_entry *ptr;
+	struct tomoyo_domain_initializer_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_domain_initializer_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_domain_initializer_list,
+				 entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_domain_initializer_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->domainname);
+		tomoyo_put_name(ptr->program);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_read_domain_initializer_policy - Read "struct tomoyo_domain_initializer_entry" list.
  *
  * @head: Pointer to "struct tomoyo_io_buffer".
@@ -477,6 +502,31 @@ static int tomoyo_update_domain_keeper_e
 }
 
 /**
+ * tomoyo_cleanup_keep_domain - Clean up deleted "struct tomoyo_domain_keeper_entry".
+ */
+void tomoyo_cleanup_keep_domain(void)
+{
+	struct tomoyo_domain_keeper_entry *ptr;
+	struct tomoyo_domain_keeper_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_domain_keeper_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_domain_keeper_list,
+				 entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_domain_keeper_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->domainname);
+		tomoyo_put_name(ptr->program);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_write_domain_keeper_policy - Write "struct tomoyo_domain_keeper_entry" list.
  *
  * @data:      String to parse.
@@ -669,6 +719,30 @@ static int tomoyo_update_alias_entry(con
 }
 
 /**
+ * tomoyo_cleanup_alias - Clean up deleted "struct tomoyo_alias_entry".
+ */
+void tomoyo_cleanup_alias(void)
+{
+	struct tomoyo_alias_entry *ptr;
+	struct tomoyo_alias_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_alias_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_alias_list, entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_alias_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->original_name);
+		tomoyo_put_name(ptr->aliased_name);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_read_alias_policy - Read "struct tomoyo_alias_entry" list.
  *
  * @head: Pointer to "struct tomoyo_io_buffer".
--- security-testing-2.6.git.orig/security/tomoyo/file.c
+++ security-testing-2.6.git/security/tomoyo/file.c
@@ -244,6 +244,30 @@ static int tomoyo_update_globally_readab
 }
 
 /**
+ * tomoyo_cleanup_allow_read - Clean up deleted "struct tomoyo_globally_readable_file_entry".
+ */
+void tomoyo_cleanup_allow_read(void)
+{
+	struct tomoyo_globally_readable_file_entry *ptr;
+	struct tomoyo_globally_readable_file_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_globally_readable_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_globally_readable_list,
+				 entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_globally_readable_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->filename);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_is_globally_readable_file - Check if the file is unconditionnaly permitted to be open()ed for reading.
  *
  * @filename: The filename to check.
@@ -389,6 +413,29 @@ static int tomoyo_update_file_pattern_en
 }
 
 /**
+ * tomoyo_cleanup_file_pattern - Clean up deleted "struct tomoyo_pattern_entry".
+ */
+void tomoyo_cleanup_file_pattern(void)
+{
+	struct tomoyo_pattern_entry *ptr;
+	struct tomoyo_pattern_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_pattern_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_pattern_list, entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_pattern_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->pattern);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_get_file_pattern - Get patterned pathname.
  *
  * @filename: The filename to find patterned pathname.
@@ -551,6 +598,30 @@ static int tomoyo_update_no_rewrite_entr
 }
 
 /**
+ * tomoyo_cleanup_no_rewrite - Clean up deleted "struct tomoyo_no_rewrite_entry".
+ */
+void tomoyo_cleanup_no_rewrite(void)
+{
+	struct tomoyo_no_rewrite_entry *ptr;
+	struct tomoyo_no_rewrite_entry *tmp;
+	LIST_HEAD(q);
+	down_write(&tomoyo_no_rewrite_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &tomoyo_no_rewrite_list,
+				 entry.list) {
+		if (!ptr->is_deleted || atomic_read(&ptr->entry.users))
+			continue;
+		list_del(&ptr->entry.list);
+		list_add(&ptr->entry.list, &q);
+	}
+	up_write(&tomoyo_no_rewrite_list_lock);
+	list_for_each_entry_safe(ptr, tmp, &q, entry.list) {
+		tomoyo_put_name(ptr->pattern);
+		list_del(&ptr->entry.list);
+		tomoyo_free_element(ptr);
+	}
+}
+
+/**
  * tomoyo_is_no_rewrite_file - Check if the given pathname is not permitted to be rewrited.
  *
  * @filename: Filename to check.
--- security-testing-2.6.git.orig/security/tomoyo/realpath.c
+++ security-testing-2.6.git/security/tomoyo/realpath.c
@@ -223,6 +223,17 @@ bool tomoyo_memory_ok(void *ptr)
 	return false;
 }
 
+/**
+ * tomoyo_free_element - Free memory for elements.
+ *
+ * @ptr: Pointer to allocated memory.
+ */
+void tomoyo_free_element(void *ptr)
+{
+	atomic_sub(ksize(ptr), &tomoyo_allocated_memory_for_elements);
+	kfree(ptr);
+}
+
 /* Memory allocated for string data in bytes. */
 static atomic_t tomoyo_allocated_memory_for_savename;
 /* Quota for holding string data in bytes. */
@@ -316,6 +327,31 @@ const struct tomoyo_path_info *tomoyo_ge
 }
 
 /**
+ * tomoyo_put_name - Delete shared memory for string data.
+ *
+ * @ptr: Pointer to "struct tomoyo_path_info".
+ */
+void tomoyo_put_name(const struct tomoyo_path_info *name)
+{
+	struct tomoyo_name_entry *ptr;
+	bool can_delete = false;
+
+	if (!name)
+		return;
+	ptr = container_of(name, struct tomoyo_name_entry, entry);
+	mutex_lock(&tomoyo_name_list_lock);
+	if (atomic_dec_and_test(&ptr->users)) {
+		list_del(&ptr->list);
+		can_delete = true;
+	}
+	mutex_unlock(&tomoyo_name_list_lock);
+	if (can_delete) {
+		atomic_sub(ksize(ptr), &tomoyo_allocated_memory_for_savename);
+		kfree(ptr);
+	}
+}
+
+/**
  * tomoyo_realpath_init - Initialize realpath related code.
  */
 void __init tomoyo_realpath_init(void)
--- security-testing-2.6.git.orig/security/tomoyo/realpath.h
+++ security-testing-2.6.git/security/tomoyo/realpath.h
@@ -44,10 +44,7 @@ bool tomoyo_memory_ok(void *ptr);
  * The RAM is shared, so NEVER try to modify or kfree() the returned name.
  */
 const struct tomoyo_path_info *tomoyo_get_name(const char *name);
-static inline void tomoyo_put_name(const struct tomoyo_path_info *name)
-{
-	/* It's a dummy so far. */
-}
+void tomoyo_put_name(const struct tomoyo_path_info *name);
 
 /* Allocate memory for temporary use (e.g. permission checks). */
 void *tomoyo_alloc(const size_t size);
@@ -55,6 +52,8 @@ void *tomoyo_alloc(const size_t size);
 /* Free memory allocated by tomoyo_alloc(). */
 void tomoyo_free(const void *p);
 
+void tomoyo_free_element(void *p);
+
 /* Check for memory usage. */
 int tomoyo_read_memory_counter(struct tomoyo_io_buffer *head);
 
