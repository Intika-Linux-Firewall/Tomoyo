This is TOMOYO Linux patch for linux-2.6.34.2.

Source code for this patch is http://www.kernel.org/pub/linux/kernel/v2.6/linux-2.6.34.2.tar.bz2
---
 fs/compat.c                     |    2 
 fs/exec.c                       |    2 
 fs/open.c                       |    2 
 fs/proc/version.c               |    7 ++
 include/linux/init_task.h       |    9 ++
 include/linux/sched.h           |    6 +
 include/linux/security.h        |   56 +++++++++-------
 kernel/kexec.c                  |    3 
 kernel/kmod.c                   |    5 +
 kernel/module.c                 |    5 +
 kernel/ptrace.c                 |    4 +
 kernel/sched.c                  |    2 
 kernel/signal.c                 |   10 ++
 kernel/sys.c                    |   10 ++
 kernel/time/ntp.c               |    6 +
 net/ipv4/inet_connection_sock.c |    2 
 net/ipv4/inet_hashtables.c      |    2 
 net/ipv4/raw.c                  |   11 ++-
 net/ipv4/udp.c                  |    9 ++
 net/ipv6/raw.c                  |   11 ++-
 net/ipv6/udp.c                  |    8 ++
 net/socket.c                    |    6 +
 security/Kconfig                |    2 
 security/Makefile               |    3 
 security/security.c             |  139 +++++++++++++++++++++++++++++++++-------
 25 files changed, 265 insertions(+), 57 deletions(-)

--- linux-2.6.34.2.orig/fs/compat.c
+++ linux-2.6.34.2/fs/compat.c
@@ -1551,7 +1551,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval < 0)
 		goto out;
 
--- linux-2.6.34.2.orig/fs/exec.c
+++ linux-2.6.34.2/fs/exec.c
@@ -1383,7 +1383,7 @@ int do_execve(char * filename,
 		goto out;
 
 	current->flags &= ~PF_KTHREAD;
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval < 0)
 		goto out;
 
--- linux-2.6.34.2.orig/fs/open.c
+++ linux-2.6.34.2/fs/open.c
@@ -1173,6 +1173,8 @@ EXPORT_SYMBOL(sys_close);
  */
 SYSCALL_DEFINE0(vhangup)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup_self();
 		return 0;
--- linux-2.6.34.2.orig/fs/proc/version.c
+++ linux-2.6.34.2/fs/proc/version.c
@@ -32,3 +32,10 @@ static int __init proc_version_init(void
 	return 0;
 }
 module_init(proc_version_init);
+
+static int __init ccs_show_version(void)
+{
+	printk(KERN_INFO "Hook version: 2.6.34.2 2010/08/03\n");
+	return 0;
+}
+module_init(ccs_show_version);
--- linux-2.6.34.2.orig/include/linux/init_task.h
+++ linux-2.6.34.2/include/linux/init_task.h
@@ -103,6 +103,14 @@ extern struct cred init_cred;
 # define INIT_PERF_EVENTS(tsk)
 #endif
 
+#ifdef CONFIG_CCSECURITY
+#define INIT_CCSECURITY          \
+	.ccs_domain_info = NULL, \
+	.ccs_flags = 0,
+#else
+#define INIT_CCSECURITY
+#endif
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -172,6 +180,7 @@ extern struct cred init_cred;
 	INIT_FTRACE_GRAPH						\
 	INIT_TRACE_RECURSION						\
 	INIT_TASK_RCU_PREEMPT(tsk)					\
+	INIT_CCSECURITY                                                 \
 }
 
 
--- linux-2.6.34.2.orig/include/linux/sched.h
+++ linux-2.6.34.2/include/linux/sched.h
@@ -43,6 +43,8 @@
 
 #ifdef __KERNEL__
 
+struct ccs_domain_info;
+
 struct sched_param {
 	int sched_priority;
 };
@@ -1505,6 +1507,10 @@ struct task_struct {
 		unsigned long memsw_bytes; /* uncharged mem+swap usage */
 	} memcg_batch;
 #endif
+#ifdef CONFIG_CCSECURITY
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+#endif
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
--- linux-2.6.34.2.orig/include/linux/security.h
+++ linux-2.6.34.2/include/linux/security.h
@@ -35,6 +35,7 @@
 #include <linux/xfrm.h>
 #include <linux/slab.h>
 #include <net/flow.h>
+#include <linux/ccsecurity.h>
 
 /* Maximum number of letters for an LSM name string */
 #define SECURITY_NAME_MAX	10
@@ -2018,7 +2019,10 @@ static inline int security_syslog(int ty
 
 static inline int security_settime(struct timespec *ts, struct timezone *tz)
 {
-	return cap_settime(ts, tz);
+	int error = cap_settime(ts, tz);
+	if (!error && !ccs_capable(CCS_SYS_SETTIME))
+		error = -EPERM;
+	return error;
 }
 
 static inline int security_vm_enough_memory(long pages)
@@ -2096,7 +2100,7 @@ static inline int security_sb_mount(char
 				    char *type, unsigned long flags,
 				    void *data)
 {
-	return 0;
+	return ccs_mount_permission(dev_name, path, type, flags, data);
 }
 
 static inline int security_sb_check_sb(struct vfsmount *mnt,
@@ -2107,7 +2111,7 @@ static inline int security_sb_check_sb(s
 
 static inline int security_sb_umount(struct vfsmount *mnt, int flags)
 {
-	return 0;
+	return ccs_umount_permission(mnt, flags);
 }
 
 static inline void security_sb_umount_close(struct vfsmount *mnt)
@@ -2127,7 +2131,7 @@ static inline void security_sb_post_addm
 static inline int security_sb_pivotroot(struct path *old_path,
 					struct path *new_path)
 {
-	return 0;
+	return ccs_pivot_root_permission(old_path, new_path);
 }
 
 static inline void security_sb_post_pivotroot(struct path *old_path,
@@ -2325,7 +2329,7 @@ static inline void security_file_free(st
 static inline int security_file_ioctl(struct file *file, unsigned int cmd,
 				      unsigned long arg)
 {
-	return 0;
+	return ccs_ioctl_permission(file, cmd, arg);
 }
 
 static inline int security_file_mmap(struct file *file, unsigned long reqprot,
@@ -2352,7 +2356,7 @@ static inline int security_file_lock(str
 static inline int security_file_fcntl(struct file *file, unsigned int cmd,
 				      unsigned long arg)
 {
-	return 0;
+	return ccs_fcntl_permission(file, cmd, arg);
 }
 
 static inline int security_file_set_fowner(struct file *file)
@@ -2375,7 +2379,7 @@ static inline int security_file_receive(
 static inline int security_dentry_open(struct file *file,
 				       const struct cred *cred)
 {
-	return 0;
+	return ccs_open_permission(file);
 }
 
 static inline int security_task_create(unsigned long clone_flags)
@@ -2741,7 +2745,7 @@ static inline int security_unix_may_send
 static inline int security_socket_create(int family, int type,
 					 int protocol, int kern)
 {
-	return 0;
+	return ccs_socket_create_permission(family, type, protocol);
 }
 
 static inline int security_socket_post_create(struct socket *sock,
@@ -2756,19 +2760,19 @@ static inline int security_socket_bind(s
 				       struct sockaddr *address,
 				       int addrlen)
 {
-	return 0;
+	return ccs_socket_bind_permission(sock, address, addrlen);
 }
 
 static inline int security_socket_connect(struct socket *sock,
 					  struct sockaddr *address,
 					  int addrlen)
 {
-	return 0;
+	return ccs_socket_connect_permission(sock, address, addrlen);
 }
 
 static inline int security_socket_listen(struct socket *sock, int backlog)
 {
-	return 0;
+	return ccs_socket_listen_permission(sock);
 }
 
 static inline int security_socket_accept(struct socket *sock,
@@ -2780,7 +2784,7 @@ static inline int security_socket_accept
 static inline int security_socket_sendmsg(struct socket *sock,
 					  struct msghdr *msg, int size)
 {
-	return 0;
+	return ccs_socket_sendmsg_permission(sock, msg, size);
 }
 
 static inline int security_socket_recvmsg(struct socket *sock,
@@ -2991,43 +2995,47 @@ int security_path_chroot(struct path *pa
 #else	/* CONFIG_SECURITY_PATH */
 static inline int security_path_unlink(struct path *dir, struct dentry *dentry)
 {
-	return 0;
+	return ccs_unlink_permission(dir->dentry->d_inode, dentry, dir->mnt);
 }
 
 static inline int security_path_mkdir(struct path *dir, struct dentry *dentry,
 				      int mode)
 {
-	return 0;
+	return ccs_mkdir_permission(dir->dentry->d_inode, dentry, dir->mnt,
+				    mode);
 }
 
 static inline int security_path_rmdir(struct path *dir, struct dentry *dentry)
 {
-	return 0;
+	return ccs_rmdir_permission(dir->dentry->d_inode, dentry, dir->mnt);
 }
 
 static inline int security_path_mknod(struct path *dir, struct dentry *dentry,
 				      int mode, unsigned int dev)
 {
-	return 0;
+	return ccs_mknod_permission(dir->dentry->d_inode, dentry, dir->mnt,
+				    mode, dev);
 }
 
 static inline int security_path_truncate(struct path *path, loff_t length,
 					 unsigned int time_attrs)
 {
-	return 0;
+	return ccs_truncate_permission(path->dentry, path->mnt);
 }
 
 static inline int security_path_symlink(struct path *dir, struct dentry *dentry,
 					const char *old_name)
 {
-	return 0;
+	return ccs_symlink_permission(dir->dentry->d_inode, dentry, dir->mnt,
+				      old_name);
 }
 
 static inline int security_path_link(struct dentry *old_dentry,
 				     struct path *new_dir,
 				     struct dentry *new_dentry)
 {
-	return 0;
+	return ccs_link_permission(old_dentry, new_dir->dentry->d_inode,
+				   new_dentry, new_dir->mnt);
 }
 
 static inline int security_path_rename(struct path *old_dir,
@@ -3035,24 +3043,26 @@ static inline int security_path_rename(s
 				       struct path *new_dir,
 				       struct dentry *new_dentry)
 {
-	return 0;
+	return ccs_rename_permission(old_dir->dentry->d_inode, old_dentry,
+				     new_dir->dentry->d_inode, new_dentry,
+				     new_dir->mnt);
 }
 
 static inline int security_path_chmod(struct dentry *dentry,
 				      struct vfsmount *mnt,
 				      mode_t mode)
 {
-	return 0;
+	return ccs_chmod_permission(dentry, mnt, mode);
 }
 
 static inline int security_path_chown(struct path *path, uid_t uid, gid_t gid)
 {
-	return 0;
+	return ccs_chown_permission(path->dentry, path->mnt, uid, gid);
 }
 
 static inline int security_path_chroot(struct path *path)
 {
-	return 0;
+	return ccs_chroot_permission(path);
 }
 #endif	/* CONFIG_SECURITY_PATH */
 
--- linux-2.6.34.2.orig/kernel/kexec.c
+++ linux-2.6.34.2/kernel/kexec.c
@@ -39,6 +39,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/sections.h>
+#include <linux/ccsecurity.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t __percpu *crash_notes;
@@ -945,6 +946,8 @@ SYSCALL_DEFINE4(kexec_load, unsigned lon
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.34.2.orig/kernel/kmod.c
+++ linux-2.6.34.2/kernel/kmod.c
@@ -184,6 +184,11 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+#ifdef CONFIG_CCSECURITY
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+#endif
+
 	retval = kernel_execve(sub_info->path, sub_info->argv, sub_info->envp);
 
 	/* Exec failed? */
--- linux-2.6.34.2.orig/kernel/module.c
+++ linux-2.6.34.2/kernel/module.c
@@ -55,6 +55,7 @@
 #include <linux/async.h>
 #include <linux/percpu.h>
 #include <linux/kmemleak.h>
+#include <linux/ccsecurity.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/module.h>
@@ -718,6 +719,8 @@ SYSCALL_DEFINE2(delete_module, const cha
 
 	if (!capable(CAP_SYS_MODULE) || modules_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2508,6 +2511,8 @@ SYSCALL_DEFINE3(init_module, void __user
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE) || modules_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.34.2.orig/kernel/ptrace.c
+++ linux-2.6.34.2/kernel/ptrace.c
@@ -665,6 +665,8 @@ SYSCALL_DEFINE4(ptrace, long, request, l
 {
 	struct task_struct *child;
 	long ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
@@ -812,6 +814,8 @@ asmlinkage long compat_sys_ptrace(compat
 {
 	struct task_struct *child;
 	long ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
--- linux-2.6.34.2.orig/kernel/sched.c
+++ linux-2.6.34.2/kernel/sched.c
@@ -4383,6 +4383,8 @@ int can_nice(const struct task_struct *p
 SYSCALL_DEFINE1(nice, int, increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.34.2.orig/kernel/signal.c
+++ linux-2.6.34.2/kernel/signal.c
@@ -2313,6 +2313,8 @@ SYSCALL_DEFINE4(rt_sigtimedwait, const s
 SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)
 {
 	struct siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2381,6 +2383,8 @@ SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2393,6 +2397,8 @@ SYSCALL_DEFINE2(tkill, pid_t, pid, int, 
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -2410,6 +2416,8 @@ SYSCALL_DEFINE3(rt_sigqueueinfo, pid_t, 
 	if (info.si_code >= 0)
 		return -EPERM;
 	info.si_signo = sig;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, &info, pid);
@@ -2426,6 +2434,8 @@ long do_rt_tgsigqueueinfo(pid_t tgid, pi
 	if (info->si_code >= 0)
 		return -EPERM;
 	info->si_signo = sig;
+	if (ccs_tgsigqueue_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_send_specific(tgid, pid, sig, info);
 }
--- linux-2.6.34.2.orig/kernel/sys.c
+++ linux-2.6.34.2/kernel/sys.c
@@ -156,6 +156,10 @@ SYSCALL_DEFINE3(setpriority, int, which,
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -382,6 +386,8 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1202,6 +1208,8 @@ SYSCALL_DEFINE2(sethostname, char __user
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1251,6 +1259,8 @@ SYSCALL_DEFINE2(setdomainname, char __us
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.34.2.orig/kernel/time/ntp.c
+++ linux-2.6.34.2/kernel/time/ntp.c
@@ -14,6 +14,7 @@
 #include <linux/timex.h>
 #include <linux/time.h>
 #include <linux/mm.h>
+#include <linux/ccsecurity.h>
 
 /*
  * NTP timekeeping variables:
@@ -456,10 +457,15 @@ int do_adjtimex(struct timex *txc)
 		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
 		    !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
+		    !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 	} else {
 		/* In order to modify anything, you gotta be super-user! */
 		 if (txc->modes && !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 
 		/*
 		 * if the quartz is off by more than 10% then
--- linux-2.6.34.2.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.34.2/net/ipv4/inet_connection_sock.c
@@ -111,6 +111,8 @@ again:
 			head = &hashinfo->bhash[inet_bhashfn(net, rover,
 					hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (net_eq(ib_net(tb), net) && tb->port == rover) {
 					if (tb->fastreuse > 0 &&
--- linux-2.6.34.2.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.34.2/net/ipv4/inet_hashtables.c
@@ -456,6 +456,8 @@ int __inet_hash_connect(struct inet_time
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(net, port,
 					hinfo->bhash_size)];
 			spin_lock(&head->lock);
--- linux-2.6.34.2.orig/net/ipv4/raw.c
+++ linux-2.6.34.2/net/ipv4/raw.c
@@ -676,9 +676,14 @@ static int raw_recvmsg(struct kiocb *ioc
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.34.2.orig/net/ipv4/udp.c
+++ linux-2.6.34.2/net/ipv4/udp.c
@@ -233,6 +233,7 @@ int udp_lib_get_port(struct sock *sk, un
 			 */
 			do {
 				if (low <= snum && snum <= high &&
+				    !ccs_lport_reserved(snum) &&
 				    !test_bit(snum >> udptable->log, bitmap))
 					goto found;
 				snum += rand;
@@ -1122,6 +1123,7 @@ int udp_recvmsg(struct kiocb *iocb, stru
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -1137,6 +1139,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -1197,7 +1204,7 @@ out:
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
--- linux-2.6.34.2.orig/net/ipv6/raw.c
+++ linux-2.6.34.2/net/ipv6/raw.c
@@ -461,9 +461,14 @@ static int rawv6_recvmsg(struct kiocb *i
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.34.2.orig/net/ipv6/udp.c
+++ linux-2.6.34.2/net/ipv6/udp.c
@@ -328,6 +328,7 @@ int udpv6_recvmsg(struct kiocb *iocb, st
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -340,6 +341,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -422,7 +428,7 @@ out:
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
--- linux-2.6.34.2.orig/net/socket.c
+++ linux-2.6.34.2/net/socket.c
@@ -1493,6 +1493,7 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1521,6 +1522,11 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
 					  &len, 2) < 0) {
--- linux-2.6.34.2.orig/security/Kconfig
+++ linux-2.6.34.2/security/Kconfig
@@ -175,5 +175,7 @@ config DEFAULT_SECURITY
 	default "tomoyo" if DEFAULT_SECURITY_TOMOYO
 	default "" if DEFAULT_SECURITY_DAC
 
+source security/ccsecurity/Kconfig
+
 endmenu
 
--- linux-2.6.34.2.orig/security/Makefile
+++ linux-2.6.34.2/security/Makefile
@@ -24,3 +24,6 @@ obj-$(CONFIG_CGROUP_DEVICE)		+= device_c
 # Object integrity file lists
 subdir-$(CONFIG_IMA)			+= integrity/ima
 obj-$(CONFIG_IMA)			+= integrity/ima/built-in.o
+
+subdir-$(CONFIG_CCSECURITY)		+= ccsecurity
+obj-$(CONFIG_CCSECURITY)		+= ccsecurity/built-in.o
--- linux-2.6.34.2.orig/security/security.c
+++ linux-2.6.34.2/security/security.c
@@ -217,7 +217,10 @@ int security_syslog(int type, bool from_
 
 int security_settime(struct timespec *ts, struct timezone *tz)
 {
-	return security_ops->settime(ts, tz);
+	int error = security_ops->settime(ts, tz);
+	if (!error && !ccs_capable(CCS_SYS_SETTIME))
+		error = -EPERM;
+	return error;
 }
 
 int security_vm_enough_memory(long pages)
@@ -303,7 +306,11 @@ int security_sb_statfs(struct dentry *de
 int security_sb_mount(char *dev_name, struct path *path,
                        char *type, unsigned long flags, void *data)
 {
-	return security_ops->sb_mount(dev_name, path, type, flags, data);
+	int error = security_ops->sb_mount(dev_name, path, type, flags, data);
+	if (!error)
+		error = ccs_mount_permission(dev_name, path, type, flags,
+					     data);
+	return error;
 }
 
 int security_sb_check_sb(struct vfsmount *mnt, struct path *path)
@@ -313,7 +320,10 @@ int security_sb_check_sb(struct vfsmount
 
 int security_sb_umount(struct vfsmount *mnt, int flags)
 {
-	return security_ops->sb_umount(mnt, flags);
+	int error = security_ops->sb_umount(mnt, flags);
+	if (!error)
+		error = ccs_umount_permission(mnt, flags);
+	return error;
 }
 
 void security_sb_umount_close(struct vfsmount *mnt)
@@ -338,7 +348,10 @@ void security_sb_post_addmount(struct vf
 
 int security_sb_pivotroot(struct path *old_path, struct path *new_path)
 {
-	return security_ops->sb_pivotroot(old_path, new_path);
+	int error = security_ops->sb_pivotroot(old_path, new_path);
+	if (!error)
+		error = ccs_pivot_root_permission(old_path, new_path);
+	return error;
 }
 
 void security_sb_post_pivotroot(struct path *old_path, struct path *new_path)
@@ -399,85 +412,139 @@ EXPORT_SYMBOL(security_inode_init_securi
 int security_path_mknod(struct path *dir, struct dentry *dentry, int mode,
 			unsigned int dev)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(dir->dentry->d_inode)))
 		return 0;
-	return security_ops->path_mknod(dir, dentry, mode, dev);
+	error = security_ops->path_mknod(dir, dentry, mode, dev);
+	if (!error)
+		error = ccs_mknod_permission(dir->dentry->d_inode, dentry,
+					     dir->mnt, mode, dev);
+	return error;
 }
 EXPORT_SYMBOL(security_path_mknod);
 
 int security_path_mkdir(struct path *dir, struct dentry *dentry, int mode)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(dir->dentry->d_inode)))
 		return 0;
-	return security_ops->path_mkdir(dir, dentry, mode);
+	error = security_ops->path_mkdir(dir, dentry, mode);
+	if (!error)
+		error = ccs_mkdir_permission(dir->dentry->d_inode, dentry,
+					     dir->mnt, mode);
+	return error;
 }
 
 int security_path_rmdir(struct path *dir, struct dentry *dentry)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(dir->dentry->d_inode)))
 		return 0;
-	return security_ops->path_rmdir(dir, dentry);
+	error = security_ops->path_rmdir(dir, dentry);
+	if (!error)
+		error = ccs_rmdir_permission(dir->dentry->d_inode, dentry,
+					     dir->mnt);
+	return error;
 }
 
 int security_path_unlink(struct path *dir, struct dentry *dentry)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(dir->dentry->d_inode)))
 		return 0;
-	return security_ops->path_unlink(dir, dentry);
+	error = security_ops->path_unlink(dir, dentry);
+	if (!error)
+		error = ccs_unlink_permission(dir->dentry->d_inode, dentry,
+					      dir->mnt);
+	return error;
 }
 
 int security_path_symlink(struct path *dir, struct dentry *dentry,
 			  const char *old_name)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(dir->dentry->d_inode)))
 		return 0;
-	return security_ops->path_symlink(dir, dentry, old_name);
+	error = security_ops->path_symlink(dir, dentry, old_name);
+	if (!error)
+		error = ccs_symlink_permission(dir->dentry->d_inode, dentry,
+					       dir->mnt, old_name);
+	return error;
 }
 
 int security_path_link(struct dentry *old_dentry, struct path *new_dir,
 		       struct dentry *new_dentry)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(old_dentry->d_inode)))
 		return 0;
-	return security_ops->path_link(old_dentry, new_dir, new_dentry);
+	error = security_ops->path_link(old_dentry, new_dir, new_dentry);
+	if (!error)
+		error = ccs_link_permission(old_dentry,
+					    new_dir->dentry->d_inode,
+					    new_dentry, new_dir->mnt);
+	return error;
 }
 
 int security_path_rename(struct path *old_dir, struct dentry *old_dentry,
 			 struct path *new_dir, struct dentry *new_dentry)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(old_dentry->d_inode) ||
 		     (new_dentry->d_inode && IS_PRIVATE(new_dentry->d_inode))))
 		return 0;
-	return security_ops->path_rename(old_dir, old_dentry, new_dir,
-					 new_dentry);
+	error = security_ops->path_rename(old_dir, old_dentry, new_dir,
+					  new_dentry);
+	if (!error)
+		error =  ccs_rename_permission(old_dir->dentry->d_inode,
+					       old_dentry,
+					       new_dir->dentry->d_inode,
+					       new_dentry, new_dir->mnt);
+	return error;
 }
 
 int security_path_truncate(struct path *path, loff_t length,
 			   unsigned int time_attrs)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(path->dentry->d_inode)))
 		return 0;
-	return security_ops->path_truncate(path, length, time_attrs);
+	error = security_ops->path_truncate(path, length, time_attrs);
+	if (!error)
+		error = ccs_truncate_permission(path->dentry, path->mnt);
+	return error;
 }
 
 int security_path_chmod(struct dentry *dentry, struct vfsmount *mnt,
 			mode_t mode)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(dentry->d_inode)))
 		return 0;
-	return security_ops->path_chmod(dentry, mnt, mode);
+	error = security_ops->path_chmod(dentry, mnt, mode);
+	if (!error)
+		error = ccs_chmod_permission(dentry, mnt, mode);
+	return error;
 }
 
 int security_path_chown(struct path *path, uid_t uid, gid_t gid)
 {
+	int error;
 	if (unlikely(IS_PRIVATE(path->dentry->d_inode)))
 		return 0;
-	return security_ops->path_chown(path, uid, gid);
+	error = security_ops->path_chown(path, uid, gid);
+	if (!error)
+		error = ccs_chown_permission(path->dentry, path->mnt, uid,
+					     gid);
+	return error;
 }
 
 int security_path_chroot(struct path *path)
 {
-	return security_ops->path_chroot(path);
+	int error = security_ops->path_chroot(path);
+	if (!error)
+		error = ccs_chroot_permission(path);
+	return error;
 }
 #endif
 
@@ -677,7 +744,10 @@ void security_file_free(struct file *fil
 
 int security_file_ioctl(struct file *file, unsigned int cmd, unsigned long arg)
 {
-	return security_ops->file_ioctl(file, cmd, arg);
+	int error = security_ops->file_ioctl(file, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(file, cmd, arg);
+	return error;
 }
 
 int security_file_mmap(struct file *file, unsigned long reqprot,
@@ -705,7 +775,10 @@ int security_file_lock(struct file *file
 
 int security_file_fcntl(struct file *file, unsigned int cmd, unsigned long arg)
 {
-	return security_ops->file_fcntl(file, cmd, arg);
+	int error = security_ops->file_fcntl(file, cmd, arg);
+	if (!error)
+		error = ccs_fcntl_permission(file, cmd, arg);
+	return error;
 }
 
 int security_file_set_fowner(struct file *file)
@@ -726,7 +799,10 @@ int security_file_receive(struct file *f
 
 int security_dentry_open(struct file *file, const struct cred *cred)
 {
-	return security_ops->dentry_open(file, cred);
+	int error = security_ops->dentry_open(file, cred);
+	if (!error)
+		error = ccs_open_permission(file);
+	return error;
 }
 
 int security_task_create(unsigned long clone_flags)
@@ -1059,7 +1135,10 @@ EXPORT_SYMBOL(security_unix_may_send);
 
 int security_socket_create(int family, int type, int protocol, int kern)
 {
-	return security_ops->socket_create(family, type, protocol, kern);
+	int error = security_ops->socket_create(family, type, protocol, kern);
+	if (!error)
+		error = ccs_socket_create_permission(family, type, protocol);
+	return error;
 }
 
 int security_socket_post_create(struct socket *sock, int family,
@@ -1071,17 +1150,26 @@ int security_socket_post_create(struct s
 
 int security_socket_bind(struct socket *sock, struct sockaddr *address, int addrlen)
 {
-	return security_ops->socket_bind(sock, address, addrlen);
+	int error = security_ops->socket_bind(sock, address, addrlen);
+	if (!error)
+		error = ccs_socket_bind_permission(sock, address, addrlen);
+	return error;
 }
 
 int security_socket_connect(struct socket *sock, struct sockaddr *address, int addrlen)
 {
-	return security_ops->socket_connect(sock, address, addrlen);
+	int error = security_ops->socket_connect(sock, address, addrlen);
+	if (!error)
+		error = ccs_socket_connect_permission(sock, address, addrlen);
+	return error;
 }
 
 int security_socket_listen(struct socket *sock, int backlog)
 {
-	return security_ops->socket_listen(sock, backlog);
+	int error = security_ops->socket_listen(sock, backlog);
+	if (!error)
+		error = ccs_socket_listen_permission(sock);
+	return error;
 }
 
 int security_socket_accept(struct socket *sock, struct socket *newsock)
@@ -1091,7 +1179,10 @@ int security_socket_accept(struct socket
 
 int security_socket_sendmsg(struct socket *sock, struct msghdr *msg, int size)
 {
-	return security_ops->socket_sendmsg(sock, msg, size);
+	int error = security_ops->socket_sendmsg(sock, msg, size);
+	if (!error)
+		error = ccs_socket_sendmsg_permission(sock, msg, size);
+	return error;
 }
 
 int security_socket_recvmsg(struct socket *sock, struct msghdr *msg,
