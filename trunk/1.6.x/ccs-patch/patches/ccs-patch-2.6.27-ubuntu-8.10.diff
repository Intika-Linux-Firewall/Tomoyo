This is TOMOYO Linux patch for Ubuntu 8.10.

Source code for this patch is "apt-get install linux-source-2.6.27"
---
 arch/ia64/ia32/sys_ia32.c       |    3 +++
 arch/mips/kernel/ptrace32.c     |    3 +++
 fs/Kconfig                      |    2 ++
 fs/Makefile                     |    2 ++
 fs/attr.c                       |   13 +++++++++++++
 fs/compat.c                     |    3 ++-
 fs/compat_ioctl.c               |    7 +++++++
 fs/exec.c                       |   10 +++++++++-
 fs/fcntl.c                      |    5 +++++
 fs/ioctl.c                      |    5 +++++
 fs/namei.c                      |   35 +++++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   27 +++++++++++++++++++++++++++
 fs/open.c                       |   15 +++++++++++++++
 fs/proc/Makefile                |    3 +++
 fs/proc/proc_misc.c             |    3 +++
 include/linux/init_task.h       |    2 ++
 include/linux/sched.h           |    4 ++++
 kernel/compat.c                 |    3 +++
 kernel/kexec.c                  |    3 +++
 kernel/kmod.c                   |    3 +++
 kernel/module.c                 |    5 +++++
 kernel/ptrace.c                 |    5 +++++
 kernel/sched.c                  |    3 +++
 kernel/signal.c                 |   13 +++++++++++++
 kernel/sys.c                    |   11 +++++++++++
 kernel/sysctl.c                 |    4 ++++
 kernel/time.c                   |    5 +++++
 kernel/time/ntp.c               |    3 +++
 net/ipv4/inet_connection_sock.c |    3 +++
 net/ipv4/inet_hashtables.c      |    3 +++
 net/ipv4/raw.c                  |   12 +++++++++---
 net/ipv4/udp.c                  |   13 ++++++++++++-
 net/ipv6/raw.c                  |   12 +++++++++---
 net/ipv6/udp.c                  |    9 ++++++++-
 net/socket.c                    |   28 ++++++++++++++++++++++++++++
 net/unix/af_unix.c              |    4 ++++
 36 files changed, 274 insertions(+), 10 deletions(-)

--- linux-2.6.27-17.46.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.6.27-17.46/arch/ia64/ia32/sys_ia32.c
@@ -51,6 +51,7 @@
 #include <asm/types.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/tomoyo.h>
 
 #include "ia32priv.h"
 
@@ -1622,6 +1623,8 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.27-17.46.orig/arch/mips/kernel/ptrace32.c
+++ linux-2.6.27-17.46/arch/mips/kernel/ptrace32.c
@@ -35,6 +35,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+#include <linux/tomoyo.h>
 
 int ptrace_getregs(struct task_struct *child, __s64 __user *data);
 int ptrace_setregs(struct task_struct *child, __s64 __user *data);
@@ -50,6 +51,8 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
--- linux-2.6.27-17.46.orig/fs/Kconfig
+++ linux-2.6.27-17.46/fs/Kconfig
@@ -2093,4 +2093,6 @@ endif
 source "fs/nls/Kconfig"
 source "fs/dlm/Kconfig"
 
+source "fs/Kconfig.ccs"
+
 endmenu
--- linux-2.6.27-17.46.orig/fs/Makefile
+++ linux-2.6.27-17.46/fs/Makefile
@@ -122,3 +122,5 @@ obj-$(CONFIG_HPPFS)		+= hppfs/
 obj-$(CONFIG_DEBUG_FS)		+= debugfs/
 obj-$(CONFIG_OCFS2_FS)		+= ocfs2/
 obj-$(CONFIG_GFS2_FS)           += gfs2/
+
+include $(srctree)/fs/Makefile-2.6.ccs
--- linux-2.6.27-17.46.orig/fs/attr.c
+++ linux-2.6.27-17.46/fs/attr.c
@@ -14,6 +14,7 @@
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
 #include <linux/security.h>
+#include <linux/tomoyo.h>
 
 /* Taken over from the old code... */
 
@@ -165,6 +166,12 @@ int fnotify_change(struct dentry *dentry
 
 	if (inode->i_op && inode->i_op->setattr) {
 		error = security_inode_setattr(dentry, mnt, attr);
+		if (!error && (ia_valid & ATTR_MODE) &&
+		    !ccs_capable(CCS_SYS_CHMOD))
+			error = -EPERM;
+		if (!error && (ia_valid & (ATTR_UID | ATTR_GID)) &&
+		    !ccs_capable(CCS_SYS_CHOWN))
+			error = -EPERM;
 		if (!error) {
 			if (file && file->f_op && file->f_op->fsetattr)
 				error = file->f_op->fsetattr(file, attr);
@@ -186,6 +193,12 @@ int fnotify_change(struct dentry *dentry
 		error = inode_change_ok(inode, attr);
 		if (!error)
 			error = security_inode_setattr(dentry, mnt, attr);
+		if (!error && (ia_valid & ATTR_MODE) &&
+		    !ccs_capable(CCS_SYS_CHMOD))
+			error = -EPERM;
+		if (!error && (ia_valid & (ATTR_UID | ATTR_GID)) &&
+		    !ccs_capable(CCS_SYS_CHOWN))
+			error = -EPERM;
 		if (!error) {
 			if ((ia_valid & ATTR_UID && attr->ia_uid != inode->i_uid) ||
 			    (ia_valid & ATTR_GID && attr->ia_gid != inode->i_gid))
--- linux-2.6.27-17.46.orig/fs/compat.c
+++ linux-2.6.27-17.46/fs/compat.c
@@ -56,6 +56,7 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+#include <linux/tomoyo.h>
 
 int compat_log = 1;
 
@@ -1404,7 +1405,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		/* execve success */
 		security_bprm_free(bprm);
--- linux-2.6.27-17.46.orig/fs/compat_ioctl.c
+++ linux-2.6.27-17.46/fs/compat_ioctl.c
@@ -113,6 +113,7 @@
 #ifdef CONFIG_SPARC
 #include <asm/fbio.h>
 #endif
+#include <linux/tomoyo.h>
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -2786,6 +2787,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -2810,6 +2813,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.27-17.46.orig/fs/exec.c
+++ linux-2.6.27-17.46/fs/exec.c
@@ -64,6 +64,8 @@
 #include <linux/a.out.h>
 #endif
 
+#include <linux/tomoyo.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 int suid_dumpable = 0;
@@ -132,6 +134,9 @@ SYSCALL_DEFINE1(uselib, const char __use
 	error = vfs_permission(&nd, MAY_READ | MAY_EXEC | MAY_OPEN);
 	if (error)
 		goto exit;
+	error = ccs_check_uselib_permission(nd.path.dentry, nd.path.mnt);
+	if (error)
+		goto exit;
 
 	file = nameidata_to_filp(&nd, O_RDONLY|O_LARGEFILE);
 	error = PTR_ERR(file);
@@ -685,6 +690,9 @@ struct file *open_exec(const char *name)
 	err = vfs_permission(&nd, MAY_EXEC | MAY_OPEN);
 	if (err)
 		goto out_path_put;
+	err = ccs_check_open_exec_permission(nd.path.dentry, nd.path.mnt);
+	if (err)
+		goto out_path_put;
 
 	file = nameidata_to_filp(&nd, O_RDONLY|O_LARGEFILE);
 	if (IS_ERR(file))
@@ -1352,7 +1360,7 @@ int do_execve(char * filename,
 		goto out;
 
 	current->flags &= ~PF_KTHREAD;
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		/* execve success */
 		security_bprm_free(bprm);
--- linux-2.6.27-17.46.orig/fs/fcntl.c
+++ linux-2.6.27-17.46/fs/fcntl.c
@@ -24,6 +24,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 void set_close_on_exec(unsigned int fd, int flag)
 {
@@ -155,6 +156,10 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) &&
+	    ccs_check_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (!is_owner_or_cap(inode))
--- linux-2.6.27-17.46.orig/fs/ioctl.c
+++ linux-2.6.27-17.46/fs/ioctl.c
@@ -15,6 +15,7 @@
 #include <linux/uaccess.h>
 
 #include <asm/ioctls.h>
+#include <linux/tomoyo.h>
 
 /**
  * vfs_ioctl - call filesystem specific ioctl methods
@@ -35,6 +36,8 @@ static long vfs_ioctl(struct file *filp,
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -206,6 +209,8 @@ SYSCALL_DEFINE3(ioctl, unsigned int, fd,
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.27-17.46.orig/fs/namei.c
+++ linux-2.6.27-17.46/fs/namei.c
@@ -35,6 +35,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/tomoyo.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1581,6 +1583,11 @@ int may_open(struct nameidata *nd, int a
 		if (!is_owner_or_cap(inode))
 			return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_check_open_permission(dentry, nd->path.mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1627,6 +1634,9 @@ static int __open_namei_create(struct na
 
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_check_mknod_permission(dir->d_inode, path->dentry,
+					   nd->path.mnt, mode, 0);
+	if (!error)
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
 	mutex_unlock(&dir->d_inode->i_mutex);
 	dput(nd->path.dentry);
@@ -1637,6 +1647,7 @@ static int __open_namei_create(struct na
 	return may_open(nd, 0, flag & ~O_TRUNC);
 }
 
+#include <linux/tomoyo_vfs.h>
 /*
  * Note that while the flag value (low two bits) for sys_open means:
  *	00 - read-only
@@ -2031,6 +2042,10 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_check_mknod_permission(nd.path.dentry->d_inode, dentry,
+					   nd.path.mnt, mode,
+					   new_decode_dev(dev));
+	if (!error)
 	switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.path.dentry->d_inode,dentry,mode,&nd);
@@ -2104,6 +2119,9 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_check_mkdir_permission(nd.path.dentry->d_inode, dentry,
+					   nd.path.mnt, mode);
+	if (!error)
 	error = vfs_mkdir(nd.path.dentry->d_inode, dentry, nd.path.mnt, mode);
 	mnt_drop_write(nd.path.mnt);
 out_dput:
@@ -2212,6 +2230,9 @@ static long do_rmdir(int dfd, const char
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto exit3;
+	error = ccs_check_rmdir_permission(nd.path.dentry->d_inode, dentry,
+					   nd.path.mnt);
+	if (!error)
 	error = vfs_rmdir(nd.path.dentry->d_inode, dentry, nd.path.mnt);
 	mnt_drop_write(nd.path.mnt);
 exit3:
@@ -2294,6 +2315,9 @@ static long do_unlinkat(int dfd, const c
 		error = mnt_want_write(nd.path.mnt);
 		if (error)
 			goto exit2;
+		error = ccs_check_unlink_permission(nd.path.dentry->d_inode,
+						    dentry, nd.path.mnt);
+		if (!error)
 		error = vfs_unlink(nd.path.dentry->d_inode, dentry, nd.path.mnt);
 		mnt_drop_write(nd.path.mnt);
 	exit2:
@@ -2376,6 +2400,9 @@ SYSCALL_DEFINE3(symlinkat, const char __
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_check_symlink_permission(nd.path.dentry->d_inode, dentry,
+					     nd.path.mnt, from);
+	if (!error)
 	error = vfs_symlink(nd.path.dentry->d_inode, dentry, nd.path.mnt, from);
 	mnt_drop_write(nd.path.mnt);
 out_dput:
@@ -2473,6 +2500,10 @@ SYSCALL_DEFINE5(linkat, int, olddfd, con
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_check_link_permission(old_path.dentry,
+					  nd.path.dentry->d_inode, new_dentry,
+					  nd.path.mnt);
+	if (!error)
 	error = vfs_link(old_path.dentry, old_path.mnt,
 			 nd.path.dentry->d_inode,
 			 new_dentry, nd.path.mnt);
@@ -2714,6 +2745,10 @@ SYSCALL_DEFINE4(renameat, int, olddfd, c
 	error = mnt_want_write(oldnd.path.mnt);
 	if (error)
 		goto exit5;
+	error = ccs_check_rename_permission(old_dir->d_inode, old_dentry,
+					    new_dir->d_inode, new_dentry,
+					    newnd.path.mnt);
+	if (!error)
 	error = vfs_rename(old_dir->d_inode, old_dentry, oldnd.path.mnt,
 			   new_dir->d_inode, new_dentry, newnd.path.mnt);
 	mnt_drop_write(oldnd.path.mnt);
--- linux-2.6.27-17.46.orig/fs/namespace.c
+++ linux-2.6.27-17.46/fs/namespace.c
@@ -31,6 +31,8 @@
 #include <asm/unistd.h>
 #include "pnode.h"
 #include "internal.h"
+#include <linux/sakura.h>
+#include <linux/tomoyo.h>
 
 #define HASH_SHIFT ilog2(PAGE_SIZE / sizeof(struct list_head))
 #define HASH_SIZE (1UL << HASH_SHIFT)
@@ -1041,6 +1043,9 @@ static int do_umount(struct vfsmount *mn
 	if (retval)
 		return retval;
 
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
 	 * unmounting unconditionally. Unmount only happens if:
@@ -1132,6 +1137,8 @@ SYSCALL_DEFINE2(umount, char __user *, n
 {
 	struct path path;
 	int retval;
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 
 	retval = user_path(name, &path);
 	if (retval)
@@ -1479,6 +1486,9 @@ static noinline int do_loopback(struct n
 	err = -EINVAL;
 	if (IS_MNT_UNBINDABLE(old_nd.path.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(&nd->path))
+		goto out;
 
 	if (!check_mnt(nd->path.mnt) || !check_mnt(old_nd.path.mnt))
 		goto out;
@@ -1598,6 +1608,9 @@ static noinline int do_move_mount(struct
 	if (!check_mnt(nd->path.mnt) || !check_mnt(old_nd.path.mnt))
 		goto out;
 
+	err = -EPERM;
+	if (ccs_may_umount(old_nd.path.mnt) || ccs_may_mount(&nd->path))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&nd->path.dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(nd->path.dentry->d_inode))
@@ -1702,6 +1715,9 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, path)))
@@ -1925,6 +1941,13 @@ long do_mount(char *dev_name, char *dir_
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+	if (!ccs_capable(CCS_SYS_MOUNT))
+		return -EPERM;
+	retval = ccs_check_mount_permission(dev_name, dir_name, type_page,
+					    &flags);
+	if (retval)
+		return retval;
+
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
 		mnt_flags |= MNT_NOSUID;
@@ -2188,6 +2211,8 @@ SYSCALL_DEFINE2(pivot_root, const char _
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_PIVOT_ROOT))
+		return -EPERM;
 
 	error = user_path_dir(new_root, &new);
 	if (error)
@@ -2201,6 +2226,8 @@ SYSCALL_DEFINE2(pivot_root, const char _
 		goto out1;
 
 	error = security_sb_pivotroot(&old, &new);
+	if (!error)
+		error = ccs_check_pivot_root_permission(&old, &new);
 	if (error) {
 		path_put(&old);
 		goto out1;
--- linux-2.6.27-17.46.orig/fs/open.c
+++ linux-2.6.27-17.46/fs/open.c
@@ -29,6 +29,8 @@
 #include <linux/rcupdate.h>
 #include <linux/audit.h>
 #include <linux/falloc.h>
+#include <linux/sakura.h>
+#include <linux/tomoyo.h>
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -268,6 +270,9 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto put_write_and_out;
 
+	error = ccs_check_truncate_permission(path.dentry, path.mnt, length, 0);
+	if (error)
+		goto put_write_and_out;
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -324,6 +329,10 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	error = ccs_check_truncate_permission(dentry, file->f_vfsmnt, length,
+					      0);
+	if (error)
+		goto out_putf;
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, file->f_path.mnt, length,
@@ -590,6 +599,10 @@ SYSCALL_DEFINE1(chroot, const char __use
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (!ccs_capable(CCS_SYS_CHROOT))
+		goto dput_and_out;
+	if (ccs_check_chroot_permission(&path))
+		goto dput_and_out;
 
 	set_fs_root(current->fs, &path);
 	error = 0;
@@ -1160,6 +1173,8 @@ EXPORT_SYMBOL(sys_close);
  */
 SYSCALL_DEFINE0(vhangup)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		/* XXX: this needs locking */
 		tty_vhangup(current->signal->tty);
--- linux-2.6.27-17.46.orig/fs/proc/Makefile
+++ linux-2.6.27-17.46/fs/proc/Makefile
@@ -16,3 +16,6 @@ proc-$(CONFIG_PROC_KCORE)	+= kcore.o
 proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o
 proc-$(CONFIG_PROC_DEVICETREE)	+= proc_devtree.o
 proc-$(CONFIG_PRINTK)	+= kmsg.o
+
+proc-$(CONFIG_SAKURA) += ccs_proc.o
+proc-$(CONFIG_TOMOYO) += ccs_proc.o
--- linux-2.6.27-17.46.orig/fs/proc/proc_misc.c
+++ linux-2.6.27-17.46/fs/proc/proc_misc.c
@@ -950,4 +950,7 @@ void __init proc_misc_init(void)
 #ifdef CONFIG_MAGIC_SYSRQ
 	proc_create("sysrq-trigger", S_IWUSR, NULL, &proc_sysrq_trigger_operations);
 #endif
+#if defined(CONFIG_SAKURA) || defined(CONFIG_TOMOYO)
+	printk(KERN_INFO "Hook version: 2.6.27-17.46 2010/07/21\n");
+#endif
 }
--- linux-2.6.27-17.46.orig/include/linux/init_task.h
+++ linux-2.6.27-17.46/include/linux/init_task.h
@@ -179,6 +179,8 @@ extern struct group_info init_groups;
 	INIT_IDS							\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	.ccs_domain_info = NULL,                 \
+	.ccs_flags = 0,                          \
 }
 
 
--- linux-2.6.27-17.46.orig/include/linux/sched.h
+++ linux-2.6.27-17.46/include/linux/sched.h
@@ -29,6 +29,8 @@
 #define CLONE_NEWNET		0x40000000	/* New network namespace */
 #define CLONE_IO		0x80000000	/* Clone io context */
 
+struct ccs_domain_info;
+
 /*
  * Scheduling policies
  */
@@ -1306,6 +1308,8 @@ struct task_struct {
 	int latency_record_count;
 	struct latency_record latency_record[LT_SAVECOUNT];
 #endif
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
 };
 
 /*
--- linux-2.6.27-17.46.orig/kernel/compat.c
+++ linux-2.6.27-17.46/kernel/compat.c
@@ -25,6 +25,7 @@
 #include <linux/posix-timers.h>
 
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)
 {
@@ -868,6 +869,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.27-17.46.orig/kernel/kexec.c
+++ linux-2.6.27-17.46/kernel/kexec.c
@@ -36,6 +36,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/sections.h>
+#include <linux/tomoyo.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -942,6 +943,8 @@ SYSCALL_DEFINE4(kexec_load, unsigned lon
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.27-17.46.orig/kernel/kmod.c
+++ linux-2.6.27-17.46/kernel/kmod.c
@@ -174,6 +174,9 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+
 	retval = kernel_execve(sub_info->path, sub_info->argv, sub_info->envp);
 
 	/* Exec failed? */
--- linux-2.6.27-17.46.orig/kernel/module.c
+++ linux-2.6.27-17.46/kernel/module.c
@@ -46,6 +46,7 @@
 #include <asm/cacheflush.h>
 #include <linux/license.h>
 #include <asm/sections.h>
+#include <linux/tomoyo.h>
 
 #if 0
 #define DEBUGP printk
@@ -724,6 +725,8 @@ SYSCALL_DEFINE2(delete_module, const cha
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2266,6 +2269,8 @@ SYSCALL_DEFINE3(init_module, void __user
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.27-17.46.orig/kernel/ptrace.c
+++ linux-2.6.27-17.46/kernel/ptrace.c
@@ -24,6 +24,7 @@
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 /*
  * ptrace a task: make the debugger its new parent and
@@ -553,6 +554,8 @@ SYSCALL_DEFINE4(ptrace, long, request, l
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
@@ -676,6 +679,8 @@ asmlinkage long compat_sys_ptrace(compat
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
--- linux-2.6.27-17.46.orig/kernel/sched.c
+++ linux-2.6.27-17.46/kernel/sched.c
@@ -74,6 +74,7 @@
 
 #include <asm/tlb.h>
 #include <asm/irq_regs.h>
+#include <linux/tomoyo.h>
 
 #include "sched_cpupri.h"
 
@@ -4945,6 +4946,8 @@ int can_nice(const struct task_struct *p
 SYSCALL_DEFINE1(nice, int, increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.27-17.46.orig/kernel/signal.c
+++ linux-2.6.27-17.46/kernel/signal.c
@@ -33,6 +33,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/tomoyo.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2200,6 +2201,10 @@ SYSCALL_DEFINE4(rt_sigtimedwait, const s
 SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)
 {
 	struct siginfo info;
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2261,6 +2266,10 @@ SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2273,6 +2282,10 @@ SYSCALL_DEFINE2(tkill, pid_t, pid, int, 
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
--- linux-2.6.27-17.46.orig/kernel/sys.c
+++ linux-2.6.27-17.46/kernel/sys.c
@@ -42,6 +42,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/tomoyo.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -146,6 +147,10 @@ SYSCALL_DEFINE3(setpriority, int, which,
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -363,6 +368,8 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1349,6 +1356,8 @@ SYSCALL_DEFINE2(sethostname, char __user
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1394,6 +1403,8 @@ SYSCALL_DEFINE2(setdomainname, char __us
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.27-17.46.orig/kernel/sysctl.c
+++ linux-2.6.27-17.46/kernel/sysctl.c
@@ -51,6 +51,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/tomoyo.h>
 
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
@@ -1630,6 +1631,9 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen,
 					head->root, head->ctl_table);
--- linux-2.6.27-17.46.orig/kernel/time.c
+++ linux-2.6.27-17.46/kernel/time.c
@@ -40,6 +40,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/tomoyo.h>
 
 #include "timeconst.h"
 
@@ -90,6 +91,8 @@ SYSCALL_DEFINE1(stime, time_t __user *, 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
@@ -161,6 +164,8 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.27-17.46.orig/kernel/time/ntp.c
+++ linux-2.6.27-17.46/kernel/time/ntp.c
@@ -18,6 +18,7 @@
 #include <linux/math64.h>
 #include <linux/clocksource.h>
 #include <asm/timex.h>
+#include <linux/tomoyo.h>
 
 /*
  * Timekeeping variables
@@ -283,6 +284,8 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.6.27-17.46.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.27-17.46/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,7 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+#include <linux/sakura.h>
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -106,6 +107,8 @@ int inet_csk_get_port(struct sock *sk, u
 			head = &hashinfo->bhash[inet_bhashfn(net, rover,
 					hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->ib_net == net && tb->port == rover)
 					goto next;
--- linux-2.6.27-17.46.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.27-17.46/net/ipv4/inet_hashtables.c
@@ -22,6 +22,7 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+#include <linux/sakura.h>
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -440,6 +441,8 @@ int __inet_hash_connect(struct inet_time
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(net, port,
 					hinfo->bhash_size)];
 			spin_lock(&head->lock);
--- linux-2.6.27-17.46.orig/net/ipv4/raw.c
+++ linux-2.6.27-17.46/net/ipv4/raw.c
@@ -77,6 +77,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/tomoyo_socket.h>
 
 static struct raw_hashinfo raw_v4_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v4_hashinfo.lock),
@@ -662,9 +663,14 @@ static int raw_recvmsg(struct kiocb *ioc
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.27-17.46.orig/net/ipv4/udp.c
+++ linux-2.6.27-17.46/net/ipv4/udp.c
@@ -103,6 +103,8 @@
 #include <net/checksum.h>
 #include <net/xfrm.h>
 #include "udp_impl.h"
+#include <linux/sakura.h>
+#include <linux/tomoyo_socket.h>
 
 /*
  *	Snmp MIB for the UDP layer
@@ -170,6 +172,8 @@ int udp_lib_get_port(struct sock *sk, un
 		/* 1st pass: look for empty (or shortest) hash chain */
 		for (i = 0; i < UDP_HTABLE_SIZE; i++) {
 			int size = 0;
+			if (ccs_lport_reserved(rover))
+				goto next;
 
 			head = &udptable[udp_hashfn(net, rover)];
 			if (hlist_empty(head))
@@ -193,6 +197,7 @@ int udp_lib_get_port(struct sock *sk, un
 		/* 2nd pass: find hole in shortest hash chain */
 		rover = best;
 		for (i = 0; i < (1 << 16) / UDP_HTABLE_SIZE; i++) {
+			if (!ccs_lport_reserved(rover))
 			if (! __udp_lib_lport_inuse(net, rover, udptable))
 				goto gotit;
 			rover += UDP_HTABLE_SIZE;
@@ -843,6 +848,7 @@ int udp_recvmsg(struct kiocb *iocb, stru
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -858,6 +864,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -920,7 +931,7 @@ out:
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
--- linux-2.6.27-17.46.orig/net/ipv6/raw.c
+++ linux-2.6.27-17.46/net/ipv6/raw.c
@@ -59,6 +59,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/tomoyo_socket.h>
 
 static struct raw_hashinfo raw_v6_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v6_hashinfo.lock),
@@ -462,9 +463,14 @@ static int rawv6_recvmsg(struct kiocb *i
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.27-17.46.orig/net/ipv6/udp.c
+++ linux-2.6.27-17.46/net/ipv6/udp.c
@@ -48,6 +48,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+#include <linux/tomoyo_socket.h>
 
 int udp_v6_get_port(struct sock *sk, unsigned short snum)
 {
@@ -123,6 +124,7 @@ int udpv6_recvmsg(struct kiocb *iocb, st
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,6 +137,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -213,7 +220,7 @@ out:
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
--- linux-2.6.27-17.46.orig/net/socket.c
+++ linux-2.6.27-17.46/net/socket.c
@@ -97,6 +97,9 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -560,6 +563,10 @@ static inline int __sock_sendmsg(struct 
 	err = security_socket_sendmsg(sock, msg, size);
 	if (err)
 		return err;
+	if (ccs_socket_sendmsg_permission(sock,
+					  (struct sockaddr *) msg->msg_name,
+					  msg->msg_namelen))
+		return -EPERM;
 
 	return sock->ops->sendmsg(iocb, sock, msg, size);
 }
@@ -1123,6 +1130,10 @@ static int __sock_create(struct net *net
 		family = PF_PACKET;
 	}
 
+	err = ccs_socket_create_permission(family, type, protocol);
+	if (err)
+		return err;
+
 	err = security_socket_create(family, type, protocol, kern);
 	if (err)
 		return err;
@@ -1379,6 +1390,11 @@ SYSCALL_DEFINE3(bind, int, fd, struct so
 						   (struct sockaddr *)&address,
 						   addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 &address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      &address, addrlen);
@@ -1408,6 +1424,8 @@ SYSCALL_DEFINE2(listen, int, fd, int, ba
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 		fput_light(sock->file, fput_needed);
@@ -1445,6 +1463,7 @@ long do_accept(int fd, struct sockaddr _
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1477,6 +1496,11 @@ long do_accept(int fd, struct sockaddr _
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
 					  &len, 2) < 0) {
@@ -1598,6 +1622,10 @@ SYSCALL_DEFINE3(connect, int, fd, struct
 	err = move_addr_to_kernel(uservaddr, addrlen, (struct sockaddr *)&address);
 	if (err < 0)
 		goto out_put;
+	err = ccs_socket_connect_permission(sock, (struct sockaddr *) &address,
+					    addrlen);
+	if (err)
+		goto out_put;
 
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)&address, addrlen);
--- linux-2.6.27-17.46.orig/net/unix/af_unix.c
+++ linux-2.6.27-17.46/net/unix/af_unix.c
@@ -114,6 +114,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/tomoyo.h>
 
 static struct hlist_head unix_socket_table[UNIX_HASH_SIZE + 1];
 static DEFINE_SPINLOCK(unix_table_lock);
@@ -827,6 +828,9 @@ static int unix_bind(struct socket *sock
 		err = mnt_want_write(nd.path.mnt);
 		if (err)
 			goto out_mknod_dput;
+		err = ccs_check_mknod_permission(nd.path.dentry->d_inode,
+						 dentry, nd.path.mnt, mode, 0);
+		if (!err)
 		err = vfs_mknod(nd.path.dentry->d_inode, dentry, nd.path.mnt,
 				mode, 0);
 		mnt_drop_write(nd.path.mnt);
