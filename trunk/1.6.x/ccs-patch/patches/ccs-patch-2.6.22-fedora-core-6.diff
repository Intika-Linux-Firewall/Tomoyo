This is TOMOYO Linux patch for Fedora Core 6.

Source code for this patch is http://ftp.riken.jp/Linux/fedora/core/updates/6/SRPMS/kernel-2.6.22.14-72.fc6.src.rpm
---
 arch/alpha/kernel/ptrace.c      |    3 +++
 arch/ia64/ia32/sys_ia32.c       |    3 +++
 arch/m32r/kernel/ptrace.c       |    3 +++
 arch/mips/kernel/ptrace32.c     |    3 +++
 arch/sparc/kernel/ptrace.c      |    5 +++++
 fs/Kconfig                      |    2 ++
 fs/Makefile                     |    2 ++
 fs/attr.c                       |    5 +++++
 fs/compat.c                     |    3 ++-
 fs/compat_ioctl.c               |    7 +++++++
 fs/exec.c                       |   11 ++++++++++-
 fs/fcntl.c                      |    5 +++++
 fs/ioctl.c                      |    5 +++++
 fs/namei.c                      |   33 +++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   27 +++++++++++++++++++++++++++
 fs/open.c                       |   14 ++++++++++++++
 fs/proc/Makefile                |    3 +++
 fs/proc/proc_misc.c             |    1 +
 include/linux/init_task.h       |    2 ++
 include/linux/sched.h           |    4 ++++
 kernel/compat.c                 |    3 +++
 kernel/kexec.c                  |    3 +++
 kernel/kmod.c                   |    3 +++
 kernel/module.c                 |    5 +++++
 kernel/ptrace.c                 |    5 +++++
 kernel/sched.c                  |    3 +++
 kernel/signal.c                 |   13 +++++++++++++
 kernel/sys.c                    |   11 +++++++++++
 kernel/sysctl.c                 |    5 +++++
 kernel/time.c                   |    5 +++++
 kernel/time/ntp.c               |    3 +++
 net/ipv4/inet_connection_sock.c |    3 +++
 net/ipv4/inet_hashtables.c      |    3 +++
 net/ipv4/raw.c                  |    4 ++++
 net/ipv4/udp.c                  |    9 +++++++++
 net/ipv6/inet6_hashtables.c     |    3 +++
 net/ipv6/raw.c                  |    4 ++++
 net/ipv6/udp.c                  |    4 ++++
 net/socket.c                    |   27 +++++++++++++++++++++++++++
 net/unix/af_unix.c              |    4 ++++
 40 files changed, 259 insertions(+), 2 deletions(-)

--- linux-2.6.22.14-72.fc6.orig/arch/alpha/kernel/ptrace.c
+++ linux-2.6.22.14-72.fc6/arch/alpha/kernel/ptrace.c
@@ -20,6 +20,7 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/fpu.h>
+#include <linux/tomoyo.h>
 
 #include "proto.h"
 
@@ -268,6 +269,8 @@ do_sys_ptrace(long request, long pid, lo
 	unsigned long tmp;
 	size_t copied;
 	long ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	DBG(DBG_MEM, ("request=%ld pid=%ld addr=0x%lx data=0x%lx\n",
--- linux-2.6.22.14-72.fc6.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.6.22.14-72.fc6/arch/ia64/ia32/sys_ia32.c
@@ -57,6 +57,7 @@
 #include <asm/types.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/tomoyo.h>
 
 #include "ia32priv.h"
 
@@ -1741,6 +1742,8 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.22.14-72.fc6.orig/arch/m32r/kernel/ptrace.c
+++ linux-2.6.22.14-72.fc6/arch/m32r/kernel/ptrace.c
@@ -32,6 +32,7 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
+#include <linux/tomoyo.h>
 
 /*
  * This routine will get a word off of the process kernel stack.
@@ -742,6 +743,8 @@ asmlinkage long sys_ptrace(long request,
 {
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.22.14-72.fc6.orig/arch/mips/kernel/ptrace32.c
+++ linux-2.6.22.14-72.fc6/arch/mips/kernel/ptrace32.c
@@ -35,6 +35,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+#include <linux/tomoyo.h>
 
 int ptrace_getregs (struct task_struct *child, __s64 __user *data);
 int ptrace_setregs (struct task_struct *child, __s64 __user *data);
@@ -50,6 +51,8 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
--- linux-2.6.22.14-72.fc6.orig/arch/sparc/kernel/ptrace.c
+++ linux-2.6.22.14-72.fc6/arch/sparc/kernel/ptrace.c
@@ -23,6 +23,7 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 #define MAGIC_CONSTANT 0x80000000
 
@@ -267,6 +268,10 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
 
 	lock_kernel();
 #ifdef DEBUG_PTRACE
--- linux-2.6.22.14-72.fc6.orig/fs/Kconfig
+++ linux-2.6.22.14-72.fc6/fs/Kconfig
@@ -2135,5 +2135,7 @@ endif
 source "fs/nls/Kconfig"
 source "fs/dlm/Kconfig"
 
+source "fs/Kconfig.ccs"
+
 endmenu
 
--- linux-2.6.22.14-72.fc6.orig/fs/Makefile
+++ linux-2.6.22.14-72.fc6/fs/Makefile
@@ -119,3 +119,5 @@ obj-$(CONFIG_HPPFS)		+= hppfs/
 obj-$(CONFIG_DEBUG_FS)		+= debugfs/
 obj-$(CONFIG_OCFS2_FS)		+= ocfs2/
 obj-$(CONFIG_GFS2_FS)           += gfs2/
+
+include $(srctree)/fs/Makefile-2.6.ccs
--- linux-2.6.22.14-72.fc6.orig/fs/attr.c
+++ linux-2.6.22.14-72.fc6/fs/attr.c
@@ -14,6 +14,7 @@
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
 #include <linux/security.h>
+#include <linux/tomoyo.h>
 
 /* Taken over from the old code... */
 
@@ -145,11 +146,15 @@ int notify_change(struct dentry * dentry
 	if (inode->i_op && inode->i_op->setattr) {
 		error = security_inode_setattr(dentry, attr);
 		if (!error)
+			error = ccs_check_setattr_permission(dentry, attr);
+		if (!error)
 			error = inode->i_op->setattr(dentry, attr);
 	} else {
 		error = inode_change_ok(inode, attr);
 		if (!error)
 			error = security_inode_setattr(dentry, attr);
+		if (!error)
+			error = ccs_check_setattr_permission(dentry, attr);
 		if (!error) {
 			if ((ia_valid & ATTR_UID && attr->ia_uid != inode->i_uid) ||
 			    (ia_valid & ATTR_GID && attr->ia_gid != inode->i_gid))
--- linux-2.6.22.14-72.fc6.orig/fs/compat.c
+++ linux-2.6.22.14-72.fc6/fs/compat.c
@@ -55,6 +55,7 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+#include <linux/tomoyo.h>
 
 int compat_log = 1;
 
@@ -1419,7 +1420,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		free_arg_pages(bprm);
 
--- linux-2.6.22.14-72.fc6.orig/fs/compat_ioctl.c
+++ linux-2.6.22.14-72.fc6/fs/compat_ioctl.c
@@ -113,6 +113,7 @@
 #include <linux/dvb/frontend.h>
 #include <linux/dvb/video.h>
 #include <linux/lp.h>
+#include <linux/tomoyo.h>
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -3543,6 +3544,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -3567,6 +3570,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.22.14-72.fc6.orig/fs/exec.c
+++ linux-2.6.22.14-72.fc6/fs/exec.c
@@ -59,6 +59,8 @@
 #include <linux/kmod.h>
 #endif
 
+#include <linux/tomoyo.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 int suid_dumpable = 0;
@@ -145,6 +147,10 @@ asmlinkage long sys_uselib(const char __
 	if (error)
 		goto exit;
 
+	error = ccs_check_uselib_permission(nd.dentry, nd.mnt);
+	if (error)
+		goto exit;
+
 	file = nameidata_to_filp(&nd, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -490,6 +496,9 @@ struct file *open_exec(const char *name)
 		if (!(nd.mnt->mnt_flags & MNT_NOEXEC) &&
 		    S_ISREG(inode->i_mode)) {
 			int err = vfs_permission(&nd, MAY_EXEC);
+			if (!err)
+				err = ccs_check_open_exec_permission(nd.dentry,
+								     nd.mnt);
 			file = ERR_PTR(err);
 			if (!err) {
 				file = nameidata_to_filp(&nd, O_RDONLY);
@@ -1207,7 +1216,7 @@ int do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		free_arg_pages(bprm);
 
--- linux-2.6.22.14-72.fc6.orig/fs/fcntl.c
+++ linux-2.6.22.14-72.fc6/fs/fcntl.c
@@ -22,6 +22,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 void fastcall set_close_on_exec(unsigned int fd, int flag)
 {
@@ -213,6 +214,10 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) &&
+	    ccs_check_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
--- linux-2.6.22.14-72.fc6.orig/fs/ioctl.c
+++ linux-2.6.22.14-72.fc6/fs/ioctl.c
@@ -16,6 +16,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
+#include <linux/tomoyo.h>
 
 static long do_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
@@ -25,6 +26,8 @@ static long do_ioctl(struct file *filp, 
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -173,6 +176,8 @@ asmlinkage long sys_ioctl(unsigned int f
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.22.14-72.fc6.orig/fs/namei.c
+++ linux-2.6.22.14-72.fc6/fs/namei.c
@@ -36,6 +36,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/tomoyo.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1579,6 +1581,11 @@ int may_open(struct nameidata *nd, int a
 		if (current->fsuid != inode->i_uid && !capable(CAP_FOWNER))
 			return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_check_open_permission(dentry, nd->mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1618,6 +1625,9 @@ static int open_namei_create(struct name
 
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_check_mknod_permission(dir->d_inode, path->dentry, nd->mnt,
+					   mode, 0);
+	if (!error)
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
 	mutex_unlock(&dir->d_inode->i_mutex);
 	dput(nd->dentry);
@@ -1628,6 +1638,7 @@ static int open_namei_create(struct name
 	return may_open(nd, 0, flag & ~O_TRUNC);
 }
 
+#include <linux/tomoyo_vfs.h>
 /*
  *	open_namei()
  *
@@ -1901,6 +1912,10 @@ asmlinkage long sys_mknodat(int dfd, con
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
+		error = ccs_check_mknod_permission(nd.dentry->d_inode, dentry,
+						   nd.mnt, mode,
+						   new_decode_dev(dev));
+		if (!error)
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
@@ -1977,6 +1992,9 @@ asmlinkage long sys_mkdirat(int dfd, con
 
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_check_mkdir_permission(nd.dentry->d_inode, dentry, nd.mnt,
+					   mode);
+	if (!error)
 	error = vfs_mkdir(nd.dentry->d_inode, dentry, mode);
 	dput(dentry);
 out_unlock:
@@ -2084,6 +2102,8 @@ static long do_rmdir(int dfd, const char
 	error = PTR_ERR(dentry);
 	if (IS_ERR(dentry))
 		goto exit2;
+	error = ccs_check_rmdir_permission(nd.dentry->d_inode, dentry, nd.mnt);
+	if (!error)
 	error = vfs_rmdir(nd.dentry->d_inode, dentry);
 	dput(dentry);
 exit2:
@@ -2164,6 +2184,9 @@ static long do_unlinkat(int dfd, const c
 		inode = dentry->d_inode;
 		if (inode)
 			atomic_inc(&inode->i_count);
+		error = ccs_check_unlink_permission(nd.dentry->d_inode, dentry,
+						    nd.mnt);
+		if (!error)
 		error = vfs_unlink(nd.dentry->d_inode, dentry);
 	exit2:
 		dput(dentry);
@@ -2245,6 +2268,9 @@ asmlinkage long sys_symlinkat(const char
 	if (IS_ERR(dentry))
 		goto out_unlock;
 
+	error = ccs_check_symlink_permission(nd.dentry->d_inode, dentry,
+					     nd.mnt, from);
+	if (!error)
 	error = vfs_symlink(nd.dentry->d_inode, dentry, from, S_IALLUGO);
 	dput(dentry);
 out_unlock:
@@ -2340,6 +2366,9 @@ asmlinkage long sys_linkat(int olddfd, c
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto out_unlock;
+	error = ccs_check_link_permission(old_nd.dentry, nd.dentry->d_inode,
+					  new_dentry, nd.mnt);
+	if (!error)
 	error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
 	dput(new_dentry);
 out_unlock:
@@ -2565,6 +2594,10 @@ static int do_rename(int olddfd, const c
 	error = -ENOTEMPTY;
 	if (new_dentry == trap)
 		goto exit5;
+	error = ccs_check_rename_permission(old_dir->d_inode, old_dentry,
+					    new_dir->d_inode, new_dentry,
+					    newnd.mnt);
+	if (!error)
 
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
--- linux-2.6.22.14-72.fc6.orig/fs/namespace.c
+++ linux-2.6.22.14-72.fc6/fs/namespace.c
@@ -28,6 +28,8 @@
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
 #include "pnode.h"
+#include <linux/sakura.h>
+#include <linux/tomoyo.h>
 
 /* spinlock for vfsmount related operations, inplace of dcache_lock */
 __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfsmount_lock);
@@ -549,6 +551,9 @@ static int do_umount(struct vfsmount *mn
 	if (retval)
 		return retval;
 
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
 	 * unmounting unconditionally. Unmount only happens if:
@@ -637,6 +642,8 @@ asmlinkage long sys_umount(char __user *
 {
 	struct nameidata nd;
 	int retval;
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 
 	retval = __user_walk(name, LOOKUP_FOLLOW, &nd);
 	if (retval)
@@ -924,6 +931,9 @@ static int do_loopback(struct nameidata 
 
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto out;
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1009,6 +1019,9 @@ static int do_move_mount(struct nameidat
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
 
+	err = -EPERM;
+	if (ccs_may_umount(old_nd.mnt) || ccs_may_mount(nd))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&nd->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(nd->dentry->d_inode))
@@ -1110,6 +1123,9 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, nd)))
@@ -1401,6 +1417,13 @@ long do_mount(char *dev_name, char *dir_
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+	if (!ccs_capable(CCS_SYS_MOUNT))
+		return -EPERM;
+	retval = ccs_check_mount_permission(dev_name, dir_name, type_page,
+					    &flags);
+	if (retval)
+		return retval;
+
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
 		mnt_flags |= MNT_NOSUID;
@@ -1677,6 +1700,8 @@ asmlinkage long sys_pivot_root(const cha
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_PIVOT_ROOT))
+		return -EPERM;
 
 	lock_kernel();
 
@@ -1693,6 +1718,8 @@ asmlinkage long sys_pivot_root(const cha
 		goto out1;
 
 	error = security_sb_pivotroot(&old_nd, &new_nd);
+	if (!error)
+		error = ccs_check_pivot_root_permission(&old_nd, &new_nd);
 	if (error) {
 		path_release(&old_nd);
 		goto out1;
--- linux-2.6.22.14-72.fc6.orig/fs/open.c
+++ linux-2.6.22.14-72.fc6/fs/open.c
@@ -26,6 +26,8 @@
 #include <linux/syscalls.h>
 #include <linux/rcupdate.h>
 #include <linux/audit.h>
+#include <linux/sakura.h>
+#include <linux/tomoyo.h>
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -266,6 +268,8 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto dput_and_out;
 
+	error = ccs_check_truncate_permission(nd.dentry, nd.mnt, length, 0);
+	if (!error)
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -319,6 +323,10 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	error = ccs_check_truncate_permission(dentry, file->f_vfsmnt, length,
+					      0);
+	if (error)
+		goto out_putf;
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
@@ -483,6 +491,10 @@ asmlinkage long sys_chroot(const char __
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (!ccs_capable(CCS_SYS_CHROOT))
+		goto dput_and_out;
+	if (ccs_check_chroot_permission(&nd))
+		goto dput_and_out;
 
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
@@ -1086,6 +1098,8 @@ EXPORT_SYMBOL(sys_close);
  */
 asmlinkage long sys_vhangup(void)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		/* XXX: this needs locking */
 		tty_vhangup(current->signal->tty);
--- linux-2.6.22.14-72.fc6.orig/fs/proc/Makefile
+++ linux-2.6.22.14-72.fc6/fs/proc/Makefile
@@ -15,3 +15,6 @@ proc-$(CONFIG_PROC_KCORE)	+= kcore.o
 proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o
 proc-$(CONFIG_PROC_DEVICETREE)	+= proc_devtree.o
 proc-$(CONFIG_PRINTK)	+= kmsg.o
+
+proc-$(CONFIG_SAKURA) += ccs_proc.o
+proc-$(CONFIG_TOMOYO) += ccs_proc.o
--- linux-2.6.22.14-72.fc6.orig/fs/proc/proc_misc.c
+++ linux-2.6.22.14-72.fc6/fs/proc/proc_misc.c
@@ -737,4 +737,5 @@ void __init proc_misc_init(void)
 			entry->proc_fops = &proc_sysrq_trigger_operations;
 	}
 #endif
+	printk(KERN_INFO "Hook version: 2.6.22.14-72.fc6 2009/07/23\n");
 }
--- linux-2.6.22.14-72.fc6.orig/include/linux/init_task.h
+++ linux-2.6.22.14-72.fc6/include/linux/init_task.h
@@ -166,6 +166,8 @@ extern struct group_info init_groups;
 	},								\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	.ccs_domain_info = NULL,                 \
+	.ccs_flags = 0,                          \
 }
 
 
--- linux-2.6.22.14-72.fc6.orig/include/linux/sched.h
+++ linux-2.6.22.14-72.fc6/include/linux/sched.h
@@ -32,6 +32,8 @@
 #define CLONE_NEWUTS		0x04000000	/* New utsname group? */
 #define CLONE_NEWIPC		0x08000000	/* New ipcs */
 
+struct ccs_domain_info;
+
 /*
  * Scheduling policies
  */
@@ -1180,6 +1182,8 @@ struct task_struct {
 #ifdef CONFIG_FAULT_INJECTION
 	int make_it_fail;
 #endif
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
 };
 
 /*
--- linux-2.6.22.14-72.fc6.orig/kernel/compat.c
+++ linux-2.6.22.14-72.fc6/kernel/compat.c
@@ -25,6 +25,7 @@
 #include <linux/posix-timers.h>
 
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)
 {
@@ -869,6 +870,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.22.14-72.fc6.orig/kernel/kexec.c
+++ linux-2.6.22.14-72.fc6/kernel/kexec.c
@@ -28,6 +28,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/semaphore.h>
+#include <linux/tomoyo.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -924,6 +925,8 @@ asmlinkage long sys_kexec_load(unsigned 
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.22.14-72.fc6.orig/kernel/kmod.c
+++ linux-2.6.22.14-72.fc6/kernel/kmod.c
@@ -170,6 +170,9 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+
 	retval = -EPERM;
 	if (current->fs->root)
 		retval = kernel_execve(sub_info->path,
--- linux-2.6.22.14-72.fc6.orig/kernel/module.c
+++ linux-2.6.22.14-72.fc6/kernel/module.c
@@ -46,6 +46,7 @@
 #include <asm/cacheflush.h>
 #include <linux/license.h>
 #include "module-verify.h"
+#include <linux/tomoyo.h>
 
 extern int module_sysfs_initialized;
 
@@ -666,6 +667,8 @@ sys_delete_module(const char __user *nam
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -1996,6 +1999,8 @@ sys_init_module(void __user *umod,
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.22.14-72.fc6.orig/kernel/ptrace.c
+++ linux-2.6.22.14-72.fc6/kernel/ptrace.c
@@ -26,6 +26,7 @@
 #include <asm/tracehook.h>
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+#include <linux/tomoyo.h>
 
 #ifdef CONFIG_DEBUG_PREEMPT
 #define NO_LOCKS	WARN_ON(preempt_count() != 0)
@@ -997,6 +998,8 @@ asmlinkage long sys_ptrace(long request,
 	struct utrace_attached_engine *engine = NULL;
 	struct ptrace_state *state = NULL;
 	long ret, val;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	pr_debug("%d sys_ptrace(%ld, %ld, %lx, %lx)\n",
 		 current->pid, request, pid, addr, data);
@@ -1084,6 +1087,8 @@ asmlinkage long compat_sys_ptrace(compat
 	struct utrace_attached_engine *engine;
 	struct ptrace_state *state;
 	compat_long_t ret, val;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	pr_debug("%d compat_sys_ptrace(%d, %d, %x, %x)\n",
 		 current->pid, request, pid, addr, cdata);
--- linux-2.6.22.14-72.fc6.orig/kernel/sched.c
+++ linux-2.6.22.14-72.fc6/kernel/sched.c
@@ -63,6 +63,7 @@
 #include <linux/unistd.h>
 
 #include <asm/tlb.h>
+#include <linux/tomoyo.h>
 
 /*
  * Scheduler clock - returns current time in nanosec units.
@@ -4057,6 +4058,8 @@ int can_nice(const struct task_struct *p
 asmlinkage long sys_nice(int increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.22.14-72.fc6.orig/kernel/signal.c
+++ linux-2.6.22.14-72.fc6/kernel/signal.c
@@ -32,6 +32,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/tomoyo.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2064,6 +2065,10 @@ asmlinkage long
 sys_kill(int pid, int sig)
 {
 	struct siginfo info;
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2122,6 +2127,10 @@ asmlinkage long sys_tgkill(int tgid, int
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2135,6 +2144,10 @@ sys_tkill(int pid, int sig)
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
--- linux-2.6.22.14-72.fc6.orig/kernel/sys.c
+++ linux-2.6.22.14-72.fc6/kernel/sys.c
@@ -40,6 +40,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/tomoyo.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -663,6 +664,10 @@ asmlinkage long sys_setpriority(int whic
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -894,6 +899,8 @@ asmlinkage long sys_reboot(int magic1, i
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1869,6 +1876,8 @@ asmlinkage long sys_sethostname(char __u
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1914,6 +1923,8 @@ asmlinkage long sys_setdomainname(char _
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.22.14-72.fc6.orig/kernel/sysctl.c
+++ linux-2.6.22.14-72.fc6/kernel/sysctl.c
@@ -48,6 +48,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/tomoyo.h>
 
 extern int proc_nr_files(ctl_table *table, int write, struct file *filp,
                      void __user *buffer, size_t *lenp, loff_t *ppos);
@@ -1234,6 +1235,7 @@ struct ctl_table_header *sysctl_head_nex
 }
 
 #ifdef CONFIG_SYSCTL_SYSCALL
+
 int do_sysctl(int __user *name, int nlen, void __user *oldval, size_t __user *oldlenp,
 	       void __user *newval, size_t newlen)
 {
@@ -1250,6 +1252,9 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen, head->ctl_table);
 		if (error != -ENOTDIR) {
--- linux-2.6.22.14-72.fc6.orig/kernel/time.c
+++ linux-2.6.22.14-72.fc6/kernel/time.c
@@ -38,6 +38,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/tomoyo.h>
 
 /* 
  * The timezone where the local system is located.  Used as a default by some
@@ -90,6 +91,8 @@ asmlinkage long sys_stime(time_t __user 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
@@ -160,6 +163,8 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.22.14-72.fc6.orig/kernel/time/ntp.c
+++ linux-2.6.22.14-72.fc6/kernel/time/ntp.c
@@ -16,6 +16,7 @@
 
 #include <asm/div64.h>
 #include <asm/timex.h>
+#include <linux/tomoyo.h>
 
 /*
  * Timekeeping variables
@@ -203,6 +204,8 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.6.22.14-72.fc6.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.22.14-72.fc6/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,7 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+#include <linux/sakura.h>
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -85,6 +86,8 @@ int inet_csk_get_port(struct inet_hashin
 		do {
 			head = &hashinfo->bhash[inet_bhashfn(rover, hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->port == rover)
 					goto next;
--- linux-2.6.22.14-72.fc6.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.22.14-72.fc6/net/ipv4/inet_hashtables.c
@@ -22,6 +22,7 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+#include <linux/sakura.h>
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -292,6 +293,8 @@ int inet_hash_connect(struct inet_timewa
 		local_bh_disable();
 		for (i = 1; i <= range; i++) {
 			port = low + (i + offset) % range;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
 			spin_lock(&head->lock);
 
--- linux-2.6.22.14-72.fc6.orig/net/ipv4/raw.c
+++ linux-2.6.22.14-72.fc6/net/ipv4/raw.c
@@ -78,6 +78,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/tomoyo_socket.h>
 
 struct hlist_head raw_v4_htable[RAWV4_HTABLE_SIZE];
 DEFINE_RWLOCK(raw_v4_lock);
@@ -599,6 +600,9 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.22.14-72.fc6.orig/net/ipv4/udp.c
+++ linux-2.6.22.14-72.fc6/net/ipv4/udp.c
@@ -102,6 +102,8 @@
 #include <net/checksum.h>
 #include <net/xfrm.h>
 #include "udp_impl.h"
+#include <linux/sakura.h>
+#include <linux/tomoyo_socket.h>
 
 /*
  *	Snmp MIB for the UDP layer
@@ -162,6 +164,8 @@ int __udp_lib_get_port(struct sock *sk, 
 					result = sysctl_local_port_range[0] +
 						((result - sysctl_local_port_range[0]) &
 						 (UDP_HTABLE_SIZE - 1));
+				if (ccs_lport_reserved(result))
+					continue;
 				goto gotit;
 			}
 			size = 0;
@@ -181,6 +185,8 @@ int __udp_lib_get_port(struct sock *sk, 
 				result = sysctl_local_port_range[0]
 					+ ((result - sysctl_local_port_range[0]) &
 					   (UDP_HTABLE_SIZE - 1));
+			if (ccs_lport_reserved(result))
+				continue;
 			if (! __udp_lib_lport_inuse(result, udptable))
 				break;
 		}
@@ -832,6 +838,9 @@ try_again:
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.22.14-72.fc6.orig/net/ipv6/inet6_hashtables.c
+++ linux-2.6.22.14-72.fc6/net/ipv6/inet6_hashtables.c
@@ -21,6 +21,7 @@
 #include <net/inet_hashtables.h>
 #include <net/inet6_hashtables.h>
 #include <net/ip.h>
+#include <linux/sakura.h>
 
 void __inet6_hash(struct inet_hashinfo *hashinfo,
 				struct sock *sk)
@@ -266,6 +267,8 @@ int inet6_hash_connect(struct inet_timew
 		local_bh_disable();
 		for (i = 1; i <= range; i++) {
 			port = low + (i + offset) % range;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
 			spin_lock(&head->lock);
 
--- linux-2.6.22.14-72.fc6.orig/net/ipv6/raw.c
+++ linux-2.6.22.14-72.fc6/net/ipv6/raw.c
@@ -58,6 +58,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/tomoyo_socket.h>
 
 struct hlist_head raw_v6_htable[RAWV6_HTABLE_SIZE];
 DEFINE_RWLOCK(raw_v6_lock);
@@ -414,6 +415,9 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.22.14-72.fc6.orig/net/ipv6/udp.c
+++ linux-2.6.22.14-72.fc6/net/ipv6/udp.c
@@ -49,6 +49,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+#include <linux/tomoyo_socket.h>
 
 DEFINE_SNMP_STAT(struct udp_mib, udp_stats_in6) __read_mostly;
 
@@ -134,6 +135,9 @@ try_again:
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.22.14-72.fc6.orig/net/socket.c
+++ linux-2.6.22.14-72.fc6/net/socket.c
@@ -93,6 +93,9 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -553,6 +556,10 @@ static inline int __sock_sendmsg(struct 
 	err = security_socket_sendmsg(sock, msg, size);
 	if (err)
 		return err;
+	if (ccs_socket_sendmsg_permission(sock,
+					  (struct sockaddr *) msg->msg_name,
+					  msg->msg_namelen))
+		return -EPERM;
 
 	return sock->ops->sendmsg(iocb, sock, msg, size);
 }
@@ -1102,6 +1109,10 @@ static int __sock_create(int family, int
 		family = PF_PACKET;
 	}
 
+	err = ccs_socket_create_permission(family, type, protocol);
+	if (err)
+		return err;
+
 	err = security_socket_create(family, type, protocol, kern);
 	if (err)
 		return err;
@@ -1334,6 +1345,11 @@ asmlinkage long sys_bind(int fd, struct 
 						   (struct sockaddr *)address,
 						   addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      address, addrlen);
@@ -1363,6 +1379,8 @@ asmlinkage long sys_listen(int fd, int b
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 		fput_light(sock->file, fput_needed);
@@ -1426,6 +1444,11 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
 					  &len, 2) < 0) {
@@ -1490,6 +1513,10 @@ asmlinkage long sys_connect(int fd, stru
 	    security_socket_connect(sock, (struct sockaddr *)address, addrlen);
 	if (err)
 		goto out_put;
+	err = ccs_socket_connect_permission(sock, (struct sockaddr *) address,
+					    addrlen);
+	if (err)
+		goto out_put;
 
 	err = sock->ops->connect(sock, (struct sockaddr *)address, addrlen,
 				 sock->file->f_flags);
--- linux-2.6.22.14-72.fc6.orig/net/unix/af_unix.c
+++ linux-2.6.22.14-72.fc6/net/unix/af_unix.c
@@ -115,6 +115,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/tomoyo.h>
 
 int sysctl_unix_max_dgram_qlen __read_mostly = 10;
 
@@ -807,6 +808,9 @@ static int unix_bind(struct socket *sock
 		 */
 		mode = S_IFSOCK |
 		       (SOCK_INODE(sock)->i_mode & ~current->fs->umask);
+		err = ccs_check_mknod_permission(nd.dentry->d_inode, dentry,
+						 nd.mnt, mode, 0);
+		if (!err)
 		err = vfs_mknod(nd.dentry->d_inode, dentry, mode, 0);
 		if (err)
 			goto out_mknod_dput;
