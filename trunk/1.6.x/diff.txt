Index: ccs-tools/ccstools/ccstools.src/ccstools.h
===================================================================
--- ccs-tools/ccstools/ccstools.src/ccstools.h	(revision 2238)
+++ ccs-tools/ccstools/ccstools.src/ccstools.h	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.6.7-rc   2009/03/07
+ * Version: 1.6.7-rc   2009/03/09
  *
  */
 
@@ -117,18 +117,18 @@
 
 #define CCSTOOLS_CONFIG_FILE "/usr/lib/ccs/ccstools.conf"
 
-#define disk_policy_domain_policy    "domain_policy.conf"
-#define base_policy_domain_policy    "domain_policy.base"
-#define disk_policy_exception_policy "exception_policy.conf"
-#define base_policy_exception_policy "exception_policy.base"
-#define disk_policy_system_policy    "system_policy.conf"
-#define base_policy_system_policy    "system_policy.base"
-#define disk_policy_profile          "profile.conf"
-#define base_policy_profile          "profile.base"
-#define disk_policy_manager          "manager.conf"
-#define base_policy_manager          "manager.base"
-#define disk_policy_meminfo          "meminfo.conf"
-#define base_policy_meminfo          "meminfo.base"
+#define DISK_POLICY_DOMAIN_POLICY    "domain_policy.conf"
+#define BASE_POLICY_DOMAIN_POLICY    "domain_policy.base"
+#define DISK_POLICY_EXCEPTION_POLICY "exception_policy.conf"
+#define BASE_POLICY_EXCEPTION_POLICY "exception_policy.base"
+#define DISK_POLICY_SYSTEM_POLICY    "system_policy.conf"
+#define BASE_POLICY_SYSTEM_POLICY    "system_policy.base"
+#define DISK_POLICY_PROFILE          "profile.conf"
+#define BASE_POLICY_PROFILE          "profile.base"
+#define DISK_POLICY_MANAGER          "manager.conf"
+#define BASE_POLICY_MANAGER          "manager.base"
+#define DISK_POLICY_MEMINFO          "meminfo.conf"
+#define BASE_POLICY_MEMINFO          "meminfo.base"
 
 enum editpolicy_directives {
 	DIRECTIVE_NONE,
@@ -389,7 +389,10 @@
 int getch2(void);
 
 extern _Bool offline_mode;
+extern const char *policy_dir;
 extern _Bool network_mode;
+extern u32 network_ip;
+extern u16 network_port;
 extern int persistent_fd;
 extern int query_fd;
 extern int path_group_list_len;
Index: ccs-tools/ccstools/ccstools.src/loadpolicy.c
===================================================================
--- ccs-tools/ccstools/ccstools.src/loadpolicy.c	(revision 2238)
+++ ccs-tools/ccstools/ccstools.src/loadpolicy.c	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.6.7-rc   2009/03/07
+ * Version: 1.6.7-rc   2009/03/09
  *
  */
 #include "ccstools.h"
@@ -51,7 +51,7 @@
 	struct domain_policy dp = { NULL, 0, NULL };
 	struct domain_policy bp = { NULL, 0, NULL };
 	const char *original = argc > 1 ? argv[1] : proc_policy_domain_policy;
-	const char *base = argc > 2 ? argv[2] : base_policy_domain_policy;
+	const char *base = argc > 2 ? argv[2] : BASE_POLICY_DOMAIN_POLICY;
 	const char *diff = argc > 3 ? argv[3] : NULL;
 	if (access(original, R_OK)) {
 		fprintf(stderr, "%s not found.\n", original);
@@ -70,13 +70,15 @@
 
 static _Bool cat_file(const char *path)
 {
-	FILE *fp = fopen(path, "r");
+	FILE *fp = open_read(path);
 	if (!fp) {
 		fprintf(stderr, "Can't open %s\n", path);
 		return false;
 	}
 	while (true) {
 		int c = fgetc(fp);
+		if (network_mode && !c)
+			break;
 		if (c == EOF)
 			break;
 		putchar(c);
@@ -89,7 +91,6 @@
 {
 	struct domain_policy dp = { NULL, 0, NULL };
 	struct domain_policy bp = { NULL, 0, NULL };
-	_Bool remount_root = false;
 	char *filename;
 	_Bool write_to_stdout = false;
 	int save_profile = 0;
@@ -99,74 +100,85 @@
 	int save_domain_policy = 0;
 	_Bool force_save = false;
 	time_t now = time(NULL);
-	if (access("/proc/self/", F_OK))
-		mount("/proc", "/proc", "proc", 0, NULL);
-	if (access(proc_policy_dir, F_OK)) {
+	int i;
+	policy_dir = disk_policy_dir;
+	for (i = 1; i < argc; i++) {
+		char *ptr = argv[i];
+		char *cp = strchr(ptr, ':');
+		if (cp) {
+			*cp++ = '\0';
+			network_ip = inet_addr(ptr);
+			network_port = htons(atoi(cp));
+			network_mode = true;
+			argv[i] = "";
+		} else if (*ptr == '/') {
+			policy_dir = ptr;
+			argv[i] = "";
+		}
+        }
+	if (!network_mode && access(proc_policy_dir, F_OK)) {
 		fprintf(stderr,
 			"You can't run this program for this kernel.\n");
 		return 0;
 	}
-	if (argc == 1) {
+	for (i = 1; i < argc; i++) {
+		char *ptr = argv[i];
+		char *s = strchr(ptr, 's');
+		char *e = strchr(ptr, 'e');
+		char *d = strchr(ptr, 'd');
+		char *a = strchr(ptr, 'a');
+		char *f = strchr(ptr, 'f');
+		char *p = strchr(ptr, 'p');
+		char *m = strchr(ptr, 'm');
+		char *i = strchr(ptr, '-');
+		if (s || a)
+			save_system_policy = 1;
+		if (e || a)
+			save_exception_policy = 1;
+		if (d || a)
+			save_domain_policy = 1;
+		if (p)
+			save_profile = 1;
+		if (m)
+			save_manager = 1;
+		if (f)
+			force_save = true;
+		if (i)
+			write_to_stdout = true;
+		if (strcspn(ptr, "sedafpm-"))
+			goto usage;
+	}
+	if (write_to_stdout && save_system_policy +
+	    save_exception_policy + save_domain_policy +
+	    save_profile + save_manager != 1)
+		goto usage;
+	if (!write_to_stdout && !force_save && save_system_policy +
+	    save_exception_policy + save_domain_policy + save_profile +
+	    save_manager == 0) {
 		force_save = true;
 		save_system_policy = 1;
 		save_exception_policy = 1;
 		save_domain_policy = 1;
-	} else {
-		int i;
-		for (i = 1; i < argc; i++) {
-			char *ptr = argv[i];
-			char *s = strchr(ptr, 's');
-			char *e = strchr(ptr, 'e');
-			char *d = strchr(ptr, 'd');
-			char *a = strchr(ptr, 'a');
-			char *f = strchr(ptr, 'f');
-			char *p = strchr(ptr, 'p');
-			char *m = strchr(ptr, 'm');
-			char *i = strchr(ptr, '-');
-			if (s || a)
-				save_system_policy = 1;
-			if (e || a)
-				save_exception_policy = 1;
-			if (d || a)
-				save_domain_policy = 1;
-			if (p)
-				save_profile = 1;
-			if (m)
-				save_manager = 1;
-			if (f)
-				force_save = true;
-			if (i)
-				write_to_stdout = true;
-			if (strcspn(ptr, "sedafpm-"))
-				goto usage;
-			if (write_to_stdout && save_system_policy +
-			    save_exception_policy + save_domain_policy +
-			    save_profile + save_manager != 1)
-				goto usage;
-		}
 	}
-	if (chdir(disk_policy_dir)) {
-		printf("Directory %s doesn't exist.\n", disk_policy_dir);
+	if (!write_to_stdout && chdir(policy_dir)) {
+		printf("Directory %s doesn't exist.\n", policy_dir);
 		return 1;
 	}
-	if (access(".", W_OK) == EOF) {
-		if (errno != EROFS ||
-		    mount("/", "/", "rootfs", MS_REMOUNT, NULL) == EOF) {
-			printf("Can't remount for read-write. (%s)\n",
-			       strerror(errno));
-			return 1;
-		}
-		remount_root = true;
+
+	if (!network_mode) {
+		/* Exclude nonexistent policy. */
+		if (access(proc_policy_system_policy, R_OK))
+			save_system_policy = 0;
+		if (access(proc_policy_exception_policy, R_OK))
+			save_exception_policy = 0;
+		if (access(proc_policy_domain_policy, R_OK))
+			save_domain_policy = 0;
+		if (access(proc_policy_profile, R_OK))
+			save_profile = 0;
+		if (access(proc_policy_manager, R_OK))
+			save_manager = 0;
 	}
 
-	/* Exclude nonexistent policy. */
-	if (access(proc_policy_system_policy, R_OK))
-		save_system_policy = 0;
-	if (access(proc_policy_exception_policy, R_OK))
-		save_exception_policy = 0;
-	if (access(proc_policy_domain_policy, R_OK))
-		save_domain_policy = 0;
-
 	if (write_to_stdout) {
 		if (save_profile)
 			cat_file(proc_policy_profile);
@@ -181,16 +193,16 @@
 		goto done;
 	}
 	if (save_profile)
-		move_proc_to_file(proc_policy_profile, base_policy_profile,
-				  disk_policy_profile);
+		move_proc_to_file(proc_policy_profile, BASE_POLICY_PROFILE,
+				  DISK_POLICY_PROFILE);
 	if (save_manager)
-		move_proc_to_file(proc_policy_manager, base_policy_manager,
-				  disk_policy_manager);
+		move_proc_to_file(proc_policy_manager, BASE_POLICY_MANAGER,
+				  DISK_POLICY_MANAGER);
 
 	if (save_system_policy) {
 		filename = make_filename("system_policy", now);
 		if (move_proc_to_file(proc_policy_system_policy,
-				      base_policy_system_policy, filename)
+				      BASE_POLICY_SYSTEM_POLICY, filename)
 		    && !write_to_stdout) {
 			if (!force_save &&
 			    is_identical_file("system_policy.conf", filename)) {
@@ -205,7 +217,7 @@
 	if (save_exception_policy) {
 		filename = make_filename("exception_policy", now);
 		if (move_proc_to_file(proc_policy_exception_policy,
-				      base_policy_exception_policy, filename)
+				      BASE_POLICY_EXCEPTION_POLICY, filename)
 		    && !write_to_stdout) {
 			if (!force_save &&
 			    is_identical_file("exception_policy.conf",
@@ -222,7 +234,7 @@
 		filename = make_filename("domain_policy", now);
 		if (save_domain_policy_with_diff(&dp, &bp,
 						 proc_policy_domain_policy,
-						 base_policy_domain_policy,
+						 BASE_POLICY_DOMAIN_POLICY,
 						 filename)
 		    && !write_to_stdout) {
 			if (!force_save &&
@@ -235,11 +247,10 @@
 		}
 	}
 done:
-	if (remount_root)
-		mount("/", "/", "rootfs", MS_REMOUNT | MS_RDONLY, NULL);
 	return 0;
 usage:
-	printf("%s [s][e][d][a][f][p][m][-]\n"
+	printf("%s [s][e][d][a][f][p][m][-] [policy_dir] "
+	       "[remote_ip:remote_port]\n"
 	       "s : Save system_policy.\n"
 	       "e : Save exception_policy.\n"
 	       "d : Save domain_policy.\n"
@@ -259,12 +270,40 @@
 
 /***** loadpolicy start *****/
 
+static FILE *open_write(const char *filename)
+{
+	if (network_mode) {
+		const int fd = socket(AF_INET, SOCK_STREAM, 0);
+		struct sockaddr_in addr;
+		FILE *fp;
+		memset(&addr, 0, sizeof(addr));
+		addr.sin_family = AF_INET;
+		addr.sin_addr.s_addr = network_ip;
+		addr.sin_port = network_port;
+		if (connect(fd, (struct sockaddr *) &addr, sizeof(addr))) {
+			close(fd);
+			return NULL;
+		}
+		fp = fdopen(fd, "r+");
+		fprintf(fp, "%s", filename);
+		fputc(0, fp);
+		fflush(fp);
+		if (fgetc(fp) != 0) {
+			fclose(fp);
+			return NULL;
+		}
+		return fp;
+	} else {
+		return fopen(filename, "w+");
+	}
+}
+
 static void move_file_to_proc(const char *base, const char *src,
 			      const char *dest)
 {
 	FILE *file_fp = stdin;
 	FILE *base_fp;
-	FILE *proc_fp = fopen(dest, "w");
+	FILE *proc_fp = open_write(dest);
 	if (!proc_fp) {
 		fprintf(stderr, "Can't open %s\n", dest);
 		return;
@@ -298,24 +337,38 @@
 
 static void delete_proc_policy(const char *name)
 {
-	FILE *proc_write_fp = fopen(name, "w");
-	FILE *proc_read_fp = fopen(name, "r");
-	if (!proc_write_fp || !proc_read_fp) {
+	FILE *fp;
+	char **list = NULL;
+	int list_len = 0;
+	int i;
+	if (network_mode)
+		fp = open_read(name);
+	else
+		fp = fopen(name, "a+");
+	if (!fp) {
 		fprintf(stderr, "Can't open %s\n", name);
-		if (proc_write_fp)
-			fclose(proc_write_fp);
-		if (proc_read_fp)
-			fclose(proc_read_fp);
 		return;
 	}
 	get();
-	while (freadline(proc_read_fp)) {
-		if (shared_buffer[0])
-			fprintf(proc_write_fp, "delete %s\n", shared_buffer);
+	while (freadline(fp)) {
+		char *cp;
+		if (!shared_buffer[0])
+			continue;
+		list = realloc(list, sizeof(char *) * (list_len + 1));
+		if (!list)
+			out_of_memory();
+		cp = strdup(shared_buffer);
+		if (!cp)
+			out_of_memory();
+		list[list_len++] = cp;
 	}
 	put();
-	fclose(proc_read_fp);
-	fclose(proc_write_fp);
+	for (i = 0; i < list_len; i++) {  
+		fprintf(fp, "delete %s\n", list[i]);
+		free(list[i]);
+	}
+	free(list);
+	fclose(fp);
 }
 
 static void update_domain_policy(struct domain_policy *proc_policy,
@@ -325,17 +378,21 @@
 {
 	int base_index;
 	int proc_index;
-	FILE *proc_fp = fopen(dest, "w");
-	if (!proc_fp) {
-		fprintf(stderr, "Can't open %s\n", dest);
-		return;
-	}
+	FILE *proc_fp;
+	_Bool nm = network_mode;
 	/* Load base and diff policy to file_policy->list. */
+	network_mode = false;
 	if (!access(base, R_OK))
 		read_domain_policy(file_policy, base);
 	read_domain_policy(file_policy, src);
+	network_mode = nm;
 	/* Load proc policy to proc_policy->list. */
 	read_domain_policy(proc_policy, dest);
+	proc_fp = open_write(dest);
+	if (!proc_fp) {
+		fprintf(stderr, "Can't open %s\n", dest);
+		return;
+	}
 	for (base_index = 0; base_index < file_policy->list_len; base_index++) {
 		int i;
 		int j;
@@ -392,52 +449,62 @@
 	int load_domain_policy = 0;
 	int load_meminfo = 0;
 	_Bool refresh_policy = false;
-	if (access(proc_policy_dir, F_OK)) {
-		fprintf(stderr,
-			"You can't run this program for this kernel.\n");
-		return 0;
+	int i;
+	policy_dir = disk_policy_dir;
+	for (i = 1; i < argc; i++) {
+		char *ptr = argv[i];
+		char *cp = strchr(ptr, ':');
+		if (cp) {
+			*cp++ = '\0';
+			network_ip = inet_addr(ptr);
+			network_port = htons(atoi(cp));
+			network_mode = true;
+			argv[i] = "";
+		} else if (*ptr == '/') {
+			policy_dir = ptr;
+			argv[i] = "";
+		}
 	}
-	if (argc == 1) {
+	for (i = 1; i < argc; i++) {
+		char *ptr = argv[i];
+		char *s = strchr(ptr, 's');
+		char *e = strchr(ptr, 'e');
+		char *d = strchr(ptr, 'd');
+		char *a = strchr(ptr, 'a');
+		char *f = strchr(ptr, 'f');
+		char *p = strchr(ptr, 'p');
+		char *m = strchr(ptr, 'm');
+		char *u = strchr(ptr, 'u');
+		char *i = strchr(ptr, '-');
+		if (s || a)
+			load_system_policy = 1;
+		if (e || a)
+			load_exception_policy = 1;
+		if (d || a)
+			load_domain_policy = 1;
+		if (p)
+			load_profile = 1;
+		if (m)
+			load_manager = 1;
+		if (u)
+			load_meminfo = 1;
+		if (f)
+			refresh_policy = true;
+		if (i)
+			read_from_stdin = true;
+		if (strcspn(ptr, "sedafpmu-"))
+			goto usage;
+	}
+	if (read_from_stdin && load_system_policy +
+	    load_exception_policy + load_domain_policy +
+	    load_profile + load_manager + load_meminfo != 1)
 		goto usage;
-	} else {
-		int i;
-		for (i = 1; i < argc; i++) {
-			char *ptr = argv[i];
-			char *s = strchr(ptr, 's');
-			char *e = strchr(ptr, 'e');
-			char *d = strchr(ptr, 'd');
-			char *a = strchr(ptr, 'a');
-			char *f = strchr(ptr, 'f');
-			char *p = strchr(ptr, 'p');
-			char *m = strchr(ptr, 'm');
-			char *u = strchr(ptr, 'u');
-			char *i = strchr(ptr, '-');
-			if (s || a)
-				load_system_policy = 1;
-			if (e || a)
-				load_exception_policy = 1;
-			if (d || a)
-				load_domain_policy = 1;
-			if (p)
-				load_profile = 1;
-			if (m)
-				load_manager = 1;
-			if (u)
-				load_meminfo = 1;
-			if (f)
-				refresh_policy = true;
-			if (i)
-				read_from_stdin = true;
-			if (strcspn(ptr, "sedafpmu-"))
-				goto usage;
-			if (read_from_stdin && load_system_policy +
-			    load_exception_policy + load_domain_policy +
-			    load_profile + load_manager + load_meminfo != 1)
-				goto usage;
-		}
-	}
-	if (chdir(disk_policy_dir)) {
-		printf("Directory %s doesn't exist.\n", disk_policy_dir);
+	if (load_system_policy + load_exception_policy +
+	    load_domain_policy + load_profile + load_manager +
+	    load_meminfo == 0)
+		goto usage;
+	if (chdir(policy_dir)) {
+		printf("Directory %s doesn't exist.\n", policy_dir);
 		return 1;
 	}
 
@@ -445,8 +512,8 @@
 		if (read_from_stdin)
 			move_file_to_proc(NULL, NULL, proc_policy_profile);
 		else
-			move_file_to_proc(base_policy_profile,
-					  disk_policy_profile,
+			move_file_to_proc(BASE_POLICY_PROFILE,
+					  DISK_POLICY_PROFILE,
 					  proc_policy_profile);
 	}
 
@@ -454,8 +521,8 @@
 		if (read_from_stdin)
 			move_file_to_proc(NULL, NULL, proc_policy_manager);
 		else
-			move_file_to_proc(base_policy_manager,
-					  disk_policy_manager,
+			move_file_to_proc(BASE_POLICY_MANAGER,
+					  DISK_POLICY_MANAGER,
 					  proc_policy_manager);
 	}
 
@@ -463,8 +530,8 @@
 		if (read_from_stdin)
 			move_file_to_proc(NULL, NULL, proc_policy_meminfo);
 		else
-			move_file_to_proc(base_policy_meminfo,
-					  disk_policy_meminfo,
+			move_file_to_proc(BASE_POLICY_MEMINFO,
+					  DISK_POLICY_MEMINFO,
 					  proc_policy_meminfo);
 	}
 
@@ -475,8 +542,8 @@
 			move_file_to_proc(NULL, NULL,
 					  proc_policy_system_policy);
 		else
-			move_file_to_proc(base_policy_system_policy,
-					  disk_policy_system_policy,
+			move_file_to_proc(BASE_POLICY_SYSTEM_POLICY,
+					  DISK_POLICY_SYSTEM_POLICY,
 					  proc_policy_system_policy);
 	}
 
@@ -487,8 +554,8 @@
 			move_file_to_proc(NULL, NULL,
 					  proc_policy_exception_policy);
 		else
-			move_file_to_proc(base_policy_exception_policy,
-					  disk_policy_exception_policy,
+			move_file_to_proc(BASE_POLICY_EXCEPTION_POLICY,
+					  DISK_POLICY_EXCEPTION_POLICY,
 					  proc_policy_exception_policy);
 	}
 
@@ -500,22 +567,23 @@
 						     proc_policy_domain_policy);
 			else
 				update_domain_policy(&proc_policy, &file_policy,
-						     base_policy_domain_policy,
-						     disk_policy_domain_policy,
+						     BASE_POLICY_DOMAIN_POLICY,
+						     DISK_POLICY_DOMAIN_POLICY,
 						     proc_policy_domain_policy);
 		} else {
 			if (read_from_stdin)
 				move_file_to_proc(NULL, NULL,
 						  proc_policy_domain_policy);
 			else
-				move_file_to_proc(base_policy_domain_policy,
-						  disk_policy_domain_policy,
+				move_file_to_proc(BASE_POLICY_DOMAIN_POLICY,
+						  DISK_POLICY_DOMAIN_POLICY,
 						  proc_policy_domain_policy);
 		}
 	}
 	return 0;
 usage:
-	printf("%s [s][e][d][a][f][p][m][u][-]\n"
+	printf("%s [s][e][d][a][f][p][m][u][-] [policy_dir] "
+	       "[remote_ip:remote_port]\n"
 	       "s : Load system_policy.\n"
 	       "e : Load exception_policy.\n"
 	       "d : Load domain_policy.\n"
@@ -526,7 +594,8 @@
 	       "- : Read policy from stdin. "
 	       "(Only one of 'sedpmu' is possible when using '-'.)\n"
 	       "f : Delete on-memory policy before loading on-disk policy. "
-	       "(Valid for 'sed'.)\n\n", argv[0]);
+	       "(Valid for 'sed'.)\n\n",
+	       argv[0]);
 	return 0;
 }
 
Index: ccs-tools/ccstools/ccstools.src/editpolicy.c
===================================================================
--- ccs-tools/ccstools/ccstools.src/editpolicy.c	(revision 2238)
+++ ccs-tools/ccstools/ccstools.src/editpolicy.c	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.6.7-rc   2009/03/07
+ * Version: 1.6.7-rc   2009/03/09
  *
  */
 #include "ccstools.h"
@@ -590,9 +590,10 @@
 static _Bool need_reload = false;
 
 _Bool offline_mode = false;
+const char *policy_dir = NULL;
 _Bool network_mode = false;
-static u32 network_ip = INADDR_NONE;
-static u16 network_port = 0;
+u32 network_ip = INADDR_NONE;
+u16 network_port = 0;
 
 struct path_group_entry *path_group_list = NULL;
 int path_group_list_len = 0;
@@ -790,29 +791,11 @@
 FILE *open_read(const char *filename)
 {
 	if (network_mode) {
-		const int fd = socket(AF_INET, SOCK_STREAM, 0);
-		struct sockaddr_in addr;
-		FILE *fp;
-		memset(&addr, 0, sizeof(addr));
-		addr.sin_family = AF_INET;
-		addr.sin_addr.s_addr = network_ip;
-		addr.sin_port = network_port;
-		if (connect(fd, (struct sockaddr *) &addr, sizeof(addr))) {
-			close(fd);
-			set_error(filename);
-			return NULL;
+		FILE *fp = open_write(filename);
+		if (fp) {
+			fputc(0, fp);
+			fflush(fp);
 		}
-		fp = fdopen(fd, "r+");
-		fprintf(fp, "%s", filename);
-		fputc(0, fp);
-		fflush(fp);
-		if (fgetc(fp) != 0) {
-			fclose(fp);
-			set_error(filename);
-			return NULL;
-		}
-		fputc(0, fp);
-		fflush(fp);
 		return fp;
 	} else if (offline_mode) {
 		char request[1024];
@@ -2260,7 +2243,6 @@
 
 int editpolicy_main(int argc, char *argv[])
 {
-	static char *policy_dir = NULL;
 	struct domain_policy dp = { NULL, 0, NULL };
 	struct domain_policy bp = { NULL, 0, NULL };
 	memset(current_y, 0, sizeof(current_y));
@@ -2270,36 +2252,37 @@
 	if (argc > 1) {
 		int i;
 		for (i = 1; i < argc; i++) {
-			if (!strcmp(argv[i], "s"))
+			char *ptr = argv[i];
+			char *cp = strchr(ptr, ':');
+			if (cp) {
+				*cp++ = '\0';
+				network_ip = inet_addr(ptr);
+				network_port = htons(atoi(cp));
+				network_mode = true;
+			} else if (*ptr == '/') {
+				policy_dir = ptr;
+				offline_mode = true;
+			} else if (!strcmp(ptr, "s"))
 				current_screen = SCREEN_SYSTEM_LIST;
-			else if (!strcmp(argv[i], "e"))
+			else if (!strcmp(ptr, "e"))
 				current_screen = SCREEN_EXCEPTION_LIST;
-			else if (!strcmp(argv[i], "d"))
+			else if (!strcmp(ptr, "d"))
 				current_screen = SCREEN_DOMAIN_LIST;
-			else if (!strcmp(argv[i], "p"))
+			else if (!strcmp(ptr, "p"))
 				current_screen = SCREEN_PROFILE_LIST;
-			else if (!strcmp(argv[i], "m"))
+			else if (!strcmp(ptr, "m"))
 				current_screen = SCREEN_MANAGER_LIST;
-			else if (!strcmp(argv[i], "q"))
+			else if (!strcmp(ptr, "q"))
 				current_screen = SCREEN_MEMINFO_LIST;
-			else if (!strcmp(argv[i], "readonly"))
+			else if (!strcmp(ptr, "readonly"))
 				readonly_mode = true;
-			else if (sscanf(argv[i], "refresh=%u",
-					&refresh_interval) == 1) {
+			else if (sscanf(ptr, "refresh=%u", &refresh_interval)
+				 == 1) {
 				/* */
-			} else if (strchr(argv[i], ':')) {
-				char *cp = strchr(argv[i], ':');
-				*cp = '\0';
-				network_ip = inet_addr(argv[i]);
-				network_port = htons(atoi(cp + 1));
-				network_mode = true;
-			} else if (argv[i][0] == '/') {
-				policy_dir = argv[i];
-				offline_mode = true;
 			} else {
 				printf("Usage: %s [s|e|d|p|m|u] [readonly] "
 				       "[refresh=interval] "
-				       "[{policy_dir|remote_ip:remote_port}]\n",
+				       "[policy_dir] [remote_ip:remote_port]\n",
 				       argv[0]);
 				return 1;
 			}
@@ -2345,7 +2328,7 @@
 		close(fd[1]);
 		persistent_fd = fd[0];
 		{
-			int fd = open2(base_policy_system_policy, O_RDONLY);
+			int fd = open2(BASE_POLICY_SYSTEM_POLICY, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp =
 					open_write(proc_policy_system_policy);
@@ -2355,7 +2338,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(disk_policy_system_policy, O_RDONLY);
+			fd = open2(DISK_POLICY_SYSTEM_POLICY, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp =
 					open_write(proc_policy_system_policy);
@@ -2365,7 +2348,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(base_policy_exception_policy, O_RDONLY);
+			fd = open2(BASE_POLICY_EXCEPTION_POLICY, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp =
 				open_write(proc_policy_exception_policy);
@@ -2375,7 +2358,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(disk_policy_exception_policy, O_RDONLY);
+			fd = open2(DISK_POLICY_EXCEPTION_POLICY, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp =
 				open_write(proc_policy_exception_policy);
@@ -2385,7 +2368,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(base_policy_domain_policy, O_RDONLY);
+			fd = open2(BASE_POLICY_DOMAIN_POLICY, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp =
 					open_write(proc_policy_domain_policy);
@@ -2395,7 +2378,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(disk_policy_domain_policy, O_RDONLY);
+			fd = open2(DISK_POLICY_DOMAIN_POLICY, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp =
 					open_write(proc_policy_domain_policy);
@@ -2405,7 +2388,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(base_policy_profile, O_RDONLY);
+			fd = open2(BASE_POLICY_PROFILE, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp = open_write(proc_policy_profile);
 				if (fp) {
@@ -2414,7 +2397,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(disk_policy_profile, O_RDONLY);
+			fd = open2(DISK_POLICY_PROFILE, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp = open_write(proc_policy_profile);
 				if (fp) {
@@ -2423,7 +2406,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(base_policy_manager, O_RDONLY);
+			fd = open2(BASE_POLICY_MANAGER, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp = open_write(proc_policy_manager);
 				if (fp) {
@@ -2432,7 +2415,7 @@
 				}
 				close(fd);
 			}
-			fd = open2(disk_policy_manager, O_RDONLY);
+			fd = open2(DISK_POLICY_MANAGER, O_RDONLY);
 			if (fd != EOF) {
 				FILE *fp = open_write(proc_policy_manager);
 				if (fp) {
@@ -2509,7 +2492,7 @@
 		time_t now = time(NULL);
 		char *filename = make_filename("system_policy", now);
 		if (move_proc_to_file(proc_policy_system_policy,
-				      base_policy_system_policy, filename)) {
+				      BASE_POLICY_SYSTEM_POLICY, filename)) {
 			if (is_identical_file("system_policy.conf", filename)) {
 				unlink(filename);
 			} else {
@@ -2519,7 +2502,7 @@
 		}
 		filename = make_filename("exception_policy", now);
 		if (move_proc_to_file(proc_policy_exception_policy,
-				      base_policy_exception_policy, filename)) {
+				      BASE_POLICY_EXCEPTION_POLICY, filename)) {
 			if (is_identical_file("exception_policy.conf",
 					      filename)) {
 				unlink(filename);
@@ -2532,7 +2515,7 @@
 		filename = make_filename("domain_policy", now);
 		if (save_domain_policy_with_diff(&dp, &bp,
 						 proc_policy_domain_policy,
-						 base_policy_domain_policy,
+						 BASE_POLICY_DOMAIN_POLICY,
 						 filename)) {
 			if (is_identical_file("domain_policy.conf", filename)) {
 				unlink(filename);
@@ -2542,7 +2525,7 @@
 			}
 		}
 		filename = make_filename("profile", now);
-		if (move_proc_to_file(proc_policy_profile, base_policy_profile,
+		if (move_proc_to_file(proc_policy_profile, BASE_POLICY_PROFILE,
 				      filename)) {
 			if (is_identical_file("profile.conf", filename)) {
 				unlink(filename);
@@ -2552,7 +2535,7 @@
 			}
 		}
 		filename = make_filename("manager", now);
-		if (move_proc_to_file(proc_policy_manager, base_policy_manager,
+		if (move_proc_to_file(proc_policy_manager, BASE_POLICY_MANAGER,
 				      filename)) {
 			if (is_identical_file("manager.conf", filename)) {
 				unlink(filename);
Index: ccs-tools/ccstools/ccstools.src/ccstools.c
===================================================================
--- ccs-tools/ccstools/ccstools.src/ccstools.c	(revision 2238)
+++ ccs-tools/ccstools/ccstools.src/ccstools.c	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.6.7-rc   2009/03/07
+ * Version: 1.6.7-rc   2009/03/09
  *
  */
 #include "ccstools.h"
Index: ccs-tools/ccstools/man/ccs-savepolicy
===================================================================
--- ccs-tools/ccstools/man/ccs-savepolicy	(revision 2238)
+++ ccs-tools/ccstools/man/ccs-savepolicy	(working copy)
@@ -13,7 +13,7 @@
 elif [ "$1" = "--help" ]
 then
 cat << EOF
-Usage: ccs-savepolicy [-][s][e][d][a][f][p][m]
+Usage: ccs-savepolicy [-][s][e][d][a][f][p][m] [policy_dir] [remote_ip:remote_port]
 
 This program saves TOMOYO Linux's policy from kernel into files.
 
@@ -33,6 +33,10 @@
 
  f     Forcefully save even if the on-memory policy and the on-disk policy are identical.
 
+ policy_dir     Save policy files into specified directory. (Default directory is /etc/ccs/ .)
+
+ remote_ip:remote_port     Receive policy from agent listening at specified IP address and port number. 
+
 Examples:
 
 # ccs-savepolicy
@@ -41,12 +45,16 @@
 # ccs-savepolicy e
  Save exception policy.
 
+# ccs-savepolicy 192.168.1.1:10000
+ Receive policy from 192.168.11.1:10000 and save as local files.
+
 EOF
 else
 cat << EOF | help2man -i - -N -s 8 -n "Save TOMOYO Linux's policy" $0 | gzip -9 > man8/ccs-savepolicy.8.gz
 [SEE ALSO]
 
  ccs-loadpolicy (8)
+ ccs-editpolicy-agent (8)
 
 [NOTES]
 
Index: ccs-tools/ccstools/man/ccs-loadpolicy
===================================================================
--- ccs-tools/ccstools/man/ccs-loadpolicy	(revision 2238)
+++ ccs-tools/ccstools/man/ccs-loadpolicy	(working copy)
@@ -13,7 +13,7 @@
 elif [ "$1" = "--help" ]
 then
 cat << EOF
-Usage: ccs-loadpolicy [-][s][e][d][a][f][p][m][u]
+Usage: ccs-loadpolicy [-][s][e][d][a][f][p][m][u] [policy_dir] [remote_ip:remote_port]
 
 This program loads TOMOYO Linux's policy from files or standard input into kernel.
 
@@ -36,6 +36,10 @@
  f     Erase on-memory policy before loading on-disk policy. If not specified, on-disk policy is appended to on-memory policy.
        This option is valid for "seda" options.
 
+ policy_dir     Load policy files from specified directory. (Default directory is /etc/ccs/ .)
+
+ remote_ip:remote_port     Send policy to agent listening at specified IP address and port number. 
+
 Examples:
 
 # echo "allow_read /proc/meminfo" | ccs-loadpolicy -e
@@ -53,12 +57,16 @@
 # ccs-loadpolicy d
  Append /etc/ccs/domain_policy.base + /etc/ccs/domain_policy.conf into currently loaded domain policy.
 
+# ccs-loadpolicy d 192.168.1.1:10000
+ Append /etc/ccs/domain_policy.base + /etc/ccs/domain_policy.conf to 192.168.11.1:10000 .
+
 EOF
 else
 cat << EOF | help2man -i - -N -s 8 -n "Load TOMOYO Linux's policy manually" $0 | gzip -9 > man8/ccs-loadpolicy.8.gz
 [SEE ALSO]
 
  ccs-init (8)
+ ccs-editpolicy-agent (8)
 
 [NOTES]
 
Index: ccs-tools/ccstools/man/ccs-editpolicy
===================================================================
--- ccs-tools/ccstools/man/ccs-editpolicy	(revision 2238)
+++ ccs-tools/ccstools/man/ccs-editpolicy	(working copy)
@@ -13,7 +13,7 @@
 elif [ "$1" = "--help" ]
 then
 cat << EOF
-Usage: ccs-editpolicy [{s|e|d|p|m|u}] [readonly] [refresh=interval] [{policy_dir|remote_ip:remote_port}]
+Usage: ccs-editpolicy [{s|e|d|p|m|u}] [readonly] [refresh=interval] [policy_dir] [remote_ip:remote_port]
 
 This program edits TOMOYO Linux's policy currently loaded in the kernel.
 
@@ -56,7 +56,7 @@
 [SEE ALSO]
 
  ccs-loadpolicy (8)
- ccs-catd (8)
+ ccs-editpolicy-agent (8)
 
 [NOTES]
 
