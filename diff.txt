Index: trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.h
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.h	(revision 1482)
+++ trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.h	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2008  NTT DATA CORPORATION
  *
- * Version: 1.6.2   2008/06/25
+ * Version: 1.6.4-pre   2008/08/26
  *
  */
 
@@ -245,14 +245,19 @@
 	*disk_policy_dir,
 	*proc_policy_domain_policy,
 	*disk_policy_domain_policy,
+	*disk_policy_base_domain_policy,
 	*proc_policy_exception_policy,
 	*disk_policy_exception_policy,
+	*disk_policy_base_exception_policy,
 	*proc_policy_system_policy,
 	*disk_policy_system_policy,
+	*disk_policy_base_system_policy,
 	*proc_policy_profile,
 	*disk_policy_profile,
+	*disk_policy_base_profile,
 	*proc_policy_manager,
 	*disk_policy_manager,
+	*disk_policy_base_manager,
 	*proc_policy_query,
 	*proc_policy_grant_log,
 	*proc_policy_reject_log,
Index: trunk/1.6.x/ccs-tools/ccstools/ccstools.src/editpolicy.c
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/ccstools.src/editpolicy.c	(revision 1482)
+++ trunk/1.6.x/ccs-tools/ccstools/ccstools.src/editpolicy.c	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2008  NTT DATA CORPORATION
  *
- * Version: 1.6.0   2008/04/01
+ * Version: 1.6.4-pre   2008/08/26
  *
  */
 #include "ccstools.h"
@@ -336,35 +336,187 @@
 
 /***** sortpolicy end *****/
 
+/***** diffpolicy start *****/
+
+static int FindDomainByPtr(const struct path_info *domainname) {
+	int i;
+	for (i = 0; i < domain_list_count; i++) {
+		if (domain_list[i].domainname == domainname) return i;
+	}
+	return EOF;
+}
+
+static int SaveDomainPolicyWithDiff(const char *proc, const char *base, const char *diff) {
+	const struct path_info **proc_string_ptr, **base_string_ptr;
+	int proc_string_count, base_string_count;
+	int proc_index, base_index;
+	const struct path_info *domainname;
+	int i, j;
+	FILE *diff_fp;
+	if (diff) diff_fp = fopen(diff, "w");
+	else diff_fp = stdout;
+	if (!diff_fp) {
+		fprintf(stderr, "Can't open %s\n", diff);
+		return 0;
+	}
+	ReadDomainPolicy(proc);
+	SwapDomainList();
+	ReadDomainPolicy(base);
+	SwapDomainList();
+
+	SwapDomainList();
+	for (base_index = 0; base_index < domain_list_count; base_index++) {
+		domainname = domain_list[base_index].domainname;
+		SwapDomainList();
+		proc_index = FindDomainByPtr(domainname);
+		SwapDomainList();
+		if (proc_index >= 0) continue;
+		/* This domain was deleted by diff policy. */
+		fprintf(diff_fp, "delete %s\n\n", domainname->name);
+	}
+	SwapDomainList();
+
+	for (proc_index = 0; proc_index < domain_list_count; proc_index++) {
+		domainname = domain_list[proc_index].domainname;
+		SwapDomainList();
+		base_index = FindDomainByPtr(domainname);
+		SwapDomainList();
+		if (base_index >= 0) continue;
+		/* This domain was added by diff policy. */
+		fprintf(diff_fp, "%s\n\n", domainname->name);
+		proc_string_ptr = domain_list[proc_index].string_ptr;
+		proc_string_count = domain_list[proc_index].string_count;
+		for (i = 0; i < proc_string_count; i++) {
+			fprintf(diff_fp, "%s\n", proc_string_ptr[i]->name);
+		}
+		fprintf(diff_fp, "\n");
+	}
+
+	for (proc_index = 0; proc_index < domain_list_count; proc_index++) {
+		int first = 1;
+		domainname = domain_list[proc_index].domainname;
+		SwapDomainList();
+		base_index = FindDomainByPtr(domainname);
+		SwapDomainList();
+		if (base_index == EOF) continue;
+		/* This domain exists in both base policy and proc policy. */
+		proc_string_ptr = domain_list[proc_index].string_ptr;
+		proc_string_count = domain_list[proc_index].string_count;
+		base_string_ptr = shadow_domain_list[base_index].string_ptr;
+		base_string_count = shadow_domain_list[base_index].string_count;
+		for (i = 0; i < proc_string_count; i++) {
+			for (j = 0; j < base_string_count; j++) {
+				if (proc_string_ptr[i] != base_string_ptr[j]) continue;
+				proc_string_ptr[i] = NULL;
+				base_string_ptr[j] = NULL;
+			}
+		}
+
+		for (i = 0; i < base_string_count; i++) {
+			if (!base_string_ptr[i]) continue;
+			if (first) fprintf(diff_fp, "%s\n\n", domainname->name);
+			first = 0;
+			fprintf(diff_fp, "delete %s\n", base_string_ptr[i]->name);
+		}
+		for (i = 0; i < proc_string_count; i++) {
+			if (!proc_string_ptr[i]) continue;
+			if (first) fprintf(diff_fp, "%s\n\n", domainname->name);
+			first = 0;
+			fprintf(diff_fp, "%s\n", proc_string_ptr[i]->name);
+		}
+		if (!first) fprintf(diff_fp, "\n");
+	}
+	
+	if (diff_fp != stdout) fclose(diff_fp);
+	return 1;
+}
+
+int diffpolicy_main(int argc, char *argv[]) {
+	const char *original = argc > 1 ? argv[1] : proc_policy_domain_policy;
+	const char *base = argc > 2 ? argv[2] : disk_policy_base_domain_policy;
+	const char *diff = argc > 3 ? argv[3] : NULL;
+	if (access(original, R_OK)) {
+		fprintf(stderr, "%s not found.\n", original);
+		return 1;
+	}
+	if (base == argv[2] && access(base, R_OK)) {
+		fprintf(stderr, "%s not found.\n", base);
+		return 1;
+	}
+	return !SaveDomainPolicyWithDiff(original, base, diff);
+}
+
+/***** diffpolicy end *****/
+
 /***** savepolicy start *****/
 
-static int MoveProcToFile(const char *src, const char *dest) {
-	FILE *proc_fp, *file_fp;
-	int first = 1;
-	int is_domain_policy = 0;
-	if ((proc_fp = fopen(src, "r")) == NULL) {
-		fprintf(stderr, "Can't open %s\n", src);
+static int CatFile(const char *path) {
+	FILE *fp = fopen(path, "r");
+	int c;
+	if (!fp) {
+		fprintf(stderr, "Can't open %s\n", path);
 		return 0;
 	}
-	if ((file_fp = dest ? fopen(dest, "w") : stdout) == NULL) {
-		fprintf(stderr, "Can't open %s\n", dest);
-		fclose(proc_fp);
+	while ((c = fgetc(fp)) != EOF) putchar(c);
+	fclose(fp);
+	return 1;
+}
+
+static int MoveProcToFile(const char *original, const char *base, const char *diff) {
+	FILE *original_fp, *base_fp, *diff_fp;
+	char **original_list = NULL, **base_list = NULL;
+	int original_list_len = 0, base_list_len = 0;
+	int i;
+	if ((original_fp = fopen(original, "r")) == NULL) {
+		fprintf(stderr, "Can't open %s\n", original);
 		return 0;
 	}
+	if ((diff_fp = fopen(diff, "w")) == NULL) {
+		fprintf(stderr, "Can't open %s\n", diff);
+		fclose(original_fp);
+		return 0;
+	}
 	get();
-	while (freadline(proc_fp)) {
-		if (first) {
-			first = 0;
-			if (strncmp(shared_buffer, "<kernel>", 8) == 0) is_domain_policy = 1;
-		} else if (is_domain_policy && strncmp(shared_buffer, "<kernel>", 8) == 0) {
-			fprintf(file_fp, "\n");
+	base_fp = fopen(base, "r");
+	if (base_fp) {
+		while (freadline(base_fp)) {
+			if (!shared_buffer[0]) continue;
+			if ((base_list = (char **) realloc(base_list, sizeof(char *) * (base_list_len + 1))) == NULL ||
+			    (base_list[base_list_len++] = strdup(shared_buffer)) == NULL) OutOfMemory();
 		}
-		if (shared_buffer[0]) fprintf(file_fp, "%s\n", shared_buffer);
-		if (is_domain_policy && strncmp(shared_buffer, "use_profile ", 12) == 0) fprintf(file_fp, "\n");
+		fclose(base_fp);
 	}
+	while (freadline(original_fp)) {
+		if (!shared_buffer[0]) continue;
+		if ((original_list = (char **) realloc(original_list, sizeof(char *) * (original_list_len + 1))) == NULL ||
+		    (original_list[original_list_len++] = strdup(shared_buffer)) == NULL) OutOfMemory();
+	}
 	put();
-	fclose(proc_fp);
-	if (file_fp != stdout) fclose(file_fp);
+	fclose(original_fp);
+	
+	for (i = 0; i < original_list_len; i++) {
+		int j;
+		for (j = 0; j < base_list_len; j++) {
+			if (!original_list[i] || !base_list[j] || strcmp(original_list[i], base_list[j])) continue;
+			free(original_list[i]);
+			original_list[i]= NULL;
+			free(base_list[j]);
+			base_list[j]= NULL;
+			break;
+		}
+	}
+	for (i = 0; i < base_list_len; i++) {
+		if (base_list[i]) fprintf(diff_fp, "delete %s\n", base_list[i]);
+	}
+	for (i = 0; i < original_list_len; i++) {
+		if (original_list[i]) fprintf(diff_fp, "%s\n", original_list[i]);
+	}
+
+	fclose(diff_fp);
+	while (original_list_len) free(original_list[--original_list_len]);
+	free(original_list);
+	while (base_list_len) free(base_list[--base_list_len]);
+	free(base_list);
 	return 1;
 }
 
@@ -461,43 +613,48 @@
 	if (access(proc_policy_system_policy, R_OK)) save_system_policy = 0;
 	if (access(proc_policy_exception_policy, R_OK)) save_exception_policy = 0;
 	if (access(proc_policy_domain_policy, R_OK)) save_domain_policy = 0;
-	
-	if (save_profile) MoveProcToFile(proc_policy_profile, write_to_stdout ? NULL : disk_policy_profile);
-	
-	if (save_manager) MoveProcToFile(proc_policy_manager, write_to_stdout ? NULL : disk_policy_manager);
-	
-	if (save_system_policy) {
-		snprintf(filename, sizeof(filename) - 1, "system_policy.%02d-%02d-%02d.%02d:%02d:%02d.conf", tm->tm_year % 100, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
-		if (MoveProcToFile(proc_policy_system_policy, write_to_stdout ? NULL : filename) && !write_to_stdout) {
-			if (!force_save && IsIdenticalFile("system_policy.conf", filename)) {
-				unlink(filename);
-			} else {
-				unlink("system_policy.conf");
-				symlink(filename, "system_policy.conf");
+
+	if (write_to_stdout) {
+		if (save_profile) CatFile(proc_policy_profile);
+		else if (save_manager) CatFile(proc_policy_manager);
+		else if (save_system_policy) CatFile(proc_policy_system_policy);
+		else if (save_exception_policy) CatFile(proc_policy_exception_policy);
+		else if (save_domain_policy) CatFile(proc_policy_domain_policy);
+	} else {
+		
+		if (save_profile) MoveProcToFile(proc_policy_profile, disk_policy_base_profile, disk_policy_profile);
+		if (save_manager) MoveProcToFile(proc_policy_manager, disk_policy_base_manager, disk_policy_manager);
+		if (save_system_policy) {
+			snprintf(filename, sizeof(filename) - 1, "system_policy.%02d-%02d-%02d.%02d:%02d:%02d.conf", tm->tm_year % 100, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+			if (MoveProcToFile(proc_policy_system_policy, disk_policy_base_system_policy, filename)) {
+				if (!force_save && IsIdenticalFile("system_policy.conf", filename)) {
+					unlink(filename);
+				} else {
+					unlink("system_policy.conf");
+					symlink(filename, "system_policy.conf");
+				}
 			}
 		}
-	}
-	
-	if (save_exception_policy) {
-		snprintf(filename, sizeof(filename) - 1, "exception_policy.%02d-%02d-%02d.%02d:%02d:%02d.conf", tm->tm_year % 100, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
-		if (MoveProcToFile(proc_policy_exception_policy, write_to_stdout ? NULL : filename) && !write_to_stdout) {
-			if (!force_save && IsIdenticalFile("exception_policy.conf", filename)) {
-				unlink(filename);
-			} else {
-				unlink("exception_policy.conf");
-				symlink(filename, "exception_policy.conf");
+		if (save_exception_policy) {
+			snprintf(filename, sizeof(filename) - 1, "exception_policy.%02d-%02d-%02d.%02d:%02d:%02d.conf", tm->tm_year % 100, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+			if (MoveProcToFile(proc_policy_exception_policy, disk_policy_base_exception_policy, filename)) {
+				if (!force_save && IsIdenticalFile("exception_policy.conf", filename)) {
+					unlink(filename);
+				} else {
+					unlink("exception_policy.conf");
+					symlink(filename, "exception_policy.conf");
+				}
 			}
 		}
-	}
-	
-	if (save_domain_policy) {
-		snprintf(filename, sizeof(filename) - 1, "domain_policy.%02d-%02d-%02d.%02d:%02d:%02d.conf", tm->tm_year % 100, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
-		if (MoveProcToFile(proc_policy_domain_policy, write_to_stdout ? NULL : filename) && !write_to_stdout) {
-			if (!force_save && IsIdenticalFile("domain_policy.conf", filename)) {
-				unlink(filename);
-			} else {
-				unlink("domain_policy.conf");
-				symlink(filename, "domain_policy.conf");
+		if (save_domain_policy) {
+			snprintf(filename, sizeof(filename) - 1, "domain_policy.%02d-%02d-%02d.%02d:%02d:%02d.conf", tm->tm_year % 100, tm->tm_mon + 1, tm->tm_mday, tm->tm_hour, tm->tm_min, tm->tm_sec);
+			if (SaveDomainPolicyWithDiff(proc_policy_domain_policy, disk_policy_base_domain_policy, filename)) {
+				if (!force_save && IsIdenticalFile("domain_policy.conf", filename)) {
+					unlink(filename);
+				} else {
+					unlink("domain_policy.conf");
+					symlink(filename, "domain_policy.conf");
+				}
 			}
 		}
 	}
@@ -510,24 +667,31 @@
 
 /***** loadpolicy start *****/
 
-static void MoveFileToProc(const char *src, const char *dest) {
-	FILE *file_fp, *proc_fp;
-	if ((proc_fp = fopen(dest, "w")) == NULL) {
-		fprintf(stderr, "Can't open %s\n", dest);
+static void MoveFileToProc(const char *base, const char *diff, const char *original) {
+	FILE *base_fp, *diff_fp, *original_fp;
+	if ((original_fp = fopen(original, "w")) == NULL) {
+		fprintf(stderr, "Can't open %s\n", original);
 		return;
 	}
-	if ((file_fp = src ? fopen(src, "r") : stdin) == NULL) {
-		fprintf(stderr, "Can't open %s\n", src);
-		fclose(proc_fp);
+	if ((diff_fp = diff ? fopen(diff, "r") : stdin) == NULL) {
+		fprintf(stderr, "Can't open %s\n", diff);
+		fclose(original_fp);
 		return;
 	}
+	base_fp = fopen(base, "r");
 	get();
-	while (freadline(file_fp)) {
-		if (shared_buffer[0]) fprintf(proc_fp, "%s\n", shared_buffer);
+	if (base_fp) {
+		while (freadline(base_fp)) {
+			if (shared_buffer[0]) fprintf(original_fp, "%s\n", shared_buffer);
+		}
 	}
+	while (freadline(diff_fp)) {
+		if (shared_buffer[0]) fprintf(original_fp, "%s\n", shared_buffer);
+	}
 	put();
-	fclose(proc_fp);
-	if (file_fp != stdin) fclose(file_fp);
+	fclose(original_fp);
+	if (base_fp) fclose(base_fp);
+	if (diff_fp != stdin) fclose(diff_fp);
 }
 
 static void DeleteProcPolicy(const char *name) {
@@ -548,7 +712,7 @@
 	fclose(proc_write_fp);
 }
 
-static void LoadDomainPolicy(const char *src, const char *dest) {
+static void LoadDomainPolicy(const char *src, const char *base, const char *dest) {
 	int new_index;
 	int old_index;
 	struct path_info reserved;
@@ -559,6 +723,7 @@
 	}
 	reserved.name = "";
 	fill_path_info(&reserved);
+	ReadDomainPolicy(base);
 	ReadDomainPolicy(src);
 	SwapDomainList();
 	ReadDomainPolicy(dest);
@@ -648,25 +813,35 @@
 		return 1;
 	}
 
-	if (load_profile) MoveFileToProc(read_from_stdin ? NULL : disk_policy_profile, proc_policy_profile);
+	if (load_profile) {
+		if (read_from_stdin) MoveFileToProc(NULL, NULL, proc_policy_profile);
+		else MoveFileToProc(disk_policy_base_profile, disk_policy_profile, proc_policy_profile);
+	}
+
+	if (load_manager) {
+		if (read_from_stdin) MoveFileToProc(NULL, NULL, proc_policy_manager);
+		else MoveFileToProc(disk_policy_base_manager, disk_policy_manager, proc_policy_manager);
+	}
 	
-	if (load_manager) MoveFileToProc(read_from_stdin ? NULL : disk_policy_manager, proc_policy_manager);
-	
 	if (load_system_policy) {
 		if (refresh_policy) DeleteProcPolicy(proc_policy_system_policy);
-		MoveFileToProc(read_from_stdin ? NULL : disk_policy_system_policy, proc_policy_system_policy);
+		if (read_from_stdin) MoveFileToProc(NULL, NULL, proc_policy_system_policy);
+		else MoveFileToProc(disk_policy_base_system_policy, disk_policy_system_policy, proc_policy_system_policy);
 	}
 	
 	if (load_exception_policy) {
 		if (refresh_policy) DeleteProcPolicy(proc_policy_exception_policy);
-		MoveFileToProc(read_from_stdin ? NULL : disk_policy_exception_policy, proc_policy_exception_policy);
+		if (read_from_stdin) MoveFileToProc(NULL, NULL, proc_policy_exception_policy);
+		else MoveFileToProc(disk_policy_base_exception_policy, disk_policy_exception_policy, proc_policy_exception_policy);
 	}
 
 	if (load_domain_policy) {
 		if (refresh_policy) {
-			LoadDomainPolicy(read_from_stdin ? NULL : disk_policy_domain_policy, proc_policy_domain_policy);
+			if (read_from_stdin) LoadDomainPolicy(NULL, NULL, proc_policy_domain_policy);
+			else LoadDomainPolicy(disk_policy_domain_policy, disk_policy_base_domain_policy, proc_policy_domain_policy);
 		} else {
-			MoveFileToProc(read_from_stdin ? NULL : disk_policy_domain_policy, proc_policy_domain_policy);
+			if (read_from_stdin) MoveFileToProc(NULL, NULL, proc_policy_domain_policy);
+			else MoveFileToProc(disk_policy_base_domain_policy, disk_policy_domain_policy, proc_policy_domain_policy);
 		}
 	}
 	return 0;
Index: trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.c
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.c	(revision 1482)
+++ trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.c	(working copy)
@@ -5,7 +5,7 @@
  *
  * Copyright (C) 2005-2008  NTT DATA CORPORATION
  *
- * Version: 1.6.3   2008/07/15
+ * Version: 1.6.4-pre   2008/08/26
  *
  */
 #include "ccstools.h"
@@ -452,6 +452,7 @@
 extern int sortpolicy_main(int argc, char *argv[]);
 extern int setprofile_main(int argc, char *argv[]);
 extern int setlevel_main(int argc, char *argv[]);
+extern int diffpolicy_main(int argc, char *argv[]);
 extern int savepolicy_main(int argc, char *argv[]);
 extern int pathmatch_main(int argc, char *argv[]);
 extern int loadpolicy_main(int argc, char *argv[]);
@@ -464,23 +465,28 @@
 extern int ccsauditd_main(int argc, char *argv[]);
 extern int patternize_main(int argc, char *argv[]);
 
-const char *proc_policy_dir           = "/proc/ccs/",
-	*disk_policy_dir              = "/etc/ccs/",
-	*proc_policy_domain_policy    = "/proc/ccs/domain_policy",
-	*disk_policy_domain_policy    = "/etc/ccs/domain_policy.conf",
-	*proc_policy_exception_policy = "/proc/ccs/exception_policy",
-	*disk_policy_exception_policy = "/etc/ccs/exception_policy.conf",
-	*proc_policy_system_policy    = "/proc/ccs/system_policy",
-	*disk_policy_system_policy    = "/etc/ccs/system_policy.conf",
-	*proc_policy_profile          = "/proc/ccs/profile",
-	*disk_policy_profile          = "/etc/ccs/profile.conf",
-	*proc_policy_manager          = "/proc/ccs/manager",
-	*disk_policy_manager          = "/etc/ccs/manager.conf",
-	*proc_policy_query            = "/proc/ccs/query",
-	*proc_policy_grant_log        = "/proc/ccs/grant_log",
-	*proc_policy_reject_log       = "/proc/ccs/reject_log",
-	*proc_policy_domain_status    = "/proc/ccs/.domain_status",
-	*proc_policy_process_status   = "/proc/ccs/.process_status";
+const char *proc_policy_dir                = "/proc/ccs/",
+	*disk_policy_dir                   = "/etc/ccs/",
+	*proc_policy_domain_policy         = "/proc/ccs/domain_policy",
+	*disk_policy_domain_policy         = "/etc/ccs/domain_policy.conf",
+	*disk_policy_base_domain_policy    = "/etc/ccs/base_domain_policy.conf",
+	*proc_policy_exception_policy      = "/proc/ccs/exception_policy",
+	*disk_policy_exception_policy      = "/etc/ccs/exception_policy.conf",
+	*disk_policy_base_exception_policy = "/etc/ccs/base_exception_policy.conf",
+	*proc_policy_system_policy         = "/proc/ccs/system_policy",
+	*disk_policy_system_policy         = "/etc/ccs/system_policy.conf",
+	*disk_policy_base_system_policy    = "/etc/ccs/base_system_policy.conf",
+	*proc_policy_profile               = "/proc/ccs/profile",
+	*disk_policy_profile               = "/etc/ccs/profile.conf",
+	*disk_policy_base_profile          = "/etc/ccs/base_profile.conf",
+	*proc_policy_manager               = "/proc/ccs/manager",
+	*disk_policy_manager               = "/etc/ccs/manager.conf",
+	*disk_policy_base_manager          = "/etc/ccs/base_manager.conf",
+	*proc_policy_query                 = "/proc/ccs/query",
+	*proc_policy_grant_log             = "/proc/ccs/grant_log",
+	*proc_policy_reject_log            = "/proc/ccs/reject_log",
+	*proc_policy_domain_status         = "/proc/ccs/.domain_status",
+	*proc_policy_process_status        = "/proc/ccs/.process_status";
 
 int main(int argc, char *argv[]) {
 	const char *argv0 = argv[0];
@@ -489,47 +495,58 @@
 		return 1;
 	}
 	if (access("/sys/kernel/security/tomoyo/", F_OK) == 0) {
-		proc_policy_dir              = "/sys/kernel/security/tomoyo/";
-		disk_policy_dir              = "/etc/tomoyo/";
-		proc_policy_domain_policy    = "/sys/kernel/security/tomoyo/domain_policy";
-		disk_policy_domain_policy    = "/etc/tomoyo/domain_policy.conf";
-		proc_policy_exception_policy = "/sys/kernel/security/tomoyo/exception_policy";
-		disk_policy_exception_policy = "/etc/tomoyo/exception_policy.conf";
-		proc_policy_system_policy    = "/sys/kernel/security/tomoyo/system_policy";
-		disk_policy_system_policy    = "/etc/tomoyo/system_policy.conf";
-		proc_policy_profile          = "/sys/kernel/security/tomoyo/profile";
-		disk_policy_profile          = "/etc/tomoyo/profile.conf";
-		proc_policy_manager          = "/sys/kernel/security/tomoyo/manager";
-		disk_policy_manager          = "/etc/tomoyo/manager.conf";
-		proc_policy_query            = "/sys/kernel/security/tomoyo/query";
-		proc_policy_grant_log        = "/sys/kernel/security/tomoyo/grant_log";
-		proc_policy_reject_log       = "/sys/kernel/security/tomoyo/reject_log";
-		proc_policy_domain_status    = "/sys/kernel/security/tomoyo/.domain_status";
-		proc_policy_process_status   = "/sys/kernel/security/tomoyo/.process_status";
+		proc_policy_dir                   = "/sys/kernel/security/tomoyo/";
+		disk_policy_dir                   = "/etc/tomoyo/";
+		proc_policy_domain_policy         = "/sys/kernel/security/tomoyo/domain_policy";
+		disk_policy_domain_policy         = "/etc/tomoyo/domain_policy.conf";
+		disk_policy_base_domain_policy    = "/etc/tomoyo/base_domain_policy.conf";
+		proc_policy_exception_policy      = "/sys/kernel/security/tomoyo/exception_policy";
+		disk_policy_exception_policy      = "/etc/tomoyo/exception_policy.conf";
+		disk_policy_base_exception_policy = "/etc/tomoyo/base_exception_policy.conf";
+		proc_policy_system_policy         = "/sys/kernel/security/tomoyo/system_policy";
+		disk_policy_system_policy         = "/etc/tomoyo/system_policy.conf";
+		disk_policy_base_system_policy    = "/etc/tomoyo/base_system_policy.conf";
+		proc_policy_profile               = "/sys/kernel/security/tomoyo/profile";
+		disk_policy_profile               = "/etc/tomoyo/profile.conf";
+		disk_policy_base_profile          = "/etc/tomoyo/base_profile.conf";
+		proc_policy_manager               = "/sys/kernel/security/tomoyo/manager";
+		disk_policy_manager               = "/etc/tomoyo/manager.conf";
+		disk_policy_base_manager          = "/etc/tomoyo/base_manager.conf";
+		proc_policy_query                 = "/sys/kernel/security/tomoyo/query";
+		proc_policy_grant_log             = "/sys/kernel/security/tomoyo/grant_log";
+		proc_policy_reject_log            = "/sys/kernel/security/tomoyo/reject_log";
+		proc_policy_domain_status         = "/sys/kernel/security/tomoyo/.domain_status";
+		proc_policy_process_status        = "/sys/kernel/security/tomoyo/.process_status";
 	} else if (access("/proc/tomoyo/", F_OK) == 0) {
-		proc_policy_dir              = "/proc/tomoyo/";
-		disk_policy_dir              = "/etc/tomoyo/";
-		proc_policy_domain_policy    = "/proc/tomoyo/domain_policy";
-		disk_policy_domain_policy    = "/etc/tomoyo/domain_policy.conf";
-		proc_policy_exception_policy = "/proc/tomoyo/exception_policy";
-		disk_policy_exception_policy = "/etc/tomoyo/exception_policy.conf";
-		proc_policy_system_policy    = "/proc/tomoyo/system_policy";
-		disk_policy_system_policy    = "/etc/tomoyo/system_policy.conf";
-		proc_policy_profile          = "/proc/tomoyo/profile";
-		disk_policy_profile          = "/etc/tomoyo/profile.conf";
-		proc_policy_manager          = "/proc/tomoyo/manager";
-		disk_policy_manager          = "/etc/tomoyo/manager.conf";
-		proc_policy_query            = "/proc/tomoyo/query";
-		proc_policy_grant_log        = "/proc/tomoyo/grant_log";
-		proc_policy_reject_log       = "/proc/tomoyo/reject_log";
-		proc_policy_domain_status    = "/proc/tomoyo/.domain_status";
-		proc_policy_process_status   = "/proc/tomoyo/.process_status";
+		proc_policy_dir                   = "/proc/tomoyo/";
+		disk_policy_dir                   = "/etc/tomoyo/";
+		proc_policy_domain_policy         = "/proc/tomoyo/domain_policy";
+		disk_policy_domain_policy         = "/etc/tomoyo/domain_policy.conf";
+		disk_policy_base_domain_policy    = "/etc/tomoyo/base_domain_policy.conf"; 
+		proc_policy_exception_policy      = "/proc/tomoyo/exception_policy";
+		disk_policy_exception_policy      = "/etc/tomoyo/exception_policy.conf";
+		disk_policy_base_exception_policy = "/etc/tomoyo/base_exception";
+		proc_policy_system_policy         = "/proc/tomoyo/system_policy";
+		disk_policy_system_policy         = "/etc/tomoyo/system_policy.conf";
+		disk_policy_base_system_policy    = "/etc/tomoyo/base_system_policy.conf"; 
+		proc_policy_profile               = "/proc/tomoyo/profile";
+		disk_policy_profile               = "/etc/tomoyo/profile.conf";
+		disk_policy_base_profile          = "/etc/tomoyo/base_profile.conf";
+		proc_policy_manager               = "/proc/tomoyo/manager";
+		disk_policy_manager               = "/etc/tomoyo/manager.conf";
+		disk_policy_base_manager          = "/etc/tomoyo/base_manager.conf";
+		proc_policy_query                 = "/proc/tomoyo/query";
+		proc_policy_grant_log             = "/proc/tomoyo/grant_log";
+		proc_policy_reject_log            = "/proc/tomoyo/reject_log";
+		proc_policy_domain_status         = "/proc/tomoyo/.domain_status";
+		proc_policy_process_status        = "/proc/tomoyo/.process_status";
 	}
 	if (strrchr(argv0, '/')) argv0 = strrchr(argv0, '/') + 1;
 retry:
 	if (strcmp(argv0, "sortpolicy") == 0) return sortpolicy_main(argc, argv);
 	if (strcmp(argv0, "setprofile") == 0) return setprofile_main(argc, argv);
 	if (strcmp(argv0, "setlevel") == 0) return setlevel_main(argc, argv);
+	if (strcmp(argv0, "diffpolicy") == 0) return diffpolicy_main(argc, argv);
 	if (strcmp(argv0, "savepolicy") == 0) return savepolicy_main(argc, argv);
 	if (strcmp(argv0, "pathmatch") == 0) return pathmatch_main(argc, argv);
 	if (strcmp(argv0, "loadpolicy") == 0) return loadpolicy_main(argc, argv);
@@ -550,7 +567,7 @@
 	 * because it is dangerous to allow updating policies via unchecked argv[1].
 	 * You should use either "symbolic links with 'alias' directive" or "hard links".
 	 */
-	printf("ccstools version 1.6.3 build 2008/07/15\n");
+	printf("ccstools version 1.6.4-pre build 2008/08/26\n");
 	fprintf(stderr, "Function %s not implemented.\n", argv0);
 	return 1;
 }
Index: trunk/1.6.x/ccs-tools/ccstools/tomoyo-init
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/tomoyo-init	(revision 1482)
+++ trunk/1.6.x/ccs-tools/ccstools/tomoyo-init	(working copy)
@@ -4,7 +4,7 @@
 #
 # Copyright (C) 2005-2008  NTT DATA CORPORATION
 #
-# Version: 2.2.0-pre 2008/06/25
+# Version: 2.2.0-pre 2008/08/26
 #
 # This program is executed automatically by kernel
 # when execution of /sbin/init is requested.
@@ -131,10 +131,15 @@
 
 # Load policy.
 if [ $CHDIR_OK -eq 1 ]; then
+    [ -r base_manager.conf ] && cat base_manager.conf > $POLICY_DIR/manager
     [ -r manager.conf ] && cat manager.conf > $POLICY_DIR/manager
+    [ -r base_system_policy.conf -a -w $POLICY_DIR/system_policy ] && cat base_system_policy.conf > $POLICY_DIR/system_policy
     [ -r system_policy.conf -a -w $POLICY_DIR/system_policy ] && cat system_policy.conf > $POLICY_DIR/system_policy
+    [ -r base_exception_policy.conf -a -w $POLICY_DIR/exception_policy ] && cat base_exception_policy.conf > $POLICY_DIR/exception_policy
     [ -r exception_policy.conf -a -w $POLICY_DIR/exception_policy ] && cat exception_policy.conf > $POLICY_DIR/exception_policy
+    [ $TOMOYO_NOLOAD -eq 0 -a -r base_domain_policy.conf -a -w $POLICY_DIR/domain_policy ] && cat base_domain_policy.conf > $POLICY_DIR/domain_policy
     [ $TOMOYO_NOLOAD -eq 0 -a -r domain_policy.conf -a -w $POLICY_DIR/domain_policy ] && cat domain_policy.conf > $POLICY_DIR/domain_policy
+    [ -r base_profile.conf ] && cat base_profile.conf > $POLICY_DIR/profile
     if [ "x$PROFILE" = "xdefault" ]; then
 	[ -r profile.conf ] && cat profile.conf > $POLICY_DIR/profile
     elif [ "x$PROFILE" != "xdisable" ]; then
Index: trunk/1.6.x/ccs-tools/ccstools/ccs-init
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/ccs-init	(revision 1482)
+++ trunk/1.6.x/ccs-tools/ccstools/ccs-init	(working copy)
@@ -4,7 +4,7 @@
 #
 # Copyright (C) 2005-2008  NTT DATA CORPORATION
 #
-# Version: 1.6.2 2008/06/25
+# Version: 1.6.4-pre 2008/08/26
 #
 # This program is executed automatically by kernel
 # when execution of /sbin/init is requested.
@@ -111,10 +111,15 @@
 
 # Load policy.
 if [ $CHDIR_OK -eq 1 ]; then
+    [ -r base_manager.conf ] && cat base_manager.conf > /proc/ccs/manager
     [ -r manager.conf ] && cat manager.conf > /proc/ccs/manager
+    [ -r base_system_policy.conf -a -w /proc/ccs/system_policy ] && cat base_system_policy.conf > /proc/ccs/system_policy
     [ -r system_policy.conf -a -w /proc/ccs/system_policy ] && cat system_policy.conf > /proc/ccs/system_policy
+    [ -r base_exception_policy.conf -a -w /proc/ccs/exception_policy ] && cat base_exception_policy.conf > /proc/ccs/exception_policy
     [ -r exception_policy.conf -a -w /proc/ccs/exception_policy ] && cat exception_policy.conf > /proc/ccs/exception_policy
+    [ $TOMOYO_NOLOAD -eq 0 -a -r base_domain_policy.conf -a -w /proc/ccs/domain_policy ] && cat base_domain_policy.conf > /proc/ccs/domain_policy
     [ $TOMOYO_NOLOAD -eq 0 -a -r domain_policy.conf -a -w /proc/ccs/domain_policy ] && cat domain_policy.conf > /proc/ccs/domain_policy
+    [ -r base_profile.conf ] && cat base_profile.conf > /proc/ccs/profile
     if [ "x$PROFILE" = "xdefault" ]; then
 	[ -r profile.conf ] && cat profile.conf > /proc/ccs/profile
     elif [ "x$PROFILE" != "xdisable" ]; then
