Index: trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.h
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.h	(revision 1888)
+++ trunk/1.6.x/ccs-tools/ccstools/ccstools.src/ccstools.h	(working copy)
@@ -47,12 +47,20 @@
 #define SYSTEM_POLICY_FILE    "system_policy"
 #define EXCEPTION_POLICY_FILE "exception_policy"
 #define DOMAIN_POLICY_FILE    "domain_policy"
+#define PROFILE_POLICY_FILE   "profile"
+#define MANAGER_POLICY_FILE   "manager"
+#define QUERY_POLICY_FILE     "query"
+#define MEMINFO_POLICY_FILE   "meminfo"
 
 #define SCREEN_SYSTEM_LIST    0
 #define SCREEN_EXCEPTION_LIST 1
 #define SCREEN_DOMAIN_LIST    2
 #define SCREEN_ACL_LIST       3
-#define MAXSCREEN             4
+#define SCREEN_PROFILE_LIST   4
+#define SCREEN_MANAGER_LIST   5
+#define SCREEN_QUERY_LIST     6
+#define SCREEN_MEMORY_LIST    7
+#define MAXSCREEN             8
 
 #define POLICY_TYPE_UNKNOWN          0
 #define POLICY_TYPE_DOMAIN_POLICY    1
Index: trunk/1.6.x/ccs-tools/ccstools/ccstools.src/editpolicy.c
===================================================================
--- trunk/1.6.x/ccs-tools/ccstools/ccstools.src/editpolicy.c	(revision 1888)
+++ trunk/1.6.x/ccs-tools/ccstools/ccstools.src/editpolicy.c	(working copy)
@@ -1487,9 +1487,16 @@
 			if (!shared_buffer[0])
 				continue;
 		}
-		directive = find_directive(true, shared_buffer);
-		if (directive == DIRECTIVE_NONE)
-			continue;
+		if (current_screen == SCREEN_SYSTEM_LIST ||
+		    current_screen == SCREEN_EXCEPTION_LIST ||
+		    current_screen == SCREEN_DOMAIN_LIST ||
+		    current_screen == SCREEN_ACL_LIST) {
+			directive = find_directive(true, shared_buffer);
+			if (directive == DIRECTIVE_NONE)
+				continue;
+		} else {
+			directive = DIRECTIVE_NONE;
+		}
 		generic_acl_list = realloc(generic_acl_list,
 					   (generic_acl_list_count + 1) *
 					   sizeof(struct generic_acl));
@@ -1506,7 +1513,9 @@
 	if (current_screen == SCREEN_ACL_LIST)
 		qsort(generic_acl_list, generic_acl_list_count,
 		      sizeof(struct generic_acl), generic_acl_compare);
-	else
+	else if (current_screen == SCREEN_SYSTEM_LIST ||
+		    current_screen == SCREEN_EXCEPTION_LIST ||
+		    current_screen == SCREEN_DOMAIN_LIST)
 		qsort(generic_acl_list, generic_acl_list_count,
 		      sizeof(struct generic_acl), generic_acl_compare0);
 
@@ -2194,6 +2203,20 @@
 	return strlen(cp1) + strlen(cp2) + 8 + list_indent;
 }
 
+static int show_literal_line(int i, int index)
+{
+	const char *cp1 = "";
+	const char *cp2 = generic_acl_list[index].operand;
+	int len = 0;
+	mvprintw(header_lines + i, 0, "%c%4d: %s ",
+		 generic_acl_list[index].selected ? '&' : ' ',
+		 index, eat(cp1));
+	while (len-- > 0)
+		printw("%s", eat(" "));
+	printw("%s", eat(cp2));
+	return strlen(cp1) + strlen(cp2) + 8;
+}
+
 static void show_list(void)
 {
 	const int offset = current_item_index[current_screen];
@@ -2221,7 +2244,7 @@
 			 i, i > 1 ? 's' : ' ');
 	} else {
 		i = list_item_count[current_screen];
-		mvprintw(0, 0, "<<< %s Editor >>>"
+		mvprintw(0, 0, "<<< %s >>>"
 			 "      %d entr%s    '?' for help", list_caption,
 			 i, i > 1 ? "ies" : "y");
 	}
@@ -2239,7 +2262,9 @@
 		editpolicy_attr_change(A_REVERSE, false); /* add color */
 		put();
 	}
-	if (current_screen != SCREEN_DOMAIN_LIST) {
+	if (current_screen == SCREEN_SYSTEM_LIST ||
+	    current_screen == SCREEN_EXCEPTION_LIST ||
+	    current_screen == SCREEN_ACL_LIST) {
 		list_indent = 0;
 		for (i = 0; i < list_item_count[current_screen]; i++) {
 			const u8 directive = generic_acl_list[i].directive;
@@ -2247,6 +2272,8 @@
 			if (len > list_indent)
 				list_indent = len;
 		}
+	} else {
+		list_indent = 1;
 	}
 	for (i = 0; i < body_lines; i++) {
 		const int index = offset + i;
@@ -2255,8 +2282,12 @@
 			break;
 		if (current_screen == SCREEN_DOMAIN_LIST)
 			tmp_col = show_domain_line(i, index);
+		else if (current_screen == SCREEN_SYSTEM_LIST ||
+			 current_screen == SCREEN_EXCEPTION_LIST ||
+			 current_screen == SCREEN_ACL_LIST)
+			tmp_col = show_acl_line(i, index, list_indent);
 		else
-			tmp_col = show_acl_line(i, index, list_indent);
+			tmp_col = show_literal_line(i, index);
 		clrtoeol();
 		tmp_col -= window_width;
 		if (tmp_col > max_col)
@@ -2358,8 +2389,8 @@
 
 /* add color start */
 #ifdef COLOR_ON
-static int before_current[MAXSCREEN] = { -1, -1, -1, -1 };
-static int before_y[MAXSCREEN]       = { -1, -1, -1, -1 };
+static int before_current[MAXSCREEN] = { -1, -1, -1, -1, -1, -1, -1, -1 };
+static int before_y[MAXSCREEN]       = { -1, -1, -1, -1, -1, -1, -1, -1 };
 
 static void editpolicy_line_draw(void)
 {
@@ -2949,9 +2980,14 @@
 			goto out;
 		if (current_screen == SCREEN_ACL_LIST)
 			fprintf(fp, "select %s\n", current_domain);
-		directive = find_directive(false, line);
-		if (directive != DIRECTIVE_NONE)
-			fprintf(fp, "%s ", directives[directive].original);
+		if (current_screen == SCREEN_SYSTEM_LIST ||
+		    current_screen == SCREEN_EXCEPTION_LIST ||
+		    current_screen == SCREEN_DOMAIN_LIST ||
+		    current_screen == SCREEN_ACL_LIST) {
+			directive = find_directive(false, line);
+			if (directive != DIRECTIVE_NONE)
+				fprintf(fp, "%s ", directives[directive].original);
+		}
 		fprintf(fp, "%s\n", line);
 		fclose(fp);
 	}
@@ -3044,6 +3080,57 @@
 	free(line);
 }
 
+static int select_window(const int current)
+{
+	mvprintw(0, 0, "Press one of below keys to switch window.\n\n");
+	printw("s     Switch to <<< System Policy Editor >>>\n");
+	printw("e     Switch to <<< Exception Policy Editor >>>\n");
+	printw("d     Switch to <<< Domain Transition Editor >>>\n");
+	if (current_screen == SCREEN_DOMAIN_LIST &&
+	    !is_initializer_source(current) &&
+	    !is_deleted_domain(current))
+		printw("a     Switch to <<< Domain Policy Editor >>>\n");
+	if (!offline_mode) {
+		printw("i     Switch to <<< Interactive Enforcing Mode >>>\n");
+		printw("p     Switch to <<< Profile Editor >>>\n");
+		printw("m     Switch to <<< Manager Policy Editor >>>\n");
+		printw("q     Switch to <<< Memory Quota Editor >>>\n");
+	}
+	refresh();
+	while (true) {
+		int c = getch2();
+		if (c == 'S' || c == 's')
+			return SCREEN_SYSTEM_LIST;
+		if (c == 'E' || c == 'e')
+			return SCREEN_EXCEPTION_LIST;
+		if (c == 'D' || c == 'd')
+			return SCREEN_DOMAIN_LIST;
+		if (c == 'A' || c == 'a') {
+			if (current_screen == SCREEN_DOMAIN_LIST &&
+			    !is_initializer_source(current) &&
+			    !is_deleted_domain(current)) {
+				free(current_domain);
+				current_domain = strdup(domain_name(current));
+				if (!current_domain)
+					out_of_memory();
+				return SCREEN_ACL_LIST;
+			}
+		}
+		if (!offline_mode) {
+			if (c == 'I' || c == 'i')
+				return SCREEN_QUERY_LIST;
+			if (c == 'P' || c == 'p')
+				return SCREEN_PROFILE_LIST;
+			if (c == 'M' || c == 'm')
+				return SCREEN_MANAGER_LIST;
+			if (c == 'Q' || c == 'q')
+				return SCREEN_MEMORY_LIST;
+		}
+		if (c == EOF)
+			return MAXSCREEN;
+	}
+}
+
 static void show_command_key(void)
 {
 	int c;
@@ -3054,6 +3141,7 @@
 	       "F/f        Find first.\n"
 	       "N/n        Find next.\n"
 	       "P/p        Find previous.\n"
+	       "W/w        Switch to selected screen.\n"
 	       "Tab        Switch to next screen.\n"
 	       "Insert     Copy an entry at the cursor position to history "
 	       "buffer.\n"
@@ -3105,16 +3193,28 @@
 	}
 	if (current_screen == SCREEN_SYSTEM_LIST) {
 		policy_file = SYSTEM_POLICY_FILE;
-		list_caption = "System Policy";
+		list_caption = "System Policy Editor";
 	} else if (current_screen == SCREEN_EXCEPTION_LIST) {
 		policy_file = EXCEPTION_POLICY_FILE;
-		list_caption = "Exception Policy";
+		list_caption = "Exception Policy Editor";
 	} else if (current_screen == SCREEN_ACL_LIST) {
 		policy_file = DOMAIN_POLICY_FILE;
-		list_caption = "Domain Policy";
+		list_caption = "Domain Policy Editor";
+	} else if (current_screen == SCREEN_QUERY_LIST) {
+		policy_file = QUERY_POLICY_FILE;
+		list_caption = "Interactive Enforcing Mode";
+	} else if (current_screen == SCREEN_PROFILE_LIST) {
+		policy_file = PROFILE_POLICY_FILE;
+		list_caption = "Profile Editor";
+	} else if (current_screen == SCREEN_MANAGER_LIST) {
+		policy_file = MANAGER_POLICY_FILE;
+		list_caption = "Manager Policy Editor";
+	} else if (current_screen == SCREEN_MEMORY_LIST) {
+		policy_file = MEMINFO_POLICY_FILE;
+		list_caption = "Memory Quota Editor";
 	} else {
 		policy_file = DOMAIN_POLICY_FILE;
-		/* list_caption = "Domain Transition"; */
+		/* list_caption = "Domain Transition Editor"; */
 	}
 	current_item_index[current_screen]
 		= saved_current_item_index[current_screen];
@@ -3315,6 +3415,9 @@
 				break;
 			sort_type = (sort_type + 1) % 2;
 			goto start;
+		case 'w':
+		case 'W':
+			return select_window(current);
 		case '?':
 			show_command_key();
 			goto start;
