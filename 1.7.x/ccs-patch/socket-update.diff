diff -ur before/distro/android/android-goldfish-2.6.29/net/ipv4/raw.c after/distro/android/android-goldfish-2.6.29/net/ipv4/raw.c
--- before/distro/android/android-goldfish-2.6.29/net/ipv4/raw.c	2010-07-20 16:27:15.000000000 +0900
+++ after/distro/android/android-goldfish-2.6.29/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/android/android-goldfish-2.6.29/net/ipv4/udp.c after/distro/android/android-goldfish-2.6.29/net/ipv4/udp.c
--- before/distro/android/android-goldfish-2.6.29/net/ipv4/udp.c	2010-07-20 16:27:15.000000000 +0900
+++ after/distro/android/android-goldfish-2.6.29/net/ipv4/udp.c	2010-07-20 14:38:33.000000000 +0900
@@ -884,6 +884,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -899,9 +900,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -964,7 +967,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/android/android-goldfish-2.6.29/net/ipv6/raw.c after/distro/android/android-goldfish-2.6.29/net/ipv6/raw.c
--- before/distro/android/android-goldfish-2.6.29/net/ipv6/raw.c	2010-07-20 16:27:15.000000000 +0900
+++ after/distro/android/android-goldfish-2.6.29/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/android/android-goldfish-2.6.29/net/ipv6/udp.c after/distro/android/android-goldfish-2.6.29/net/ipv6/udp.c
--- before/distro/android/android-goldfish-2.6.29/net/ipv6/udp.c	2010-07-20 16:27:15.000000000 +0900
+++ after/distro/android/android-goldfish-2.6.29/net/ipv6/udp.c	2010-07-20 14:38:21.000000000 +0900
@@ -169,6 +169,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -181,9 +182,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -269,7 +272,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/android/android-goldfish-2.6.29/net/socket.c after/distro/android/android-goldfish-2.6.29/net/socket.c
--- before/distro/android/android-goldfish-2.6.29/net/socket.c	2010-07-20 16:27:15.000000000 +0900
+++ after/distro/android/android-goldfish-2.6.29/net/socket.c	2010-07-20 12:51:34.000000000 +0900
@@ -1463,6 +1463,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1495,10 +1496,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/raw.c after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/raw.c
--- before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/raw.c	2010-07-20 16:27:16.000000000 +0900
+++ after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -503,12 +503,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/udp.c after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/udp.c
--- before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/udp.c	2010-07-20 16:27:16.000000000 +0900
+++ after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -848,6 +848,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -862,9 +863,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -913,7 +916,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/raw.c after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/raw.c
--- before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/raw.c	2010-07-20 16:27:16.000000000 +0900
+++ after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -394,12 +394,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/udp.c after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/udp.c
--- before/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/udp.c	2010-07-20 16:27:16.000000000 +0900
+++ after/distro/armadillo-9/linux-2.4.31-a9-3/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -535,6 +535,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -546,9 +547,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -627,7 +630,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/armadillo-9/linux-2.4.31-a9-3/net/socket.c after/distro/armadillo-9/linux-2.4.31-a9-3/net/socket.c
--- before/distro/armadillo-9/linux-2.4.31-a9-3/net/socket.c	2010-07-20 16:27:16.000000000 +0900
+++ after/distro/armadillo-9/linux-2.4.31-a9-3/net/socket.c	2010-07-20 12:51:13.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/raw.c after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/raw.c
--- before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/raw.c	2010-07-20 16:27:17.000000000 +0900
+++ after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -583,12 +583,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/udp.c after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/udp.c
--- before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/udp.c	2010-07-20 16:27:17.000000000 +0900
+++ after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -786,6 +786,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -800,9 +801,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -851,7 +854,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/raw.c after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/raw.c
--- before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/raw.c	2010-07-20 16:27:17.000000000 +0900
+++ after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -409,12 +409,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/udp.c after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/udp.c
--- before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/udp.c	2010-07-20 16:27:17.000000000 +0900
+++ after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -234,6 +234,7 @@
 #endif
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -245,9 +246,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -330,11 +333,13 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
+		if (update_stat) {
 #ifdef CONFIG_IPV6_STATISTICS
-		UDP6_INC_STATS_USER(idev, UDP_MIB_INERRORS);
+			UDP6_INC_STATS_USER(idev, UDP_MIB_INERRORS);
 #else
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 #endif
+		}
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/socket.c after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/socket.c
--- before/distro/armadillo-9/linux-2.6.12.3-a9-17/net/socket.c	2010-07-20 16:27:17.000000000 +0900
+++ after/distro/armadillo-9/linux-2.6.12.3-a9-17/net/socket.c	2010-07-20 12:50:47.000000000 +0900
@@ -1357,6 +1357,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1378,10 +1379,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/raw.c after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/raw.c
--- before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/raw.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -583,12 +583,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/udp.c after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/udp.c
--- before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/udp.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -790,6 +790,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -804,9 +805,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -855,7 +858,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/raw.c after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/raw.c
--- before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/raw.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -382,12 +382,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/udp.c after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/udp.c
--- before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/udp.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -235,6 +235,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -246,9 +247,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -327,7 +330,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/socket.c after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/socket.c
--- before/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/socket.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-2/linux-2.6.9-89.12.AXS2/net/socket.c	2010-07-20 12:50:14.000000000 +0900
@@ -1384,6 +1384,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -EMFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1405,10 +1406,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/raw.c after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/raw.c
--- before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/raw.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -606,12 +606,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/udp.c after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/udp.c
--- before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/udp.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -811,6 +811,7 @@
   	struct sk_buff *skb;
   	int copied, err;
 	int peeked;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -826,9 +827,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -882,7 +885,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	lock_sock(sk);
 	skb_kill_datagram(sk, skb, flags);
diff -ur before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/raw.c after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/raw.c
--- before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/raw.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/udp.c after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/udp.c
--- before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/udp.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -240,6 +240,7 @@
   	int err;
 	int peeked;
 	int is_udp4;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -252,9 +253,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -334,10 +337,12 @@
 	release_sock(sk);
 
 	if (flags & MSG_DONTWAIT) {
-		if (is_udp4)
-			UDP_INC_STATS_USER(UDP_MIB_INERRORS);
-		else
-			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat) {
+			if (is_udp4)
+				UDP_INC_STATS_USER(UDP_MIB_INERRORS);
+			else
+				UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		}
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/socket.c after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/socket.c
--- before/distro/asianux-3/linux-2.6.18-194.2AXS3/net/socket.c	2010-07-20 16:27:19.000000000 +0900
+++ after/distro/asianux-3/linux-2.6.18-194.2AXS3/net/socket.c	2010-07-20 12:49:47.000000000 +0900
@@ -1470,6 +1470,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1502,10 +1503,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/cat-760/linux-2.6.15-cat/net/ipv4/raw.c after/distro/cat-760/linux-2.6.15-cat/net/ipv4/raw.c
--- before/distro/cat-760/linux-2.6.15-cat/net/ipv4/raw.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/cat-760/linux-2.6.15-cat/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -589,12 +589,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/cat-760/linux-2.6.15-cat/net/ipv4/udp.c after/distro/cat-760/linux-2.6.15-cat/net/ipv4/udp.c
--- before/distro/cat-760/linux-2.6.15-cat/net/ipv4/udp.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/cat-760/linux-2.6.15-cat/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -787,6 +787,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -801,9 +802,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -852,7 +855,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/cat-760/linux-2.6.15-cat/net/ipv6/raw.c after/distro/cat-760/linux-2.6.15-cat/net/ipv6/raw.c
--- before/distro/cat-760/linux-2.6.15-cat/net/ipv6/raw.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/cat-760/linux-2.6.15-cat/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/cat-760/linux-2.6.15-cat/net/ipv6/udp.c after/distro/cat-760/linux-2.6.15-cat/net/ipv6/udp.c
--- before/distro/cat-760/linux-2.6.15-cat/net/ipv6/udp.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/cat-760/linux-2.6.15-cat/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/cat-760/linux-2.6.15-cat/net/socket.c after/distro/cat-760/linux-2.6.15-cat/net/socket.c
--- before/distro/cat-760/linux-2.6.15-cat/net/socket.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/cat-760/linux-2.6.15-cat/net/socket.c	2010-07-20 12:49:12.000000000 +0900
@@ -1366,6 +1366,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1387,10 +1388,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/raw.c after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/raw.c
--- before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/raw.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -529,12 +529,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/udp.c after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/udp.c
--- before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/udp.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -852,6 +852,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -866,9 +867,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -914,7 +917,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/raw.c after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/raw.c
--- before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/raw.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -364,12 +364,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/udp.c after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/udp.c
--- before/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/udp.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/centos-3.9/linux-2.4.21-63.EL/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -398,6 +398,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -408,9 +409,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -488,7 +491,8 @@
 	   as some normal condition.
 	 */
 	err = (flags&MSG_DONTWAIT) ? -EAGAIN : -EHOSTUNREACH;
-	UDP6_INC_STATS_USER(UdpInErrors);
+	if (update_stat)
+		UDP6_INC_STATS_USER(UdpInErrors);
 	goto out_free;
 }
 
diff -ur before/distro/centos-3.9/linux-2.4.21-63.EL/net/socket.c after/distro/centos-3.9/linux-2.4.21-63.EL/net/socket.c
--- before/distro/centos-3.9/linux-2.4.21-63.EL/net/socket.c	2010-07-20 16:27:20.000000000 +0900
+++ after/distro/centos-3.9/linux-2.4.21-63.EL/net/socket.c	2010-07-20 12:48:40.000000000 +0900
@@ -1118,6 +1118,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -EMFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1129,10 +1130,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/raw.c after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/raw.c
--- before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/raw.c	2010-07-20 16:27:22.000000000 +0900
+++ after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -583,12 +583,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/udp.c after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/udp.c
--- before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/udp.c	2010-07-20 16:27:22.000000000 +0900
+++ after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -790,6 +790,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -804,9 +805,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -855,7 +858,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/raw.c after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/raw.c
--- before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/raw.c	2010-07-20 16:27:22.000000000 +0900
+++ after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -382,12 +382,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/udp.c after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/udp.c
--- before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/udp.c	2010-07-20 16:27:22.000000000 +0900
+++ after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -235,6 +235,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -246,9 +247,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -327,7 +330,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/socket.c after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/socket.c
--- before/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/socket.c	2010-07-20 16:27:22.000000000 +0900
+++ after/distro/centos-4.8/linux-2.6.9-89.0.25.EL/net/socket.c	2010-07-20 12:48:09.000000000 +0900
@@ -1384,6 +1384,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -EMFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1405,10 +1406,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/raw.c after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/raw.c
--- before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/raw.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -606,12 +606,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/udp.c after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/udp.c
--- before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/udp.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -811,6 +811,7 @@
   	struct sk_buff *skb;
   	int copied, err;
 	int peeked;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -826,9 +827,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -882,7 +885,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	lock_sock(sk);
 	skb_kill_datagram(sk, skb, flags);
diff -ur before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/raw.c after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/raw.c
--- before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/raw.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/udp.c after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/udp.c
--- before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/udp.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -240,6 +240,7 @@
   	int err;
 	int peeked;
 	int is_udp4;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -252,9 +253,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -334,10 +337,12 @@
 	release_sock(sk);
 
 	if (flags & MSG_DONTWAIT) {
-		if (is_udp4)
-			UDP_INC_STATS_USER(UDP_MIB_INERRORS);
-		else
-			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat) {
+			if (is_udp4)
+				UDP_INC_STATS_USER(UDP_MIB_INERRORS);
+			else
+				UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		}
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/socket.c after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/socket.c
--- before/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/socket.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-5.5/linux-2.6.18-194.8.1.el5/net/socket.c	2010-07-20 12:47:43.000000000 +0900
@@ -1470,6 +1470,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1502,10 +1503,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/raw.c after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/raw.c
--- before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/raw.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -679,12 +679,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/udp.c after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/udp.c
--- before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/udp.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -931,6 +931,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -946,9 +947,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -1010,7 +1013,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/raw.c after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/raw.c
--- before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/raw.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/udp.c after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/udp.c
--- before/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/udp.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-6.0/linux-2.6.32-37.el6/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/centos-6.0/linux-2.6.32-37.el6/net/socket.c after/distro/centos-6.0/linux-2.6.32-37.el6/net/socket.c
--- before/distro/centos-6.0/linux-2.6.32-37.el6/net/socket.c	2010-07-20 16:27:23.000000000 +0900
+++ after/distro/centos-6.0/linux-2.6.32-37.el6/net/socket.c	2010-07-20 12:47:24.000000000 +0900
@@ -1538,6 +1538,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1570,10 +1571,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/raw.c after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/raw.c
--- before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/raw.c	2010-07-20 16:27:24.000000000 +0900
+++ after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -590,12 +590,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/udp.c after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/udp.c
--- before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/udp.c	2010-07-20 16:27:24.000000000 +0900
+++ after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -787,6 +787,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -801,9 +802,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -852,7 +855,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/raw.c after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/raw.c
--- before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/raw.c	2010-07-20 16:27:24.000000000 +0900
+++ after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/udp.c after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/udp.c
--- before/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/udp.c	2010-07-20 16:27:24.000000000 +0900
+++ after/distro/debian-etch/linux-2.6.18-26etch2/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -311,7 +314,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/debian-etch/linux-2.6.18-26etch2/net/socket.c after/distro/debian-etch/linux-2.6.18-26etch2/net/socket.c
--- before/distro/debian-etch/linux-2.6.18-26etch2/net/socket.c	2010-07-20 16:27:24.000000000 +0900
+++ after/distro/debian-etch/linux-2.6.18-26etch2/net/socket.c	2010-07-20 12:47:03.000000000 +0900
@@ -1414,6 +1414,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1446,10 +1447,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/debian-lenny/linux-2.6.26-24/net/ipv4/raw.c after/distro/debian-lenny/linux-2.6.26-24/net/ipv4/raw.c
--- before/distro/debian-lenny/linux-2.6.26-24/net/ipv4/raw.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/debian-lenny/linux-2.6.26-24/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -665,12 +665,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/debian-lenny/linux-2.6.26-24/net/ipv4/udp.c after/distro/debian-lenny/linux-2.6.26-24/net/ipv4/udp.c
--- before/distro/debian-lenny/linux-2.6.26-24/net/ipv4/udp.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/debian-lenny/linux-2.6.26-24/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -846,6 +846,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -861,9 +862,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -925,7 +928,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/debian-lenny/linux-2.6.26-24/net/ipv6/raw.c after/distro/debian-lenny/linux-2.6.26-24/net/ipv6/raw.c
--- before/distro/debian-lenny/linux-2.6.26-24/net/ipv6/raw.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/debian-lenny/linux-2.6.26-24/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -465,12 +465,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/debian-lenny/linux-2.6.26-24/net/ipv6/udp.c after/distro/debian-lenny/linux-2.6.26-24/net/ipv6/udp.c
--- before/distro/debian-lenny/linux-2.6.26-24/net/ipv6/udp.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/debian-lenny/linux-2.6.26-24/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -126,6 +126,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -138,9 +139,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -218,7 +221,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/debian-lenny/linux-2.6.26-24/net/socket.c after/distro/debian-lenny/linux-2.6.26-24/net/socket.c
--- before/distro/debian-lenny/linux-2.6.26-24/net/socket.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/debian-lenny/linux-2.6.26-24/net/socket.c	2010-07-20 12:46:47.000000000 +0900
@@ -1425,6 +1425,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1457,10 +1458,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/raw.c after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/raw.c
--- before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/raw.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -664,12 +664,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/udp.c after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/udp.c
--- before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/udp.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -888,6 +888,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -903,9 +904,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -968,7 +971,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/raw.c after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/raw.c
--- before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/raw.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/udp.c after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/udp.c
--- before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/udp.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -201,6 +201,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -213,9 +214,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -301,7 +304,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/socket.c after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/socket.c
--- before/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/socket.c	2010-07-20 16:27:25.000000000 +0900
+++ after/distro/fedora-11/linux-2.6.30.10-105.2.23.fc11/net/socket.c	2010-07-20 12:46:31.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/raw.c after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/raw.c
--- before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/raw.c	2010-07-20 16:27:26.000000000 +0900
+++ after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -679,12 +679,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/udp.c after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/udp.c
--- before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/udp.c	2010-07-20 16:27:26.000000000 +0900
+++ after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -931,6 +931,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -946,9 +947,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -1010,7 +1013,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/raw.c after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/raw.c
--- before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/raw.c	2010-07-20 16:27:26.000000000 +0900
+++ after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/udp.c after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/udp.c
--- before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/udp.c	2010-07-20 16:27:26.000000000 +0900
+++ after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/socket.c after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/socket.c
--- before/distro/fedora-12/linux-2.6.32.16-141.fc12/net/socket.c	2010-07-20 16:27:26.000000000 +0900
+++ after/distro/fedora-12/linux-2.6.32.16-141.fc12/net/socket.c	2010-07-20 12:46:13.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/raw.c after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/raw.c
--- before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/raw.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -677,12 +677,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/udp.c after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/udp.c
--- before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/udp.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -1122,6 +1122,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -1137,9 +1138,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -1201,7 +1204,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/raw.c after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/raw.c
--- before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/raw.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -460,12 +460,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/udp.c after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/udp.c
--- before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/udp.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -327,6 +327,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -339,9 +340,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -425,7 +428,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/socket.c after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/socket.c
--- before/distro/fedora-13/linux-2.6.33.6-147.fc13/net/socket.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/fedora-13/linux-2.6.33.6-147.fc13/net/socket.c	2010-07-20 12:45:49.000000000 +0900
@@ -1492,6 +1492,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1520,10 +1521,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/raw.c after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/raw.c
--- before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/raw.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/udp.c after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/udp.c
--- before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/udp.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -867,6 +867,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -882,9 +883,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	if (!gr_search_udp_recvmsg(sk, skb)) {
 		err = -EPERM;
@@ -952,7 +955,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/raw.c after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/raw.c
--- before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/raw.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/udp.c after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/udp.c
--- before/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/udp.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27-hardened-r8/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -136,9 +137,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -217,7 +220,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/gentoo/linux-2.6.27-hardened-r8/net/socket.c after/distro/gentoo/linux-2.6.27-hardened-r8/net/socket.c
--- before/distro/gentoo/linux-2.6.27-hardened-r8/net/socket.c	2010-07-20 16:27:27.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27-hardened-r8/net/socket.c	2010-07-20 12:45:04.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1537,10 +1538,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/raw.c after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/raw.c
--- before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/raw.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/udp.c after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/udp.c
--- before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/udp.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -847,6 +847,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -862,9 +863,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -927,7 +930,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/raw.c after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/raw.c
--- before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/raw.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/udp.c after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/udp.c
--- before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/udp.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -136,9 +137,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -217,7 +220,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/socket.c after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/socket.c
--- before/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/socket.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.27.10+pax-linux-2.6.27.10-200812271900/net/socket.c	2010-07-20 12:44:46.000000000 +0900
@@ -1458,6 +1458,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1490,10 +1491,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/raw.c after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/raw.c
--- before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/raw.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/udp.c after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/udp.c
--- before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/udp.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -849,6 +849,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -864,9 +865,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	err = gr_search_udp_recvmsg(sk, skb);
 	if (err)
@@ -933,7 +936,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/raw.c after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/raw.c
--- before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/raw.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/udp.c after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/udp.c
--- before/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/udp.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.28-hardened-r9/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -140,6 +140,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -152,9 +153,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -240,7 +243,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/gentoo/linux-2.6.28-hardened-r9/net/socket.c after/distro/gentoo/linux-2.6.28-hardened-r9/net/socket.c
--- before/distro/gentoo/linux-2.6.28-hardened-r9/net/socket.c	2010-07-20 16:27:28.000000000 +0900
+++ after/distro/gentoo/linux-2.6.28-hardened-r9/net/socket.c	2010-07-20 12:44:23.000000000 +0900
@@ -1502,6 +1502,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1546,10 +1547,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/raw.c after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/raw.c
--- before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/raw.c	2010-07-20 16:27:29.000000000 +0900
+++ after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -679,12 +679,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/udp.c after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/udp.c
--- before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/udp.c	2010-07-20 16:27:29.000000000 +0900
+++ after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -948,6 +948,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -963,9 +964,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	err = gr_search_udp_recvmsg(sk, skb);
 	if (err)
@@ -1031,7 +1034,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/raw.c after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/raw.c
--- before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/raw.c	2010-07-20 16:27:29.000000000 +0900
+++ after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/udp.c after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/udp.c
--- before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/udp.c	2010-07-20 16:27:29.000000000 +0900
+++ after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/socket.c after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/socket.c
--- before/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/socket.c	2010-07-20 16:27:29.000000000 +0900
+++ after/distro/gentoo/linux-2.6.32.15+grsecurity-2.1.14-2.6.32.15-201006011506/net/socket.c	2010-07-20 12:44:05.000000000 +0900
@@ -1543,6 +1543,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1587,10 +1588,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/raw.c after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/raw.c
--- before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/raw.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -590,12 +590,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/udp.c after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/udp.c
--- before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/udp.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -787,6 +787,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -801,9 +802,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -852,7 +855,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/raw.c after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/raw.c
--- before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/raw.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/udp.c after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/udp.c
--- before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/udp.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -311,7 +314,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/socket.c after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/socket.c
--- before/distro/natures-linux-1.6/linux-2.6.18.8p9/net/socket.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/natures-linux-1.6/linux-2.6.18.8p9/net/socket.c	2010-07-20 12:43:37.000000000 +0900
@@ -1414,6 +1414,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1446,10 +1447,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/raw.c after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/raw.c
--- before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/raw.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -666,12 +666,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/udp.c after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/udp.c
--- before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/udp.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -852,6 +852,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -867,9 +868,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -931,7 +934,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/raw.c after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/raw.c
--- before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/raw.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -480,12 +480,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/udp.c after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/udp.c
--- before/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/udp.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/suse-11.0/linux-2.6.25.20-0.7/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -126,6 +126,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -138,9 +139,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -218,7 +221,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/suse-11.0/linux-2.6.25.20-0.7/net/socket.c after/distro/suse-11.0/linux-2.6.25.20-0.7/net/socket.c
--- before/distro/suse-11.0/linux-2.6.25.20-0.7/net/socket.c	2010-07-20 16:27:30.000000000 +0900
+++ after/distro/suse-11.0/linux-2.6.25.20-0.7/net/socket.c	2010-07-20 12:43:17.000000000 +0900
@@ -1425,6 +1425,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1457,10 +1458,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/raw.c after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/raw.c
--- before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/raw.c	2010-07-20 16:27:31.000000000 +0900
+++ after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/udp.c after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/udp.c
--- before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/udp.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -847,6 +847,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -862,9 +863,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -927,7 +930,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/raw.c after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/raw.c
--- before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/raw.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/udp.c after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/udp.c
--- before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/udp.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -136,9 +137,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -217,7 +220,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/socket.c after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/socket.c
--- before/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/socket.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.1/linux-2.6.27.45-0.1.1/net/socket.c	2010-07-20 12:43:00.000000000 +0900
@@ -1462,6 +1462,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1494,10 +1495,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/raw.c after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/raw.c
--- before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/raw.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -664,12 +664,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/udp.c after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/udp.c
--- before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/udp.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -920,6 +920,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -935,9 +936,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -998,7 +1001,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/raw.c after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/raw.c
--- before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/raw.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/udp.c after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/udp.c
--- before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/udp.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/socket.c after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/socket.c
--- before/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/socket.c	2010-07-20 16:27:32.000000000 +0900
+++ after/distro/suse-11.2/linux-2.6.31.12-0.2.1/net/socket.c	2010-07-20 12:42:39.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/raw.c after/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/raw.c
--- before/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/raw.c	2010-07-20 16:27:34.000000000 +0900
+++ after/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -580,12 +580,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/udp.c after/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/udp.c
--- before/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/udp.c	2010-07-20 16:27:34.000000000 +0900
+++ after/distro/turbolinux-10/linux-2.6.8-20/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -794,6 +794,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -808,9 +809,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -859,7 +862,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/raw.c after/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/raw.c
--- before/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/raw.c	2010-07-20 16:27:34.000000000 +0900
+++ after/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -382,12 +382,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/udp.c after/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/udp.c
--- before/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/udp.c	2010-07-20 16:27:34.000000000 +0900
+++ after/distro/turbolinux-10/linux-2.6.8-20/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -229,6 +229,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -240,9 +241,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -321,7 +324,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/turbolinux-10/linux-2.6.8-20/net/socket.c after/distro/turbolinux-10/linux-2.6.8-20/net/socket.c
--- before/distro/turbolinux-10/linux-2.6.8-20/net/socket.c	2010-07-20 16:27:34.000000000 +0900
+++ after/distro/turbolinux-10/linux-2.6.8-20/net/socket.c	2010-07-20 12:42:08.000000000 +0900
@@ -1383,6 +1383,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -EMFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1404,10 +1405,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/raw.c after/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/raw.c
--- before/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/raw.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -599,12 +599,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/udp.c after/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/udp.c
--- before/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/udp.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/turbolinux-11/linux-2.6.23-12/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -824,6 +824,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -838,9 +839,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -896,7 +899,8 @@
 	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/raw.c after/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/raw.c
--- before/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/raw.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/raw.c	2010-07-20 12:32:14.000000000 +0900
@@ -440,12 +440,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/udp.c after/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/udp.c
--- before/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/udp.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/turbolinux-11/linux-2.6.23-12/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,9 +136,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -212,7 +215,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/turbolinux-11/linux-2.6.23-12/net/socket.c after/distro/turbolinux-11/linux-2.6.23-12/net/socket.c
--- before/distro/turbolinux-11/linux-2.6.23-12/net/socket.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/turbolinux-11/linux-2.6.23-12/net/socket.c	2010-07-20 12:41:26.000000000 +0900
@@ -1406,6 +1406,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1438,10 +1439,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/raw.c after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/raw.c
--- before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/raw.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/raw.c	2010-07-20 12:29:59.000000000 +0900
@@ -679,12 +679,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/udp.c after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/udp.c
--- before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/udp.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -931,6 +931,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -946,9 +947,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -1010,7 +1013,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/raw.c after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/raw.c
--- before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/raw.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/raw.c	2010-07-20 12:29:44.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/udp.c after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/udp.c
--- before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/udp.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/socket.c after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/socket.c
--- before/distro/ubuntu-10.04/linux-2.6.32-22.36/net/socket.c	2010-07-20 16:27:35.000000000 +0900
+++ after/distro/ubuntu-10.04/linux-2.6.32-22.36/net/socket.c	2010-07-20 12:40:58.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/raw.c after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/raw.c
--- before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/raw.c	2010-07-20 16:27:37.000000000 +0900
+++ after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/raw.c	2010-07-20 12:29:31.000000000 +0900
@@ -589,12 +589,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/udp.c after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/udp.c
--- before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/udp.c	2010-07-20 16:27:37.000000000 +0900
+++ after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -789,6 +789,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -803,9 +804,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -854,7 +857,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/raw.c after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/raw.c
--- before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/raw.c	2010-07-20 16:27:37.000000000 +0900
+++ after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/raw.c	2010-07-20 12:29:16.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/udp.c after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/udp.c
--- before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/udp.c	2010-07-20 16:27:37.000000000 +0900
+++ after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/socket.c after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/socket.c
--- before/distro/ubuntu-6.06/linux-2.6.15-55.84/net/socket.c	2010-07-20 16:27:37.000000000 +0900
+++ after/distro/ubuntu-6.06/linux-2.6.15-55.84/net/socket.c	2010-07-20 12:40:07.000000000 +0900
@@ -1371,6 +1371,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1392,10 +1393,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/raw.c after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/raw.c
--- before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/raw.c	2010-07-20 16:27:38.000000000 +0900
+++ after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/raw.c	2010-07-20 12:29:03.000000000 +0900
@@ -603,12 +603,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/udp.c after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/udp.c
--- before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/udp.c	2010-07-20 16:27:38.000000000 +0900
+++ after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -831,6 +831,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -845,9 +846,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -903,7 +906,8 @@
 	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/raw.c after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/raw.c
--- before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/raw.c	2010-07-20 16:27:38.000000000 +0900
+++ after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/raw.c	2010-07-20 12:28:48.000000000 +0900
@@ -441,12 +441,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/udp.c after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/udp.c
--- before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/udp.c	2010-07-20 16:27:38.000000000 +0900
+++ after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,9 +136,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -209,7 +212,8 @@
 	return err;
 
 csum_copy_err:
-	UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT)
diff -ur before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/socket.c after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/socket.c
--- before/distro/ubuntu-8.04/linux-2.6.24-28.70/net/socket.c	2010-07-20 16:27:38.000000000 +0900
+++ after/distro/ubuntu-8.04/linux-2.6.24-28.70/net/socket.c	2010-07-20 12:39:36.000000000 +0900
@@ -1411,6 +1411,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1443,10 +1444,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/raw.c after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/raw.c
--- before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/raw.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/raw.c	2010-07-20 12:28:26.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/udp.c after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/udp.c
--- before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/udp.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -847,6 +847,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -862,9 +863,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -927,7 +930,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/raw.c after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/raw.c
--- before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/raw.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/raw.c	2010-07-20 12:28:09.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/udp.c after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/udp.c
--- before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/udp.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -136,9 +137,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -217,7 +220,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/socket.c after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/socket.c
--- before/distro/ubuntu-8.10/linux-2.6.27-17.46/net/socket.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-8.10/linux-2.6.27-17.46/net/socket.c	2010-07-20 12:39:12.000000000 +0900
@@ -1458,6 +1458,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1490,10 +1491,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/raw.c after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/raw.c
--- before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/raw.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/raw.c	2010-07-20 12:27:55.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/udp.c after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/udp.c
--- before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/udp.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -829,6 +829,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -844,9 +845,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -909,7 +912,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/raw.c after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/raw.c
--- before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/raw.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/raw.c	2010-07-20 12:27:37.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/udp.c after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/udp.c
--- before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/udp.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -140,6 +140,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -152,9 +153,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -240,7 +243,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/socket.c after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/socket.c
--- before/distro/ubuntu-9.04/linux-2.6.28-19.61/net/socket.c	2010-07-20 16:27:39.000000000 +0900
+++ after/distro/ubuntu-9.04/linux-2.6.28-19.61/net/socket.c	2010-07-20 12:38:54.000000000 +0900
@@ -1457,6 +1457,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1489,10 +1490,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/raw.c after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/raw.c
--- before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/raw.c	2010-07-20 16:27:40.000000000 +0900
+++ after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/raw.c	2010-07-20 12:27:20.000000000 +0900
@@ -664,12 +664,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/udp.c after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/udp.c
--- before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/udp.c	2010-07-20 16:27:40.000000000 +0900
+++ after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -920,6 +920,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -935,9 +936,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -998,7 +1001,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/raw.c after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/raw.c
--- before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/raw.c	2010-07-20 16:27:40.000000000 +0900
+++ after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/raw.c	2010-07-20 12:27:00.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/udp.c after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/udp.c
--- before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/udp.c	2010-07-20 16:27:40.000000000 +0900
+++ after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/socket.c after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/socket.c
--- before/distro/ubuntu-9.10/linux-2.6.31-22.60/net/socket.c	2010-07-20 16:27:40.000000000 +0900
+++ after/distro/ubuntu-9.10/linux-2.6.31-22.60/net/socket.c	2010-07-20 12:38:09.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/raw.c after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/raw.c
--- before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/raw.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/raw.c	2010-07-20 12:26:44.000000000 +0900
@@ -590,12 +590,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/udp.c after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/udp.c
--- before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/udp.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -790,6 +790,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -804,9 +805,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -855,7 +858,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/raw.c after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/raw.c
--- before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/raw.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/raw.c	2010-07-20 12:26:27.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/udp.c after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/udp.c
--- before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/udp.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -232,6 +232,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -243,9 +244,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -312,7 +315,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/socket.c after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/socket.c
--- before/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/socket.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-4.2/linux-2.6.16-76.55vl4/net/socket.c	2010-07-20 12:37:29.000000000 +0900
@@ -1372,6 +1372,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1393,10 +1394,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/raw.c after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/raw.c
--- before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/raw.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/raw.c	2010-07-20 12:25:54.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/udp.c after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/udp.c
--- before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/udp.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv4/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -847,6 +847,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -862,9 +863,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -927,7 +930,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/raw.c after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/raw.c
--- before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/raw.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/raw.c	2010-07-20 12:25:27.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/udp.c after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/udp.c
--- before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/udp.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/ipv6/udp.c	2010-07-20 14:35:05.000000000 +0900
@@ -124,6 +124,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -136,9 +137,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -217,7 +220,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/socket.c after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/socket.c
--- before/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/socket.c	2010-07-20 16:27:42.000000000 +0900
+++ after/distro/vine-linux-5.0/linux-2.6.27-57vl5/net/socket.c	2010-07-20 13:03:41.000000000 +0900
@@ -1458,6 +1458,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1490,10 +1491,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.4.30/net/ipv4/raw.c after/vanilla/linux-2.4.30/net/ipv4/raw.c
--- before/vanilla/linux-2.4.30/net/ipv4/raw.c	2010-07-20 16:26:55.000000000 +0900
+++ after/vanilla/linux-2.4.30/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.30/net/ipv4/udp.c after/vanilla/linux-2.4.30/net/ipv4/udp.c
--- before/vanilla/linux-2.4.30/net/ipv4/udp.c	2010-07-20 16:26:55.000000000 +0900
+++ after/vanilla/linux-2.4.30/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.30/net/ipv6/raw.c after/vanilla/linux-2.4.30/net/ipv6/raw.c
--- before/vanilla/linux-2.4.30/net/ipv6/raw.c	2010-07-20 16:26:55.000000000 +0900
+++ after/vanilla/linux-2.4.30/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.30/net/ipv6/udp.c after/vanilla/linux-2.4.30/net/ipv6/udp.c
--- before/vanilla/linux-2.4.30/net/ipv6/udp.c	2010-07-20 16:26:55.000000000 +0900
+++ after/vanilla/linux-2.4.30/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -401,6 +401,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -412,9 +413,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -494,7 +497,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.30/net/socket.c after/vanilla/linux-2.4.30/net/socket.c
--- before/vanilla/linux-2.4.30/net/socket.c	2010-07-20 16:26:55.000000000 +0900
+++ after/vanilla/linux-2.4.30/net/socket.c	2010-07-20 13:01:38.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.31/net/ipv4/raw.c after/vanilla/linux-2.4.31/net/ipv4/raw.c
--- before/vanilla/linux-2.4.31/net/ipv4/raw.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.31/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.31/net/ipv4/udp.c after/vanilla/linux-2.4.31/net/ipv4/udp.c
--- before/vanilla/linux-2.4.31/net/ipv4/udp.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.31/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.31/net/ipv6/raw.c after/vanilla/linux-2.4.31/net/ipv6/raw.c
--- before/vanilla/linux-2.4.31/net/ipv6/raw.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.31/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.31/net/ipv6/udp.c after/vanilla/linux-2.4.31/net/ipv6/udp.c
--- before/vanilla/linux-2.4.31/net/ipv6/udp.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.31/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -401,6 +401,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -412,9 +413,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -494,7 +497,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.31/net/socket.c after/vanilla/linux-2.4.31/net/socket.c
--- before/vanilla/linux-2.4.31/net/socket.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.31/net/socket.c	2010-07-20 13:01:25.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.32/net/ipv4/raw.c after/vanilla/linux-2.4.32/net/ipv4/raw.c
--- before/vanilla/linux-2.4.32/net/ipv4/raw.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.32/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.32/net/ipv4/udp.c after/vanilla/linux-2.4.32/net/ipv4/udp.c
--- before/vanilla/linux-2.4.32/net/ipv4/udp.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.32/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.32/net/ipv6/raw.c after/vanilla/linux-2.4.32/net/ipv6/raw.c
--- before/vanilla/linux-2.4.32/net/ipv6/raw.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.32/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.32/net/ipv6/udp.c after/vanilla/linux-2.4.32/net/ipv6/udp.c
--- before/vanilla/linux-2.4.32/net/ipv6/udp.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.32/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -400,6 +400,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -411,9 +412,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -493,7 +496,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.32/net/socket.c after/vanilla/linux-2.4.32/net/socket.c
--- before/vanilla/linux-2.4.32/net/socket.c	2010-07-20 16:26:56.000000000 +0900
+++ after/vanilla/linux-2.4.32/net/socket.c	2010-07-20 13:01:11.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.33.7/net/ipv4/raw.c after/vanilla/linux-2.4.33.7/net/ipv4/raw.c
--- before/vanilla/linux-2.4.33.7/net/ipv4/raw.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.33.7/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.33.7/net/ipv4/udp.c after/vanilla/linux-2.4.33.7/net/ipv4/udp.c
--- before/vanilla/linux-2.4.33.7/net/ipv4/udp.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.33.7/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.33.7/net/ipv6/raw.c after/vanilla/linux-2.4.33.7/net/ipv6/raw.c
--- before/vanilla/linux-2.4.33.7/net/ipv6/raw.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.33.7/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.33.7/net/ipv6/udp.c after/vanilla/linux-2.4.33.7/net/ipv6/udp.c
--- before/vanilla/linux-2.4.33.7/net/ipv6/udp.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.33.7/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -400,6 +400,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -411,9 +412,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -493,7 +496,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.33.7/net/socket.c after/vanilla/linux-2.4.33.7/net/socket.c
--- before/vanilla/linux-2.4.33.7/net/socket.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.33.7/net/socket.c	2010-07-20 13:00:56.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.34.6/net/ipv4/raw.c after/vanilla/linux-2.4.34.6/net/ipv4/raw.c
--- before/vanilla/linux-2.4.34.6/net/ipv4/raw.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.34.6/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.34.6/net/ipv4/udp.c after/vanilla/linux-2.4.34.6/net/ipv4/udp.c
--- before/vanilla/linux-2.4.34.6/net/ipv4/udp.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.34.6/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.34.6/net/ipv6/raw.c after/vanilla/linux-2.4.34.6/net/ipv6/raw.c
--- before/vanilla/linux-2.4.34.6/net/ipv6/raw.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.34.6/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.34.6/net/ipv6/udp.c after/vanilla/linux-2.4.34.6/net/ipv6/udp.c
--- before/vanilla/linux-2.4.34.6/net/ipv6/udp.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.34.6/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -400,6 +400,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -411,9 +412,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -493,7 +496,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.34.6/net/socket.c after/vanilla/linux-2.4.34.6/net/socket.c
--- before/vanilla/linux-2.4.34.6/net/socket.c	2010-07-20 16:26:57.000000000 +0900
+++ after/vanilla/linux-2.4.34.6/net/socket.c	2010-07-20 13:00:40.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.35.5/net/ipv4/raw.c after/vanilla/linux-2.4.35.5/net/ipv4/raw.c
--- before/vanilla/linux-2.4.35.5/net/ipv4/raw.c	2010-07-20 16:26:58.000000000 +0900
+++ after/vanilla/linux-2.4.35.5/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.35.5/net/ipv4/udp.c after/vanilla/linux-2.4.35.5/net/ipv4/udp.c
--- before/vanilla/linux-2.4.35.5/net/ipv4/udp.c	2010-07-20 16:26:58.000000000 +0900
+++ after/vanilla/linux-2.4.35.5/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.35.5/net/ipv6/raw.c after/vanilla/linux-2.4.35.5/net/ipv6/raw.c
--- before/vanilla/linux-2.4.35.5/net/ipv6/raw.c	2010-07-20 16:26:58.000000000 +0900
+++ after/vanilla/linux-2.4.35.5/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.35.5/net/ipv6/udp.c after/vanilla/linux-2.4.35.5/net/ipv6/udp.c
--- before/vanilla/linux-2.4.35.5/net/ipv6/udp.c	2010-07-20 16:26:58.000000000 +0900
+++ after/vanilla/linux-2.4.35.5/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -400,6 +400,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -411,9 +412,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -493,7 +496,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.35.5/net/socket.c after/vanilla/linux-2.4.35.5/net/socket.c
--- before/vanilla/linux-2.4.35.5/net/socket.c	2010-07-20 16:26:58.000000000 +0900
+++ after/vanilla/linux-2.4.35.5/net/socket.c	2010-07-20 13:00:27.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.36.9/net/ipv4/raw.c after/vanilla/linux-2.4.36.9/net/ipv4/raw.c
--- before/vanilla/linux-2.4.36.9/net/ipv4/raw.c	2010-07-20 16:26:59.000000000 +0900
+++ after/vanilla/linux-2.4.36.9/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.36.9/net/ipv4/udp.c after/vanilla/linux-2.4.36.9/net/ipv4/udp.c
--- before/vanilla/linux-2.4.36.9/net/ipv4/udp.c	2010-07-20 16:26:59.000000000 +0900
+++ after/vanilla/linux-2.4.36.9/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.36.9/net/ipv6/raw.c after/vanilla/linux-2.4.36.9/net/ipv6/raw.c
--- before/vanilla/linux-2.4.36.9/net/ipv6/raw.c	2010-07-20 16:26:59.000000000 +0900
+++ after/vanilla/linux-2.4.36.9/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.36.9/net/ipv6/udp.c after/vanilla/linux-2.4.36.9/net/ipv6/udp.c
--- before/vanilla/linux-2.4.36.9/net/ipv6/udp.c	2010-07-20 16:26:59.000000000 +0900
+++ after/vanilla/linux-2.4.36.9/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -400,6 +400,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -411,9 +412,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -493,7 +496,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.36.9/net/socket.c after/vanilla/linux-2.4.36.9/net/socket.c
--- before/vanilla/linux-2.4.36.9/net/socket.c	2010-07-20 16:26:59.000000000 +0900
+++ after/vanilla/linux-2.4.36.9/net/socket.c	2010-07-20 13:00:07.000000000 +0900
@@ -1065,6 +1065,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1076,10 +1077,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.4.37.9/net/ipv4/raw.c after/vanilla/linux-2.4.37.9/net/ipv4/raw.c
--- before/vanilla/linux-2.4.37.9/net/ipv4/raw.c	2010-07-20 16:27:00.000000000 +0900
+++ after/vanilla/linux-2.4.37.9/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -501,12 +501,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.4.37.9/net/ipv4/udp.c after/vanilla/linux-2.4.37.9/net/ipv4/udp.c
--- before/vanilla/linux-2.4.37.9/net/ipv4/udp.c	2010-07-20 16:27:00.000000000 +0900
+++ after/vanilla/linux-2.4.37.9/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -702,6 +702,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -716,9 +717,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -767,7 +770,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UdpInErrors);
+	if (update_stat)
+		UDP_INC_STATS_BH(UdpInErrors);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.4.37.9/net/ipv6/raw.c after/vanilla/linux-2.4.37.9/net/ipv6/raw.c
--- before/vanilla/linux-2.4.37.9/net/ipv6/raw.c	2010-07-20 16:27:00.000000000 +0900
+++ after/vanilla/linux-2.4.37.9/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -367,12 +367,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.4.37.9/net/ipv6/udp.c after/vanilla/linux-2.4.37.9/net/ipv6/udp.c
--- before/vanilla/linux-2.4.37.9/net/ipv6/udp.c	2010-07-20 16:27:00.000000000 +0900
+++ after/vanilla/linux-2.4.37.9/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -400,6 +400,7 @@
 {
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -411,9 +412,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -493,7 +496,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UdpInErrors);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UdpInErrors);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.4.37.9/net/socket.c after/vanilla/linux-2.4.37.9/net/socket.c
--- before/vanilla/linux-2.4.37.9/net/socket.c	2010-07-20 16:27:00.000000000 +0900
+++ after/vanilla/linux-2.4.37.9/net/socket.c	2010-07-20 12:59:53.000000000 +0900
@@ -1068,6 +1068,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1079,10 +1080,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.11.12/net/ipv4/raw.c after/vanilla/linux-2.6.11.12/net/ipv4/raw.c
--- before/vanilla/linux-2.6.11.12/net/ipv4/raw.c	2010-07-20 16:27:01.000000000 +0900
+++ after/vanilla/linux-2.6.11.12/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -583,12 +583,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.11.12/net/ipv4/udp.c after/vanilla/linux-2.6.11.12/net/ipv4/udp.c
--- before/vanilla/linux-2.6.11.12/net/ipv4/udp.c	2010-07-20 16:27:01.000000000 +0900
+++ after/vanilla/linux-2.6.11.12/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -785,6 +785,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -799,9 +800,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -850,7 +853,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.6.11.12/net/ipv6/raw.c after/vanilla/linux-2.6.11.12/net/ipv6/raw.c
--- before/vanilla/linux-2.6.11.12/net/ipv6/raw.c	2010-07-20 16:27:01.000000000 +0900
+++ after/vanilla/linux-2.6.11.12/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -382,12 +382,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.11.12/net/ipv6/udp.c after/vanilla/linux-2.6.11.12/net/ipv6/udp.c
--- before/vanilla/linux-2.6.11.12/net/ipv6/udp.c	2010-07-20 16:27:01.000000000 +0900
+++ after/vanilla/linux-2.6.11.12/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.11.12/net/socket.c after/vanilla/linux-2.6.11.12/net/socket.c
--- before/vanilla/linux-2.6.11.12/net/socket.c	2010-07-20 16:27:01.000000000 +0900
+++ after/vanilla/linux-2.6.11.12/net/socket.c	2010-07-20 12:59:38.000000000 +0900
@@ -1359,6 +1359,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1380,10 +1381,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.12.6/net/ipv4/raw.c after/vanilla/linux-2.6.12.6/net/ipv4/raw.c
--- before/vanilla/linux-2.6.12.6/net/ipv4/raw.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.12.6/net/ipv4/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -583,12 +583,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.12.6/net/ipv4/udp.c after/vanilla/linux-2.6.12.6/net/ipv4/udp.c
--- before/vanilla/linux-2.6.12.6/net/ipv4/udp.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.12.6/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -786,6 +786,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -800,9 +801,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -851,7 +854,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.6.12.6/net/ipv6/raw.c after/vanilla/linux-2.6.12.6/net/ipv6/raw.c
--- before/vanilla/linux-2.6.12.6/net/ipv6/raw.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.12.6/net/ipv6/raw.c	2010-07-20 12:32:07.000000000 +0900
@@ -383,12 +383,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.12.6/net/ipv6/udp.c after/vanilla/linux-2.6.12.6/net/ipv6/udp.c
--- before/vanilla/linux-2.6.12.6/net/ipv6/udp.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.12.6/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.12.6/net/socket.c after/vanilla/linux-2.6.12.6/net/socket.c
--- before/vanilla/linux-2.6.12.6/net/socket.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.12.6/net/socket.c	2010-07-20 12:59:24.000000000 +0900
@@ -1357,6 +1357,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1378,10 +1379,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.13.5/net/ipv4/raw.c after/vanilla/linux-2.6.13.5/net/ipv4/raw.c
--- before/vanilla/linux-2.6.13.5/net/ipv4/raw.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.13.5/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -586,12 +586,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.13.5/net/ipv4/udp.c after/vanilla/linux-2.6.13.5/net/ipv4/udp.c
--- before/vanilla/linux-2.6.13.5/net/ipv4/udp.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.13.5/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -786,6 +786,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -800,9 +801,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -851,7 +854,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.6.13.5/net/ipv6/raw.c after/vanilla/linux-2.6.13.5/net/ipv6/raw.c
--- before/vanilla/linux-2.6.13.5/net/ipv6/raw.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.13.5/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.13.5/net/ipv6/udp.c after/vanilla/linux-2.6.13.5/net/ipv6/udp.c
--- before/vanilla/linux-2.6.13.5/net/ipv6/udp.c	2010-07-20 16:27:02.000000000 +0900
+++ after/vanilla/linux-2.6.13.5/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.13.5/net/socket.c after/vanilla/linux-2.6.13.5/net/socket.c
--- before/vanilla/linux-2.6.13.5/net/socket.c	2010-07-20 16:27:03.000000000 +0900
+++ after/vanilla/linux-2.6.13.5/net/socket.c	2010-07-20 12:59:10.000000000 +0900
@@ -1357,6 +1357,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1378,10 +1379,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.14.7/net/ipv4/raw.c after/vanilla/linux-2.6.14.7/net/ipv4/raw.c
--- before/vanilla/linux-2.6.14.7/net/ipv4/raw.c	2010-07-20 16:27:03.000000000 +0900
+++ after/vanilla/linux-2.6.14.7/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -589,12 +589,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.14.7/net/ipv4/udp.c after/vanilla/linux-2.6.14.7/net/ipv4/udp.c
--- before/vanilla/linux-2.6.14.7/net/ipv4/udp.c	2010-07-20 16:27:03.000000000 +0900
+++ after/vanilla/linux-2.6.14.7/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -787,6 +787,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -801,9 +802,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -852,7 +855,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.6.14.7/net/ipv6/raw.c after/vanilla/linux-2.6.14.7/net/ipv6/raw.c
--- before/vanilla/linux-2.6.14.7/net/ipv6/raw.c	2010-07-20 16:27:03.000000000 +0900
+++ after/vanilla/linux-2.6.14.7/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -393,12 +393,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.14.7/net/ipv6/udp.c after/vanilla/linux-2.6.14.7/net/ipv6/udp.c
--- before/vanilla/linux-2.6.14.7/net/ipv6/udp.c	2010-07-20 16:27:03.000000000 +0900
+++ after/vanilla/linux-2.6.14.7/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.14.7/net/socket.c after/vanilla/linux-2.6.14.7/net/socket.c
--- before/vanilla/linux-2.6.14.7/net/socket.c	2010-07-20 16:27:03.000000000 +0900
+++ after/vanilla/linux-2.6.14.7/net/socket.c	2010-07-20 12:58:56.000000000 +0900
@@ -1366,6 +1366,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1387,10 +1388,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.15.7/net/ipv4/raw.c after/vanilla/linux-2.6.15.7/net/ipv4/raw.c
--- before/vanilla/linux-2.6.15.7/net/ipv4/raw.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.15.7/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -589,12 +589,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.15.7/net/ipv4/udp.c after/vanilla/linux-2.6.15.7/net/ipv4/udp.c
--- before/vanilla/linux-2.6.15.7/net/ipv4/udp.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.15.7/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -787,6 +787,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -801,9 +802,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -852,7 +855,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	/* Clear queue. */
 	if (flags&MSG_PEEK) {
diff -ur before/vanilla/linux-2.6.15.7/net/ipv6/raw.c after/vanilla/linux-2.6.15.7/net/ipv6/raw.c
--- before/vanilla/linux-2.6.15.7/net/ipv6/raw.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.15.7/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.15.7/net/ipv6/udp.c after/vanilla/linux-2.6.15.7/net/ipv6/udp.c
--- before/vanilla/linux-2.6.15.7/net/ipv6/udp.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.15.7/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -324,7 +327,8 @@
 	skb_free_datagram(sk, skb);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.15.7/net/socket.c after/vanilla/linux-2.6.15.7/net/socket.c
--- before/vanilla/linux-2.6.15.7/net/socket.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.15.7/net/socket.c	2010-07-20 12:58:40.000000000 +0900
@@ -1366,6 +1366,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1387,10 +1388,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.16.62/net/ipv4/raw.c after/vanilla/linux-2.6.16.62/net/ipv4/raw.c
--- before/vanilla/linux-2.6.16.62/net/ipv4/raw.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.16.62/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -592,12 +592,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.16.62/net/ipv4/udp.c after/vanilla/linux-2.6.16.62/net/ipv4/udp.c
--- before/vanilla/linux-2.6.16.62/net/ipv4/udp.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.16.62/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -788,6 +788,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -802,9 +803,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -853,7 +856,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.16.62/net/ipv6/raw.c after/vanilla/linux-2.6.16.62/net/ipv6/raw.c
--- before/vanilla/linux-2.6.16.62/net/ipv6/raw.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.16.62/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.16.62/net/ipv6/udp.c after/vanilla/linux-2.6.16.62/net/ipv6/udp.c
--- before/vanilla/linux-2.6.16.62/net/ipv6/udp.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.16.62/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -232,6 +232,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -243,9 +244,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -312,7 +315,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.16.62/net/socket.c after/vanilla/linux-2.6.16.62/net/socket.c
--- before/vanilla/linux-2.6.16.62/net/socket.c	2010-07-20 16:27:04.000000000 +0900
+++ after/vanilla/linux-2.6.16.62/net/socket.c	2010-07-20 12:58:24.000000000 +0900
@@ -1367,6 +1367,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1388,10 +1389,9 @@
 	if (err < 0)
 		goto out_release;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_release;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		sock_release(newsock);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.17.14/net/ipv4/raw.c after/vanilla/linux-2.6.17.14/net/ipv4/raw.c
--- before/vanilla/linux-2.6.17.14/net/ipv4/raw.c	2010-07-20 16:27:05.000000000 +0900
+++ after/vanilla/linux-2.6.17.14/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -590,12 +590,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.17.14/net/ipv4/udp.c after/vanilla/linux-2.6.17.14/net/ipv4/udp.c
--- before/vanilla/linux-2.6.17.14/net/ipv4/udp.c	2010-07-20 16:27:05.000000000 +0900
+++ after/vanilla/linux-2.6.17.14/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -788,6 +788,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -802,9 +803,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -853,7 +856,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.17.14/net/ipv6/raw.c after/vanilla/linux-2.6.17.14/net/ipv6/raw.c
--- before/vanilla/linux-2.6.17.14/net/ipv6/raw.c	2010-07-20 16:27:05.000000000 +0900
+++ after/vanilla/linux-2.6.17.14/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.17.14/net/ipv6/udp.c after/vanilla/linux-2.6.17.14/net/ipv6/udp.c
--- before/vanilla/linux-2.6.17.14/net/ipv6/udp.c	2010-07-20 16:27:05.000000000 +0900
+++ after/vanilla/linux-2.6.17.14/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -232,6 +232,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -243,9 +244,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -312,7 +315,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.17.14/net/socket.c after/vanilla/linux-2.6.17.14/net/socket.c
--- before/vanilla/linux-2.6.17.14/net/socket.c	2010-07-20 16:27:05.000000000 +0900
+++ after/vanilla/linux-2.6.17.14/net/socket.c	2010-07-20 12:57:50.000000000 +0900
@@ -1413,6 +1413,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1445,10 +1446,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.18.8/net/ipv4/raw.c after/vanilla/linux-2.6.18.8/net/ipv4/raw.c
--- before/vanilla/linux-2.6.18.8/net/ipv4/raw.c	2010-07-20 16:27:06.000000000 +0900
+++ after/vanilla/linux-2.6.18.8/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -590,12 +590,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.18.8/net/ipv4/udp.c after/vanilla/linux-2.6.18.8/net/ipv4/udp.c
--- before/vanilla/linux-2.6.18.8/net/ipv4/udp.c	2010-07-20 16:27:06.000000000 +0900
+++ after/vanilla/linux-2.6.18.8/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -787,6 +787,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -801,9 +802,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -852,7 +855,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.18.8/net/ipv6/raw.c after/vanilla/linux-2.6.18.8/net/ipv6/raw.c
--- before/vanilla/linux-2.6.18.8/net/ipv6/raw.c	2010-07-20 16:27:06.000000000 +0900
+++ after/vanilla/linux-2.6.18.8/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -385,12 +385,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.18.8/net/ipv6/udp.c after/vanilla/linux-2.6.18.8/net/ipv6/udp.c
--- before/vanilla/linux-2.6.18.8/net/ipv6/udp.c	2010-07-20 16:27:06.000000000 +0900
+++ after/vanilla/linux-2.6.18.8/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -231,6 +231,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -242,9 +243,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -311,7 +314,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.18.8/net/socket.c after/vanilla/linux-2.6.18.8/net/socket.c
--- before/vanilla/linux-2.6.18.8/net/socket.c	2010-07-20 16:27:06.000000000 +0900
+++ after/vanilla/linux-2.6.18.8/net/socket.c	2010-07-20 12:57:32.000000000 +0900
@@ -1414,6 +1414,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc())) 
 		goto out_put;
@@ -1446,10 +1447,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
diff -ur before/vanilla/linux-2.6.19.7/net/ipv4/raw.c after/vanilla/linux-2.6.19.7/net/ipv4/raw.c
--- before/vanilla/linux-2.6.19.7/net/ipv4/raw.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.19.7/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -595,12 +595,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.19.7/net/ipv4/udp.c after/vanilla/linux-2.6.19.7/net/ipv4/udp.c
--- before/vanilla/linux-2.6.19.7/net/ipv4/udp.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.19.7/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -826,6 +826,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
   	int copied, err;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -840,9 +841,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -891,7 +894,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.19.7/net/ipv6/raw.c after/vanilla/linux-2.6.19.7/net/ipv6/raw.c
--- before/vanilla/linux-2.6.19.7/net/ipv6/raw.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.19.7/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -412,12 +412,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.19.7/net/ipv6/udp.c after/vanilla/linux-2.6.19.7/net/ipv6/udp.c
--- before/vanilla/linux-2.6.19.7/net/ipv6/udp.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.19.7/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -155,6 +155,7 @@
   	struct sk_buff *skb;
 	size_t copied;
   	int err;
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -166,9 +167,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -235,7 +238,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.19.7/net/socket.c after/vanilla/linux-2.6.19.7/net/socket.c
--- before/vanilla/linux-2.6.19.7/net/socket.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.19.7/net/socket.c	2010-07-20 12:57:15.000000000 +0900
@@ -1351,6 +1351,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1383,10 +1384,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.20.21/net/ipv4/raw.c after/vanilla/linux-2.6.20.21/net/ipv4/raw.c
--- before/vanilla/linux-2.6.20.21/net/ipv4/raw.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.20.21/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -595,12 +595,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.20.21/net/ipv4/udp.c after/vanilla/linux-2.6.20.21/net/ipv4/udp.c
--- before/vanilla/linux-2.6.20.21/net/ipv4/udp.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.20.21/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -815,6 +815,7 @@
   	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
   	struct sk_buff *skb;
 	int copied, err, copy_only, is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -829,9 +830,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
   
   	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -890,7 +893,8 @@
   	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.20.21/net/ipv6/raw.c after/vanilla/linux-2.6.20.21/net/ipv6/raw.c
--- before/vanilla/linux-2.6.20.21/net/ipv6/raw.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.20.21/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -412,12 +412,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
   	if (copied > len) {
diff -ur before/vanilla/linux-2.6.20.21/net/ipv6/udp.c after/vanilla/linux-2.6.20.21/net/ipv6/udp.c
--- before/vanilla/linux-2.6.20.21/net/ipv6/udp.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.20.21/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -124,6 +124,7 @@
   	struct sk_buff *skb;
 	size_t copied;
 	int err, copy_only, is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
   	if (addr_len)
   		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,9 +136,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
  	copied = skb->len - sizeof(struct udphdr);
   	if (copied > len) {
@@ -210,7 +213,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.20.21/net/socket.c after/vanilla/linux-2.6.20.21/net/socket.c
--- before/vanilla/linux-2.6.20.21/net/socket.c	2010-07-20 16:27:07.000000000 +0900
+++ after/vanilla/linux-2.6.20.21/net/socket.c	2010-07-20 12:56:57.000000000 +0900
@@ -1358,6 +1358,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1390,10 +1391,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.21.7/net/ipv4/raw.c after/vanilla/linux-2.6.21.7/net/ipv4/raw.c
--- before/vanilla/linux-2.6.21.7/net/ipv4/raw.c	2010-07-20 16:27:08.000000000 +0900
+++ after/vanilla/linux-2.6.21.7/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -595,12 +595,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.21.7/net/ipv4/udp.c after/vanilla/linux-2.6.21.7/net/ipv4/udp.c
--- before/vanilla/linux-2.6.21.7/net/ipv4/udp.c	2010-07-20 16:27:08.000000000 +0900
+++ after/vanilla/linux-2.6.21.7/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -816,6 +816,7 @@
 	struct sockaddr_in *sin = (struct sockaddr_in *)msg->msg_name;
 	struct sk_buff *skb;
 	int copied, err, copy_only, is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -830,9 +831,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -891,7 +894,8 @@
 	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.21.7/net/ipv6/raw.c after/vanilla/linux-2.6.21.7/net/ipv6/raw.c
--- before/vanilla/linux-2.6.21.7/net/ipv6/raw.c	2010-07-20 16:27:08.000000000 +0900
+++ after/vanilla/linux-2.6.21.7/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -411,12 +411,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.21.7/net/ipv6/udp.c after/vanilla/linux-2.6.21.7/net/ipv6/udp.c
--- before/vanilla/linux-2.6.21.7/net/ipv6/udp.c	2010-07-20 16:27:08.000000000 +0900
+++ after/vanilla/linux-2.6.21.7/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -123,6 +123,7 @@
 	struct sk_buff *skb;
 	size_t copied;
 	int err, copy_only, is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -134,9 +135,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	copied = skb->len - sizeof(struct udphdr);
 	if (copied > len) {
@@ -209,7 +212,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.21.7/net/socket.c after/vanilla/linux-2.6.21.7/net/socket.c
--- before/vanilla/linux-2.6.21.7/net/socket.c	2010-07-20 16:27:08.000000000 +0900
+++ after/vanilla/linux-2.6.21.7/net/socket.c	2010-07-20 12:56:38.000000000 +0900
@@ -1372,6 +1372,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1404,10 +1405,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.22.19/net/ipv4/raw.c after/vanilla/linux-2.6.22.19/net/ipv4/raw.c
--- before/vanilla/linux-2.6.22.19/net/ipv4/raw.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.22.19/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -597,12 +597,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.22.19/net/ipv4/udp.c after/vanilla/linux-2.6.22.19/net/ipv4/udp.c
--- before/vanilla/linux-2.6.22.19/net/ipv4/udp.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.22.19/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -823,6 +823,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -837,9 +838,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -895,7 +898,8 @@
 	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.22.19/net/ipv6/raw.c after/vanilla/linux-2.6.22.19/net/ipv6/raw.c
--- before/vanilla/linux-2.6.22.19/net/ipv6/raw.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.22.19/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -412,12 +412,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.22.19/net/ipv6/udp.c after/vanilla/linux-2.6.22.19/net/ipv6/udp.c
--- before/vanilla/linux-2.6.22.19/net/ipv6/udp.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.22.19/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -124,6 +124,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,9 +136,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -212,7 +215,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.22.19/net/socket.c after/vanilla/linux-2.6.22.19/net/socket.c
--- before/vanilla/linux-2.6.22.19/net/socket.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.22.19/net/socket.c	2010-07-20 12:56:20.000000000 +0900
@@ -1407,6 +1407,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1439,10 +1440,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.23.17/net/ipv4/raw.c after/vanilla/linux-2.6.23.17/net/ipv4/raw.c
--- before/vanilla/linux-2.6.23.17/net/ipv4/raw.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.23.17/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -599,12 +599,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.23.17/net/ipv4/udp.c after/vanilla/linux-2.6.23.17/net/ipv4/udp.c
--- before/vanilla/linux-2.6.23.17/net/ipv4/udp.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.23.17/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -824,6 +824,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -838,9 +839,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -896,7 +899,8 @@
 	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.23.17/net/ipv6/raw.c after/vanilla/linux-2.6.23.17/net/ipv6/raw.c
--- before/vanilla/linux-2.6.23.17/net/ipv6/raw.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.23.17/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -440,12 +440,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.23.17/net/ipv6/udp.c after/vanilla/linux-2.6.23.17/net/ipv6/udp.c
--- before/vanilla/linux-2.6.23.17/net/ipv6/udp.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.23.17/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -124,6 +124,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,9 +136,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -212,7 +215,8 @@
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT) {
-		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+		if (update_stat)
+			UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 		return -EAGAIN;
 	}
 	goto try_again;
diff -ur before/vanilla/linux-2.6.23.17/net/socket.c after/vanilla/linux-2.6.23.17/net/socket.c
--- before/vanilla/linux-2.6.23.17/net/socket.c	2010-07-20 16:27:09.000000000 +0900
+++ after/vanilla/linux-2.6.23.17/net/socket.c	2010-07-20 12:56:03.000000000 +0900
@@ -1406,6 +1406,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1438,10 +1439,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.24.7/net/ipv4/raw.c after/vanilla/linux-2.6.24.7/net/ipv4/raw.c
--- before/vanilla/linux-2.6.24.7/net/ipv4/raw.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.24.7/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -603,12 +603,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.24.7/net/ipv4/udp.c after/vanilla/linux-2.6.24.7/net/ipv4/udp.c
--- before/vanilla/linux-2.6.24.7/net/ipv4/udp.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.24.7/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -831,6 +831,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -845,9 +846,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -903,7 +906,8 @@
 	return err;
 
 csum_copy_err:
-	UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP_INC_STATS_BH(UDP_MIB_INERRORS, is_udplite);
 
 	skb_kill_datagram(sk, skb, flags);
 
diff -ur before/vanilla/linux-2.6.24.7/net/ipv6/raw.c after/vanilla/linux-2.6.24.7/net/ipv6/raw.c
--- before/vanilla/linux-2.6.24.7/net/ipv6/raw.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.24.7/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -441,12 +441,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.24.7/net/ipv6/udp.c after/vanilla/linux-2.6.24.7/net/ipv6/udp.c
--- before/vanilla/linux-2.6.24.7/net/ipv6/udp.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.24.7/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -124,6 +124,7 @@
 	unsigned int ulen, copied;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -135,9 +136,11 @@
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -209,7 +212,8 @@
 	return err;
 
 csum_copy_err:
-	UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
+	if (update_stat)
+		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	skb_kill_datagram(sk, skb, flags);
 
 	if (flags & MSG_DONTWAIT)
diff -ur before/vanilla/linux-2.6.24.7/net/socket.c after/vanilla/linux-2.6.24.7/net/socket.c
--- before/vanilla/linux-2.6.24.7/net/socket.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.24.7/net/socket.c	2010-07-20 12:55:47.000000000 +0900
@@ -1411,6 +1411,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1443,10 +1444,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.25.20/net/ipv4/raw.c after/vanilla/linux-2.6.25.20/net/ipv4/raw.c
--- before/vanilla/linux-2.6.25.20/net/ipv4/raw.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.25.20/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -666,12 +666,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.25.20/net/ipv4/udp.c after/vanilla/linux-2.6.25.20/net/ipv4/udp.c
--- before/vanilla/linux-2.6.25.20/net/ipv4/udp.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.25.20/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -852,6 +852,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -867,9 +868,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -931,7 +934,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.25.20/net/ipv6/raw.c after/vanilla/linux-2.6.25.20/net/ipv6/raw.c
--- before/vanilla/linux-2.6.25.20/net/ipv6/raw.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.25.20/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -480,12 +480,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.25.20/net/ipv6/udp.c after/vanilla/linux-2.6.25.20/net/ipv6/udp.c
--- before/vanilla/linux-2.6.25.20/net/ipv6/udp.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.25.20/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -126,6 +126,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -138,9 +139,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -218,7 +221,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.25.20/net/socket.c after/vanilla/linux-2.6.25.20/net/socket.c
--- before/vanilla/linux-2.6.25.20/net/socket.c	2010-07-20 16:27:10.000000000 +0900
+++ after/vanilla/linux-2.6.25.20/net/socket.c	2010-07-20 12:55:28.000000000 +0900
@@ -1425,6 +1425,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1457,10 +1458,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.26.8/net/ipv4/raw.c after/vanilla/linux-2.6.26.8/net/ipv4/raw.c
--- before/vanilla/linux-2.6.26.8/net/ipv4/raw.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.26.8/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -665,12 +665,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.26.8/net/ipv4/udp.c after/vanilla/linux-2.6.26.8/net/ipv4/udp.c
--- before/vanilla/linux-2.6.26.8/net/ipv4/udp.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.26.8/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -846,6 +846,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -861,9 +862,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -925,7 +928,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.26.8/net/ipv6/raw.c after/vanilla/linux-2.6.26.8/net/ipv6/raw.c
--- before/vanilla/linux-2.6.26.8/net/ipv6/raw.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.26.8/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -465,12 +465,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.26.8/net/ipv6/udp.c after/vanilla/linux-2.6.26.8/net/ipv6/udp.c
--- before/vanilla/linux-2.6.26.8/net/ipv6/udp.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.26.8/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -126,6 +126,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -138,9 +139,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -218,7 +221,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.26.8/net/socket.c after/vanilla/linux-2.6.26.8/net/socket.c
--- before/vanilla/linux-2.6.26.8/net/socket.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.26.8/net/socket.c	2010-07-20 12:55:03.000000000 +0900
@@ -1425,6 +1425,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1457,10 +1458,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
diff -ur before/vanilla/linux-2.6.27.48/net/ipv4/raw.c after/vanilla/linux-2.6.27.48/net/ipv4/raw.c
--- before/vanilla/linux-2.6.27.48/net/ipv4/raw.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.27.48/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.27.48/net/ipv4/udp.c after/vanilla/linux-2.6.27.48/net/ipv4/udp.c
--- before/vanilla/linux-2.6.27.48/net/ipv4/udp.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.27.48/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -847,6 +847,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -862,9 +863,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -927,7 +930,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.27.48/net/ipv6/raw.c after/vanilla/linux-2.6.27.48/net/ipv6/raw.c
--- before/vanilla/linux-2.6.27.48/net/ipv6/raw.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.27.48/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.27.48/net/ipv6/udp.c after/vanilla/linux-2.6.27.48/net/ipv6/udp.c
--- before/vanilla/linux-2.6.27.48/net/ipv6/udp.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.27.48/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -124,6 +124,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -136,9 +137,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -217,7 +220,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP6_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.27.48/net/socket.c after/vanilla/linux-2.6.27.48/net/socket.c
--- before/vanilla/linux-2.6.27.48/net/socket.c	2010-07-20 16:27:11.000000000 +0900
+++ after/vanilla/linux-2.6.27.48/net/socket.c	2010-07-20 12:54:41.000000000 +0900
@@ -1458,6 +1458,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1490,10 +1491,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.28.10/net/ipv4/raw.c after/vanilla/linux-2.6.28.10/net/ipv4/raw.c
--- before/vanilla/linux-2.6.28.10/net/ipv4/raw.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.28.10/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.28.10/net/ipv4/udp.c after/vanilla/linux-2.6.28.10/net/ipv4/udp.c
--- before/vanilla/linux-2.6.28.10/net/ipv4/udp.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.28.10/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -829,6 +829,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -844,9 +845,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -909,7 +912,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.28.10/net/ipv6/raw.c after/vanilla/linux-2.6.28.10/net/ipv6/raw.c
--- before/vanilla/linux-2.6.28.10/net/ipv6/raw.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.28.10/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.28.10/net/ipv6/udp.c after/vanilla/linux-2.6.28.10/net/ipv6/udp.c
--- before/vanilla/linux-2.6.28.10/net/ipv6/udp.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.28.10/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -140,6 +140,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -152,9 +153,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -240,7 +243,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.28.10/net/socket.c after/vanilla/linux-2.6.28.10/net/socket.c
--- before/vanilla/linux-2.6.28.10/net/socket.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.28.10/net/socket.c	2010-07-20 12:54:23.000000000 +0900
@@ -1457,6 +1457,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1489,10 +1490,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.29.6/net/ipv4/raw.c after/vanilla/linux-2.6.29.6/net/ipv4/raw.c
--- before/vanilla/linux-2.6.29.6/net/ipv4/raw.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.29.6/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -663,12 +663,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.29.6/net/ipv4/udp.c after/vanilla/linux-2.6.29.6/net/ipv4/udp.c
--- before/vanilla/linux-2.6.29.6/net/ipv4/udp.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.29.6/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -884,6 +884,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -899,9 +900,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -964,7 +967,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.29.6/net/ipv6/raw.c after/vanilla/linux-2.6.29.6/net/ipv6/raw.c
--- before/vanilla/linux-2.6.29.6/net/ipv6/raw.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.29.6/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.29.6/net/ipv6/udp.c after/vanilla/linux-2.6.29.6/net/ipv6/udp.c
--- before/vanilla/linux-2.6.29.6/net/ipv6/udp.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.29.6/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -169,6 +169,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -181,9 +182,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -269,7 +272,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.29.6/net/socket.c after/vanilla/linux-2.6.29.6/net/socket.c
--- before/vanilla/linux-2.6.29.6/net/socket.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.29.6/net/socket.c	2010-07-20 12:54:06.000000000 +0900
@@ -1449,6 +1449,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1481,10 +1482,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.30.10/net/ipv4/raw.c after/vanilla/linux-2.6.30.10/net/ipv4/raw.c
--- before/vanilla/linux-2.6.30.10/net/ipv4/raw.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.30.10/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -664,12 +664,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.30.10/net/ipv4/udp.c after/vanilla/linux-2.6.30.10/net/ipv4/udp.c
--- before/vanilla/linux-2.6.30.10/net/ipv4/udp.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.30.10/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -888,6 +888,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -903,9 +904,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -968,7 +971,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.30.10/net/ipv6/raw.c after/vanilla/linux-2.6.30.10/net/ipv6/raw.c
--- before/vanilla/linux-2.6.30.10/net/ipv6/raw.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.30.10/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.30.10/net/ipv6/udp.c after/vanilla/linux-2.6.30.10/net/ipv6/udp.c
--- before/vanilla/linux-2.6.30.10/net/ipv6/udp.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.30.10/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -201,6 +201,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -213,9 +214,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -301,7 +304,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.30.10/net/socket.c after/vanilla/linux-2.6.30.10/net/socket.c
--- before/vanilla/linux-2.6.30.10/net/socket.c	2010-07-20 16:27:12.000000000 +0900
+++ after/vanilla/linux-2.6.30.10/net/socket.c	2010-07-20 12:53:38.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.31.14/net/ipv4/raw.c after/vanilla/linux-2.6.31.14/net/ipv4/raw.c
--- before/vanilla/linux-2.6.31.14/net/ipv4/raw.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.31.14/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -664,12 +664,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.31.14/net/ipv4/udp.c after/vanilla/linux-2.6.31.14/net/ipv4/udp.c
--- before/vanilla/linux-2.6.31.14/net/ipv4/udp.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.31.14/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -920,6 +920,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -935,9 +936,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -998,7 +1001,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.31.14/net/ipv6/raw.c after/vanilla/linux-2.6.31.14/net/ipv6/raw.c
--- before/vanilla/linux-2.6.31.14/net/ipv6/raw.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.31.14/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.31.14/net/ipv6/udp.c after/vanilla/linux-2.6.31.14/net/ipv6/udp.c
--- before/vanilla/linux-2.6.31.14/net/ipv6/udp.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.31.14/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.31.14/net/socket.c after/vanilla/linux-2.6.31.14/net/socket.c
--- before/vanilla/linux-2.6.31.14/net/socket.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.31.14/net/socket.c	2010-07-20 12:53:12.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.32.16/net/ipv4/raw.c after/vanilla/linux-2.6.32.16/net/ipv4/raw.c
--- before/vanilla/linux-2.6.32.16/net/ipv4/raw.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.32.16/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -679,12 +679,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.32.16/net/ipv4/udp.c after/vanilla/linux-2.6.32.16/net/ipv4/udp.c
--- before/vanilla/linux-2.6.32.16/net/ipv4/udp.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.32.16/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -931,6 +931,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -946,9 +947,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -1010,7 +1013,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.32.16/net/ipv6/raw.c after/vanilla/linux-2.6.32.16/net/ipv6/raw.c
--- before/vanilla/linux-2.6.32.16/net/ipv6/raw.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.32.16/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -463,12 +463,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.32.16/net/ipv6/udp.c after/vanilla/linux-2.6.32.16/net/ipv6/udp.c
--- before/vanilla/linux-2.6.32.16/net/ipv6/udp.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.32.16/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -200,6 +200,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -212,9 +213,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -298,7 +301,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.32.16/net/socket.c after/vanilla/linux-2.6.32.16/net/socket.c
--- before/vanilla/linux-2.6.32.16/net/socket.c	2010-07-20 16:27:13.000000000 +0900
+++ after/vanilla/linux-2.6.32.16/net/socket.c	2010-07-20 12:52:45.000000000 +0900
@@ -1498,6 +1498,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1530,10 +1531,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.33.6/net/ipv4/raw.c after/vanilla/linux-2.6.33.6/net/ipv4/raw.c
--- before/vanilla/linux-2.6.33.6/net/ipv4/raw.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.33.6/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -677,12 +677,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.33.6/net/ipv4/udp.c after/vanilla/linux-2.6.33.6/net/ipv4/udp.c
--- before/vanilla/linux-2.6.33.6/net/ipv4/udp.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.33.6/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -1122,6 +1122,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -1137,9 +1138,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -1201,7 +1204,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.33.6/net/ipv6/raw.c after/vanilla/linux-2.6.33.6/net/ipv6/raw.c
--- before/vanilla/linux-2.6.33.6/net/ipv6/raw.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.33.6/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -460,12 +460,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.33.6/net/ipv6/udp.c after/vanilla/linux-2.6.33.6/net/ipv6/udp.c
--- before/vanilla/linux-2.6.33.6/net/ipv6/udp.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.33.6/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -327,6 +327,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -339,9 +340,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
@@ -425,7 +428,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.33.6/net/socket.c after/vanilla/linux-2.6.33.6/net/socket.c
--- before/vanilla/linux-2.6.33.6/net/socket.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.33.6/net/socket.c	2010-07-20 12:52:21.000000000 +0900
@@ -1492,6 +1492,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1520,10 +1521,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.34.1/net/ipv4/raw.c after/vanilla/linux-2.6.34.1/net/ipv4/raw.c
--- before/vanilla/linux-2.6.34.1/net/ipv4/raw.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.34.1/net/ipv4/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -676,12 +676,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.34.1/net/ipv4/udp.c after/vanilla/linux-2.6.34.1/net/ipv4/udp.c
--- before/vanilla/linux-2.6.34.1/net/ipv4/udp.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.34.1/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -1123,6 +1123,7 @@
 	int peeked;
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -1138,9 +1139,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -1201,7 +1204,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	release_sock(sk);
 
diff -ur before/vanilla/linux-2.6.34.1/net/ipv6/raw.c after/vanilla/linux-2.6.34.1/net/ipv6/raw.c
--- before/vanilla/linux-2.6.34.1/net/ipv6/raw.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.34.1/net/ipv6/raw.c	2010-07-20 12:32:08.000000000 +0900
@@ -461,12 +461,14 @@
 	if (flags & MSG_ERRQUEUE)
 		return ipv6_recv_error(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.34.1/net/ipv6/udp.c after/vanilla/linux-2.6.34.1/net/ipv6/udp.c
--- before/vanilla/linux-2.6.34.1/net/ipv6/udp.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.34.1/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -328,6 +328,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -340,9 +341,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -425,7 +428,7 @@
 
 csum_copy_err:
 	lock_sock(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.34.1/net/socket.c after/vanilla/linux-2.6.34.1/net/socket.c
--- before/vanilla/linux-2.6.34.1/net/socket.c	2010-07-20 16:27:14.000000000 +0900
+++ after/vanilla/linux-2.6.34.1/net/socket.c	2010-07-20 12:51:53.000000000 +0900
@@ -1493,6 +1493,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1521,10 +1522,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
diff -ur before/vanilla/linux-2.6.35-rc5/net/ipv4/raw.c after/vanilla/linux-2.6.35-rc5/net/ipv4/raw.c
--- before/vanilla/linux-2.6.35-rc5/net/ipv4/raw.c	2010-07-20 16:27:15.000000000 +0900
+++ after/vanilla/linux-2.6.35-rc5/net/ipv4/raw.c	2010-07-20 10:51:02.000000000 +0900
@@ -676,12 +676,14 @@
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -ur before/vanilla/linux-2.6.35-rc5/net/ipv4/udp.c after/vanilla/linux-2.6.35-rc5/net/ipv4/udp.c
--- before/vanilla/linux-2.6.35-rc5/net/ipv4/udp.c	2010-07-20 16:27:15.000000000 +0900
+++ after/vanilla/linux-2.6.35-rc5/net/ipv4/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -1125,6 +1125,7 @@
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	bool slow;
+	_Bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -1140,9 +1141,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -1203,7 +1206,7 @@
 
 csum_copy_err:
 	slow = lock_sock_fast(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	unlock_sock_fast(sk, slow);
 
diff -ur before/vanilla/linux-2.6.35-rc5/net/ipv6/raw.c after/vanilla/linux-2.6.35-rc5/net/ipv6/raw.c
--- before/vanilla/linux-2.6.35-rc5/net/ipv6/raw.c	2010-07-20 16:27:15.000000000 +0900
+++ after/vanilla/linux-2.6.35-rc5/net/ipv6/raw.c	2010-07-20 10:51:02.000000000 +0900
@@ -464,12 +464,14 @@
 	if (np->rxpmtu && np->rxopt.bits.rxpmtu)
 		return ipv6_recv_rxpmtu(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -ur before/vanilla/linux-2.6.35-rc5/net/ipv6/udp.c after/vanilla/linux-2.6.35-rc5/net/ipv6/udp.c
--- before/vanilla/linux-2.6.35-rc5/net/ipv6/udp.c	2010-07-20 16:27:15.000000000 +0900
+++ after/vanilla/linux-2.6.35-rc5/net/ipv6/udp.c	2010-07-20 14:35:04.000000000 +0900
@@ -329,6 +329,7 @@
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
 	bool slow;
+	_Bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -344,9 +345,11 @@
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = 0;
+		goto csum_copy_err;
+	}
+	update_stat = 1;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -429,7 +432,7 @@
 
 csum_copy_err:
 	slow = lock_sock_fast(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -ur before/vanilla/linux-2.6.35-rc5/net/socket.c after/vanilla/linux-2.6.35-rc5/net/socket.c
--- before/vanilla/linux-2.6.35-rc5/net/socket.c	2010-07-20 16:27:15.000000000 +0900
+++ after/vanilla/linux-2.6.35-rc5/net/socket.c	2010-07-20 13:04:53.000000000 +0900
@@ -1473,6 +1473,7 @@
 	if (!sock)
 		goto out;
 
+retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1501,10 +1502,10 @@
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
