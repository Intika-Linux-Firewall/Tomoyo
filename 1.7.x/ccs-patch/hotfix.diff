diff -ur --exclude .svn --exclude patches --exclude specs tags/ccs-patch/1.7.0/README.ccs trunk/1.7.x/ccs-patch/README.ccs
--- tags/ccs-patch/1.7.0/README.ccs	2009-09-03 21:42:45.000000000 +0900
+++ trunk/1.7.x/ccs-patch/README.ccs	2009-09-06 11:15:19.000000000 +0900
@@ -2093,3 +2093,17 @@
       do_execve() succeeds." made on 2008/10/07.
 
 Version 1.7.0 2008/09/03   Feature enhancement release.
+
+Fix 2008/09/04
+
+    @ Fix wrong ccs_profile() calls.
+
+      I can't call ccs_profile() for profile existence test because
+      ccs_profile() never returns NULL.
+
+Fix 2008/09/06
+
+    @ Fix wrong error code in ccs_try_alt_exec().
+
+      ccs_try_alt_exec() was returning ENOMEM when kmalloc() failed.
+      It needs to return -ENOMEM to fail.
diff -ur --exclude .svn --exclude patches --exclude specs tags/ccs-patch/1.7.0/security/ccsecurity/domain.c trunk/1.7.x/ccs-patch/security/ccsecurity/domain.c
--- tags/ccs-patch/1.7.0/security/ccsecurity/domain.c	2009-09-03 21:42:45.000000000 +0900
+++ trunk/1.7.x/ccs-patch/security/ccsecurity/domain.c	2009-09-06 11:11:32.000000000 +0900
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.7.0   2009/09/03
+ * Version: 1.7.0   2009/09/06
  *
  * This file is applicable to both 2.4.30 and 2.6.11 and later.
  * See README.ccs for ChangeLog.
@@ -1056,7 +1056,7 @@
 		int len = ee->handler->total_len + 1;
 		char *cp = kmalloc(len, GFP_KERNEL);
 		if (!cp) {
-			retval = ENOMEM;
+			retval = -ENOMEM;
 			goto out;
 		}
 		ee->handler_path = cp;
@@ -1165,7 +1165,7 @@
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 23) && defined(CONFIG_MMU)
 	if (get_user_pages(current, bprm->mm, pos, 1, 0, 1, &page, NULL) <= 0)
 		return false;
-#elif defined(RHEL_MAJOR) && RHEL_MAJOR == 5 && defined(RHEL_MINOR) && RHEL_MINOR == 3 && defined(CONFIG_MMU)
+#elif defined(RHEL_MAJOR) && RHEL_MAJOR == 5 && defined(RHEL_MINOR) && RHEL_MINOR >= 3 && defined(CONFIG_MMU)
 	if (get_user_pages(current, bprm->mm, pos, 1, 0, 1, &page, NULL) <= 0)
 		return false;
 #else
@@ -1186,7 +1186,7 @@
 	/* Same with put_arg_page(page) in fs/exec.c */
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 23) && defined(CONFIG_MMU)
 	put_page(page);
-#elif defined(RHEL_MAJOR) && RHEL_MAJOR == 5 && defined(RHEL_MINOR) && RHEL_MINOR == 3 && defined(CONFIG_MMU)
+#elif defined(RHEL_MAJOR) && RHEL_MAJOR == 5 && defined(RHEL_MINOR) && RHEL_MINOR >= 3 && defined(CONFIG_MMU)
 	put_page(page);
 #endif
 	return true;
diff -ur --exclude .svn --exclude patches --exclude specs tags/ccs-patch/1.7.0/security/ccsecurity/internal.h trunk/1.7.x/ccs-patch/security/ccsecurity/internal.h
--- tags/ccs-patch/1.7.0/security/ccsecurity/internal.h	2009-09-03 21:42:45.000000000 +0900
+++ trunk/1.7.x/ccs-patch/security/ccsecurity/internal.h	2009-09-04 20:33:20.000000000 +0900
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.7.0   2009/09/03
+ * Version: 1.7.0   2009/09/04
  *
  * This file is applicable to both 2.4.30 and 2.6.11 and later.
  * See README.ccs for ChangeLog.
@@ -991,6 +991,7 @@
 struct ccs_path_group *ccs_get_path_group(const char *group_name);
 struct ccs_profile *ccs_profile(const u8 profile);
 u8 ccs_parse_ulong(unsigned long *result, char **str);
+void ccs_check_profile(void);
 void ccs_fill_path_info(struct ccs_path_info *ptr);
 void ccs_load_policy(const char *filename);
 void ccs_memory_free(const void *ptr, size_t size);
diff -ur --exclude .svn --exclude patches --exclude specs tags/ccs-patch/1.7.0/security/ccsecurity/load_policy.c trunk/1.7.x/ccs-patch/security/ccsecurity/load_policy.c
--- tags/ccs-patch/1.7.0/security/ccsecurity/load_policy.c	2009-09-03 21:42:45.000000000 +0900
+++ trunk/1.7.x/ccs-patch/security/ccsecurity/load_policy.c	2009-09-06 11:11:56.000000000 +0900
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.7.0   2009/09/03
+ * Version: 1.7.0   2009/09/06
  *
  * This file is applicable to both 2.4.30 and 2.6.11 and later.
  * See README.ccs for ChangeLog.
@@ -177,17 +177,7 @@
 		spin_unlock_irq(&task->sigmask_lock);
 	}
 #endif
-	printk(KERN_INFO "CCSecurity: 1.7.0   2009/09/03\n");
+	printk(KERN_INFO "CCSecurity: 1.7.0+   2009/09/06\n");
 	printk(KERN_INFO "Mandatory Access Control activated.\n");
-	ccs_policy_loaded = true;
-	{ /* Check all profiles currently assigned to domains are defined. */
-		struct ccs_domain_info *domain;
-		list_for_each_entry_rcu(domain, &ccs_domain_list, list) {
-			const u8 profile = domain->profile;
-			if (ccs_profile(profile))
-				continue;
-			panic("Profile %u (used by '%s') not defined.\n",
-			      profile, domain->domainname->name);
-		}
-	}
+	ccs_check_profile();
 }
diff -ur --exclude .svn --exclude patches --exclude specs tags/ccs-patch/1.7.0/security/ccsecurity/policy_io.c trunk/1.7.x/ccs-patch/security/ccsecurity/policy_io.c
--- tags/ccs-patch/1.7.0/security/ccsecurity/policy_io.c	2009-09-03 21:42:45.000000000 +0900
+++ trunk/1.7.x/ccs-patch/security/ccsecurity/policy_io.c	2009-09-04 20:33:20.000000000 +0900
@@ -3,7 +3,7 @@
  *
  * Copyright (C) 2005-2009  NTT DATA CORPORATION
  *
- * Version: 1.7.0   2009/09/03
+ * Version: 1.7.0   2009/09/04
  *
  * This file is applicable to both 2.4.30 and 2.6.11 and later.
  * See README.ccs for ChangeLog.
@@ -283,11 +283,27 @@
 }
 
 /**
+ * ccs_check_profile - Check all profiles currently assigned to domains are defined.
+ */
+void ccs_check_profile(void)
+{
+	struct ccs_domain_info *domain;
+	ccs_policy_loaded = true;
+	list_for_each_entry_rcu(domain, &ccs_domain_list, list) {
+		const u8 profile = domain->profile;
+		if (ccs_profile_ptr[profile])
+			continue;
+		panic("Profile %u (used by '%s') not defined.\n",
+		      profile, domain->domainname->name);
+	}
+}
+
+/**
  * ccs_profile - Find a profile.
  *
  * @profile: Profile number to find.
  *
- * Returns pointer to "struct ccs_profile" on success, NULL otherwise.
+ * Returns pointer to "struct ccs_profile".
  */
 struct ccs_profile *ccs_profile(const u8 profile)
 {
@@ -917,7 +933,7 @@
 
 	if (sscanf(data, CCS_KEYWORD_USE_PROFILE "%u", &profile) == 1
 	    && profile < CCS_MAX_PROFILES) {
-		if (ccs_profile(profile))
+		if (!ccs_policy_loaded || ccs_profile_ptr[(u8) profile])
 			domain->profile = (u8) profile;
 		return 0;
 	}
@@ -1785,7 +1801,7 @@
 	if (profile >= CCS_MAX_PROFILES)
 		return -EINVAL;
 	domain = ccs_find_domain(cp + 1);
-	if (domain && ccs_profile(profile))
+	if (domain && (!ccs_policy_loaded || ccs_profile_ptr[(u8) profile]))
 		domain->profile = (u8) profile;
 	return 0;
 }
