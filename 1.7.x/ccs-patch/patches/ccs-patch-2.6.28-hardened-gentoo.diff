This is TOMOYO Linux patch for Hardened Gentoo.

Source code for this patch is "emerge hardened-sources"
---
 fs/attr.c                       |    3 +++
 fs/compat.c                     |    3 ++-
 fs/compat_ioctl.c               |    7 +++++++
 fs/exec.c                       |   10 +++++++++-
 fs/fcntl.c                      |    4 ++++
 fs/ioctl.c                      |    5 +++++
 fs/namei.c                      |   37 +++++++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   23 +++++++++++++++++++++++
 fs/open.c                       |   27 +++++++++++++++++++++++++++
 fs/proc/version.c               |    7 +++++++
 include/linux/init_task.h       |    9 +++++++++
 include/linux/sched.h           |    6 ++++++
 kernel/compat.c                 |    3 +++
 kernel/kexec.c                  |    3 +++
 kernel/kmod.c                   |    5 +++++
 kernel/module.c                 |    5 +++++
 kernel/ptrace.c                 |    5 +++++
 kernel/sched.c                  |    3 +++
 kernel/signal.c                 |    9 +++++++++
 kernel/sys.c                    |   11 +++++++++++
 kernel/sysctl.c                 |    4 ++++
 kernel/time.c                   |    5 +++++
 kernel/time/ntp.c               |    6 ++++++
 net/ipv4/inet_connection_sock.c |    3 +++
 net/ipv4/inet_hashtables.c      |    3 +++
 net/ipv4/raw.c                  |    4 ++++
 net/ipv4/udp.c                  |    8 +++++++-
 net/ipv6/raw.c                  |    4 ++++
 net/ipv6/udp.c                  |    4 ++++
 net/socket.c                    |   23 +++++++++++++++++++++++
 net/unix/af_unix.c              |    4 ++++
 security/Kconfig                |    2 ++
 security/Makefile               |    3 +++
 33 files changed, 255 insertions(+), 3 deletions(-)

--- linux-2.6.28-hardened-r7.orig/fs/attr.c
+++ linux-2.6.28-hardened-r7/fs/attr.c
@@ -14,6 +14,7 @@
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 /* Taken over from the old code... */
 
@@ -160,6 +161,8 @@ int notify_change(struct dentry * dentry
 		return 0;
 
 	error = security_inode_setattr(dentry, attr);
+	if (!error)
+		error = ccs_setattr_permission(dentry, attr);
 	if (error)
 		return error;
 
--- linux-2.6.28-hardened-r7.orig/fs/compat.c
+++ linux-2.6.28-hardened-r7/fs/compat.c
@@ -56,6 +56,7 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 int compat_log = 1;
 
@@ -1472,7 +1473,7 @@ int compat_do_execve(char * filename,
 
 	gr_set_proc_label(file->f_dentry, file->f_vfsmnt);
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 #ifdef CONFIG_GRKERNSEC
 		if (old_exec_file)
--- linux-2.6.28-hardened-r7.orig/fs/compat_ioctl.c
+++ linux-2.6.28-hardened-r7/fs/compat_ioctl.c
@@ -113,6 +113,7 @@
 #ifdef CONFIG_SPARC
 #include <asm/fbio.h>
 #endif
+#include <linux/ccsecurity.h>
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -2788,6 +2789,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -2812,6 +2815,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.28-hardened-r7.orig/fs/exec.c
+++ linux-2.6.28-hardened-r7/fs/exec.c
@@ -72,6 +72,8 @@ void (*pax_set_initial_flags_func)(struc
 EXPORT_SYMBOL(pax_set_initial_flags_func);
 #endif
 
+#include <linux/ccsecurity.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 int suid_dumpable = 0;
@@ -140,6 +142,9 @@ SYSCALL_DEFINE1(uselib, const char __use
 	error = vfs_permission(&nd, MAY_READ | MAY_EXEC | MAY_OPEN);
 	if (error)
 		goto exit;
+	error = ccs_uselib_permission(nd.path.dentry, nd.path.mnt);
+	if (error)
+		goto exit;
 
 	file = nameidata_to_filp(&nd, O_RDONLY|O_LARGEFILE);
 	error = PTR_ERR(file);
@@ -710,6 +715,9 @@ struct file *open_exec(const char *name)
 	err = vfs_permission(&nd, MAY_EXEC | MAY_OPEN);
 	if (err)
 		goto out_path_put;
+	err = ccs_open_exec_permission(nd.path.dentry, nd.path.mnt);
+	if (err)
+		goto out_path_put;
 
 	file = nameidata_to_filp(&nd, O_RDONLY|O_LARGEFILE);
 	if (IS_ERR(file))
@@ -1413,7 +1421,7 @@ int do_execve(char * filename,
 		goto out_fail;
 
 	current->flags &= ~PF_KTHREAD;
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 #ifdef CONFIG_GRKERNSEC
 		if (old_exec_file)
--- linux-2.6.28-hardened-r7.orig/fs/fcntl.c
+++ linux-2.6.28-hardened-r7/fs/fcntl.c
@@ -24,6 +24,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 void set_close_on_exec(unsigned int fd, int flag)
 {
@@ -155,6 +156,9 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) && ccs_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (!is_owner_or_cap(inode))
--- linux-2.6.28-hardened-r7.orig/fs/ioctl.c
+++ linux-2.6.28-hardened-r7/fs/ioctl.c
@@ -17,6 +17,7 @@
 #include <linux/buffer_head.h>
 
 #include <asm/ioctls.h>
+#include <linux/ccsecurity.h>
 
 /* So that the fiemap access checks can't overflow on 32 bit machines. */
 #define FIEMAP_MAX_EXTENTS	(UINT_MAX / sizeof(struct fiemap_extent))
@@ -40,6 +41,8 @@ static long vfs_ioctl(struct file *filp,
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -483,6 +486,8 @@ SYSCALL_DEFINE3(ioctl, unsigned int, fd,
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.28-hardened-r7.orig/fs/namei.c
+++ linux-2.6.28-hardened-r7/fs/namei.c
@@ -35,6 +35,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/ccsecurity.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1552,6 +1554,11 @@ int may_open(struct nameidata *nd, int a
 		if (!is_owner_or_cap(inode))
 			return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_open_permission(dentry, nd->path.mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1603,6 +1610,9 @@ static int __open_namei_create(struct na
 
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_mknod_permission(dir->d_inode, path->dentry, nd->path.mnt,
+				     mode, 0);
+	if (!error)
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
 	if (!error)
 		gr_handle_create(path->dentry, nd->path.mnt);
@@ -1616,6 +1626,7 @@ out_unlock_dput:
 	return may_open(nd, 0, flag & ~O_TRUNC);
 }
 
+#include <linux/ccsecurity_vfs.h>
 /*
  * Note that while the flag value (low two bits) for sys_open means:
  *	00 - read-only
@@ -1757,7 +1768,9 @@ do_last:
 		error = mnt_want_write(nd.path.mnt);
 		if (error)
 			goto exit_mutex_unlock;
+		ccs_save_open_mode(open_flag);
 		error = __open_namei_create(&nd, &path, flag, mode);
+		ccs_clear_open_mode();
 		if (error) {
 			mnt_drop_write(nd.path.mnt);
 			goto exit;
@@ -1824,7 +1837,9 @@ ok:
 		if (error)
 			goto exit;
 	}
+	ccs_save_open_mode(open_flag);
 	error = may_open(&nd, acc_mode, flag);
+	ccs_clear_open_mode();
 	if (error) {
 		if (will_write)
 			mnt_drop_write(nd.path.mnt);
@@ -2062,6 +2077,9 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_mknod_permission(nd.path.dentry->d_inode, dentry,
+				     nd.path.mnt, mode, dev);
+	if (!error)
 	switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.path.dentry->d_inode,dentry,mode,&nd);
@@ -2141,6 +2159,9 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_mkdir_permission(nd.path.dentry->d_inode, dentry,
+				     nd.path.mnt, mode);
+	if (!error)
 	error = vfs_mkdir(nd.path.dentry->d_inode, dentry, mode);
 	mnt_drop_write(nd.path.mnt);
 
@@ -2270,6 +2291,9 @@ static long do_rmdir(int dfd, const char
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto exit3;
+	error = ccs_rmdir_permission(nd.path.dentry->d_inode, dentry,
+				     nd.path.mnt);
+	if (!error)
 	error = vfs_rmdir(nd.path.dentry->d_inode, dentry);
 	mnt_drop_write(nd.path.mnt);
 	if (!error && (saved_dev || saved_ino))
@@ -2370,6 +2394,9 @@ static long do_unlinkat(int dfd, const c
 		error = mnt_want_write(nd.path.mnt);
 		if (error)
 			goto exit2;
+		error = ccs_unlink_permission(nd.path.dentry->d_inode,
+					      dentry, nd.path.mnt);
+		if (!error)
 		error = vfs_unlink(nd.path.dentry->d_inode, dentry);
 		if (!error && (saved_ino || saved_dev))
 			gr_handle_delete(saved_ino, saved_dev);
@@ -2458,6 +2485,9 @@ SYSCALL_DEFINE3(symlinkat, const char __
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_symlink_permission(nd.path.dentry->d_inode, dentry,
+				       nd.path.mnt, from);
+	if (!error)
 	error = vfs_symlink(nd.path.dentry->d_inode, dentry, from);
 	if (!error)
 		gr_handle_create(dentry, nd.path.mnt);
@@ -2570,6 +2600,9 @@ SYSCALL_DEFINE5(linkat, int, olddfd, con
 	error = mnt_want_write(nd.path.mnt);
 	if (error)
 		goto out_dput;
+	error = ccs_link_permission(old_path.dentry, nd.path.dentry->d_inode,
+				    new_dentry, nd.path.mnt);
+	if (!error)
 	error = vfs_link(old_path.dentry, nd.path.dentry->d_inode, new_dentry);
 	if (!error)
 		gr_handle_create(new_dentry, nd.path.mnt);
@@ -2814,6 +2847,10 @@ SYSCALL_DEFINE4(renameat, int, olddfd, c
 	error = mnt_want_write(oldnd.path.mnt);
 	if (error)
 		goto exit5;
+	error = ccs_rename_permission(old_dir->d_inode, old_dentry,
+				      new_dir->d_inode, new_dentry,
+				      newnd.path.mnt);
+	if (!error)
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
 	if (!error)
--- linux-2.6.28-hardened-r7.orig/fs/namespace.c
+++ linux-2.6.28-hardened-r7/fs/namespace.c
@@ -31,6 +31,7 @@
 #include <asm/unistd.h>
 #include "pnode.h"
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 #define HASH_SHIFT ilog2(PAGE_SIZE / sizeof(struct list_head))
 #define HASH_SIZE (1UL << HASH_SHIFT)
@@ -1041,6 +1042,9 @@ static int do_umount(struct vfsmount *mn
 	if (retval)
 		return retval;
 
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
 	 * unmounting unconditionally. Unmount only happens if:
@@ -1137,6 +1141,8 @@ SYSCALL_DEFINE2(umount, char __user *, n
 {
 	struct path path;
 	int retval;
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 
 	retval = user_path(name, &path);
 	if (retval)
@@ -1485,6 +1491,9 @@ static int do_loopback(struct path *path
 
 	if (!check_mnt(path->mnt) || !check_mnt(old_path.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto out;
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1596,6 +1605,9 @@ static int do_move_mount(struct path *pa
 	if (!check_mnt(path->mnt) || !check_mnt(old_path.mnt))
 		goto out;
 
+	err = -EPERM;
+	if (ccs_may_umount(old_path.mnt) || ccs_may_mount(path))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&path->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(path->dentry->d_inode))
@@ -1699,6 +1711,9 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, path)))
@@ -1922,6 +1937,10 @@ long do_mount(char *dev_name, char *dir_
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+	retval = ccs_mount_permission(dev_name, dir_name, type_page, &flags);
+	if (retval)
+		return retval;
+
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
 		mnt_flags |= MNT_NOSUID;
@@ -2196,6 +2215,8 @@ SYSCALL_DEFINE2(pivot_root, const char _
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_PIVOT_ROOT))
+		return -EPERM;
 
 	error = user_path_dir(new_root, &new);
 	if (error)
@@ -2209,6 +2230,8 @@ SYSCALL_DEFINE2(pivot_root, const char _
 		goto out1;
 
 	error = security_sb_pivotroot(&old, &new);
+	if (!error)
+		error = ccs_pivot_root_permission(&old, &new);
 	if (error) {
 		path_put(&old);
 		goto out1;
--- linux-2.6.28-hardened-r7.orig/fs/open.c
+++ linux-2.6.28-hardened-r7/fs/open.c
@@ -29,6 +29,7 @@
 #include <linux/rcupdate.h>
 #include <linux/audit.h>
 #include <linux/falloc.h>
+#include <linux/ccsecurity.h>
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -272,6 +273,9 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto put_write_and_out;
 
+	error = ccs_truncate_permission(path.dentry, path.mnt, length, 0);
+	if (error)
+		goto put_write_and_out;
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -328,6 +332,9 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	error = ccs_truncate_permission(dentry, file->f_vfsmnt, length, 0);
+	if (error)
+		goto out_putf;
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
@@ -605,6 +612,10 @@ SYSCALL_DEFINE1(chroot, const char __use
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (!ccs_capable(CCS_SYS_CHROOT))
+		goto dput_and_out;
+	if (ccs_chroot_permission(&path))
+		goto dput_and_out;
 
 	if (gr_handle_chroot_chroot(path.dentry, path.mnt))
 		goto dput_and_out;
@@ -641,6 +652,9 @@ SYSCALL_DEFINE2(fchmod, unsigned int, fd
 	err = mnt_want_write(file->f_path.mnt);
 	if (err)
 		goto out_putf;
+	err = ccs_chmod_permission(dentry, file->f_vfsmnt, mode);
+	if (err)
+		goto out_drop_write;
 
 	if (!gr_acl_handle_fchmod(dentry, file->f_path.mnt, mode)) {
 		err = -EACCES;
@@ -685,6 +699,9 @@ SYSCALL_DEFINE3(fchmodat, int, dfd, cons
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto dput_and_out;
+	error = ccs_chmod_permission(path.dentry, path.mnt, mode);
+	if (error)
+		goto out_drop_write;
 
 	if (!gr_acl_handle_chmod(path.dentry, path.mnt, mode)) {
 		error = -EACCES;
@@ -758,6 +775,8 @@ SYSCALL_DEFINE3(chown, const char __user
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(path.dentry, path.mnt, user, group);
+	if (!error)
 	error = chown_common(path.dentry, user, group, path.mnt);
 	mnt_drop_write(path.mnt);
 out_release:
@@ -783,6 +802,8 @@ SYSCALL_DEFINE5(fchownat, int, dfd, cons
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(path.dentry, path.mnt, user, group);
+	if (!error)
 	error = chown_common(path.dentry, user, group, path.mnt);
 	mnt_drop_write(path.mnt);
 out_release:
@@ -802,6 +823,8 @@ SYSCALL_DEFINE3(lchown, const char __use
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(path.dentry, path.mnt, user, group);
+	if (!error)
 	error = chown_common(path.dentry, user, group, path.mnt);
 	mnt_drop_write(path.mnt);
 out_release:
@@ -825,6 +848,8 @@ SYSCALL_DEFINE3(fchown, unsigned int, fd
 		goto out_fput;
 	dentry = file->f_path.dentry;
 	audit_inode(NULL, dentry);
+	error = ccs_chown_permission(dentry, file->f_vfsmnt, user, group);
+	if (!error)
 	error = chown_common(dentry, user, group, file->f_path.mnt);
 	mnt_drop_write(file->f_path.mnt);
 out_fput:
@@ -1211,6 +1236,8 @@ EXPORT_SYMBOL(sys_close);
  */
 SYSCALL_DEFINE0(vhangup)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup_self();
 		return 0;
--- linux-2.6.28-hardened-r7.orig/fs/proc/version.c
+++ linux-2.6.28-hardened-r7/fs/proc/version.c
@@ -32,3 +32,10 @@ static int __init proc_version_init(void
 	return 0;
 }
 module_init(proc_version_init);
+
+static int __init ccs_show_version(void)
+{
+	printk(KERN_INFO "Hook version: 2.6.28-hardened-r7 2009/08/20\n");
+	return 0;
+}
+module_init(ccs_show_version);
--- linux-2.6.28-hardened-r7.orig/include/linux/init_task.h
+++ linux-2.6.28-hardened-r7/include/linux/init_task.h
@@ -113,6 +113,14 @@ extern struct group_info init_groups;
 # define CAP_INIT_BSET  CAP_INIT_EFF_SET
 #endif
 
+#ifdef CONFIG_CCSECURITY
+#define INIT_CCSECURITY          \
+	.ccs_domain_info = NULL, \
+	.ccs_flags = 0,
+#else
+#define INIT_CCSECURITY
+#endif
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -180,6 +188,7 @@ extern struct group_info init_groups;
 	INIT_IDS							\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	INIT_CCSECURITY                                                 \
 }
 
 
--- linux-2.6.28-hardened-r7.orig/include/linux/sched.h
+++ linux-2.6.28-hardened-r7/include/linux/sched.h
@@ -29,6 +29,8 @@
 #define CLONE_NEWNET		0x40000000	/* New network namespace */
 #define CLONE_IO		0x80000000	/* Clone io context */
 
+struct ccs_domain_info;
+
 /*
  * Scheduling policies
  */
@@ -1376,6 +1378,10 @@ struct task_struct {
 	u8 brute;
 #endif
 
+#ifdef CONFIG_CCSECURITY
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+#endif
 };
 
 #define MF_PAX_PAGEEXEC		0x01000000	/* Paging based non-executable pages */
--- linux-2.6.28-hardened-r7.orig/kernel/compat.c
+++ linux-2.6.28-hardened-r7/kernel/compat.c
@@ -26,6 +26,7 @@
 #include <linux/times.h>
 
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Note that the native side is already converted to a timespec, because
@@ -901,6 +902,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.28-hardened-r7.orig/kernel/kexec.c
+++ linux-2.6.28-hardened-r7/kernel/kexec.c
@@ -37,6 +37,7 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/sections.h>
+#include <linux/ccsecurity.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -943,6 +944,8 @@ SYSCALL_DEFINE4(kexec_load, unsigned lon
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.28-hardened-r7.orig/kernel/kmod.c
+++ linux-2.6.28-hardened-r7/kernel/kmod.c
@@ -174,6 +174,11 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+#ifdef CONFIG_CCSECURITY
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+#endif
+
 	retval = kernel_execve(sub_info->path, sub_info->argv, sub_info->envp);
 
 	/* Exec failed? */
--- linux-2.6.28-hardened-r7.orig/kernel/module.c
+++ linux-2.6.28-hardened-r7/kernel/module.c
@@ -56,6 +56,7 @@
 #include <asm/sections.h>
 #include <linux/tracepoint.h>
 #include <linux/ftrace.h>
+#include <linux/ccsecurity.h>
 
 #if 0
 #define DEBUGP printk
@@ -769,6 +770,8 @@ SYSCALL_DEFINE2(delete_module, const cha
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2449,6 +2452,8 @@ SYSCALL_DEFINE3(init_module, void __user
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.28-hardened-r7.orig/kernel/ptrace.c
+++ linux-2.6.28-hardened-r7/kernel/ptrace.c
@@ -24,6 +24,7 @@
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * ptrace a task: make the debugger its new parent and
@@ -549,6 +550,8 @@ SYSCALL_DEFINE4(ptrace, long, request, l
 {
 	struct task_struct *child;
 	long ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
@@ -677,6 +680,8 @@ asmlinkage long compat_sys_ptrace(compat
 {
 	struct task_struct *child;
 	long ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
--- linux-2.6.28-hardened-r7.orig/kernel/sched.c
+++ linux-2.6.28-hardened-r7/kernel/sched.c
@@ -76,6 +76,7 @@
 
 #include <asm/tlb.h>
 #include <asm/irq_regs.h>
+#include <linux/ccsecurity.h>
 
 #include "sched_cpupri.h"
 
@@ -5028,6 +5029,8 @@ int can_nice(const struct task_struct *p
 SYSCALL_DEFINE1(nice, int, increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.28-hardened-r7.orig/kernel/signal.c
+++ linux-2.6.28-hardened-r7/kernel/signal.c
@@ -34,6 +34,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/ccsecurity.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2210,6 +2211,8 @@ SYSCALL_DEFINE4(rt_sigtimedwait, const s
 SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)
 {
 	struct siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2271,6 +2274,8 @@ SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2283,6 +2288,8 @@ SYSCALL_DEFINE2(tkill, pid_t, pid, int, 
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -2300,6 +2307,8 @@ SYSCALL_DEFINE3(rt_sigqueueinfo, pid_t, 
 	if (info.si_code >= 0)
 		return -EPERM;
 	info.si_signo = sig;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, &info, pid);
--- linux-2.6.28-hardened-r7.orig/kernel/sys.c
+++ linux-2.6.28-hardened-r7/kernel/sys.c
@@ -42,6 +42,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -152,6 +153,10 @@ SYSCALL_DEFINE3(setpriority, int, which,
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -369,6 +374,8 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1387,6 +1394,8 @@ SYSCALL_DEFINE2(sethostname, char __user
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1436,6 +1445,8 @@ SYSCALL_DEFINE2(setdomainname, char __us
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.28-hardened-r7.orig/kernel/sysctl.c
+++ linux-2.6.28-hardened-r7/kernel/sysctl.c
@@ -51,6 +51,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/ccsecurity.h>
 
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
@@ -1667,6 +1668,9 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen,
 					head->root, head->ctl_table);
--- linux-2.6.28-hardened-r7.orig/kernel/time.c
+++ linux-2.6.28-hardened-r7/kernel/time.c
@@ -40,6 +40,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #include "timeconst.h"
 
@@ -90,6 +91,8 @@ SYSCALL_DEFINE1(stime, time_t __user *, 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 
@@ -164,6 +167,8 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.28-hardened-r7.orig/kernel/time/ntp.c
+++ linux-2.6.28-hardened-r7/kernel/time/ntp.c
@@ -18,6 +18,7 @@
 #include <linux/clocksource.h>
 #include <linux/workqueue.h>
 #include <asm/timex.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Timekeeping variables
@@ -286,10 +287,15 @@ int do_adjtimex(struct timex *txc)
 		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
 		    !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
+		    !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 	} else {
 		/* In order to modify anything, you gotta be super-user! */
 		 if (txc->modes && !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 
 		/* if the quartz is off by more than 10% something is VERY wrong! */
 		if (txc->modes & ADJ_TICK &&
--- linux-2.6.28-hardened-r7.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.28-hardened-r7/net/ipv4/inet_connection_sock.c
@@ -24,6 +24,7 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+#include <linux/ccsecurity.h>
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -109,6 +110,8 @@ int inet_csk_get_port(struct sock *sk, u
 			head = &hashinfo->bhash[inet_bhashfn(net, rover,
 					hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->ib_net == net && tb->port == rover)
 					goto next;
--- linux-2.6.28-hardened-r7.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.28-hardened-r7/net/ipv4/inet_hashtables.c
@@ -23,6 +23,7 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+#include <linux/ccsecurity.h>
 
 extern void gr_update_task_in_ip_table(struct task_struct *task, const struct inet_sock *inet);
 
@@ -443,6 +444,8 @@ int __inet_hash_connect(struct inet_time
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(net, port,
 					hinfo->bhash_size)];
 			spin_lock(&head->lock);
--- linux-2.6.28-hardened-r7.orig/net/ipv4/raw.c
+++ linux-2.6.28-hardened-r7/net/ipv4/raw.c
@@ -77,6 +77,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/ccsecurity.h>
 
 static struct raw_hashinfo raw_v4_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v4_hashinfo.lock),
@@ -665,6 +666,9 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.28-hardened-r7.orig/net/ipv4/udp.c
+++ linux-2.6.28-hardened-r7/net/ipv4/udp.c
@@ -104,6 +104,7 @@
 #include <net/checksum.h>
 #include <net/xfrm.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 extern int gr_search_udp_recvmsg(struct sock *sk, const struct sk_buff *skb);
 extern int gr_search_udp_sendmsg(struct sock *sk, struct sockaddr_in *addr);
@@ -176,7 +177,9 @@ int udp_lib_get_port(struct sock *sk, un
 		snum = first = rand % remaining + low;
 		rand |= 1;
 		while (udp_lib_lport_inuse(net, snum, udptable, sk,
-					   saddr_comp)) {
+					   saddr_comp)
+		       || ccs_lport_reserved(snum)
+		       ) {
 			do {
 				snum = snum + rand;
 			} while (snum < low || snum > high);
@@ -861,6 +864,9 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	err = gr_search_udp_recvmsg(sk, skb);
 	if (err)
--- linux-2.6.28-hardened-r7.orig/net/ipv6/raw.c
+++ linux-2.6.28-hardened-r7/net/ipv6/raw.c
@@ -59,6 +59,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/ccsecurity.h>
 
 static struct raw_hashinfo raw_v6_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v6_hashinfo.lock),
@@ -465,6 +466,9 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.28-hardened-r7.orig/net/ipv6/udp.c
+++ linux-2.6.28-hardened-r7/net/ipv6/udp.c
@@ -48,6 +48,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 int udp_v6_get_port(struct sock *sk, unsigned short snum)
 {
@@ -151,6 +152,9 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.28-hardened-r7.orig/net/socket.c
+++ linux-2.6.28-hardened-r7/net/socket.c
@@ -113,6 +113,8 @@ extern int gr_search_accept(struct socke
 extern int gr_search_socket(const int domain, const int type,
 			    const int protocol);
 
+#include <linux/ccsecurity.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -574,6 +576,10 @@ static inline int __sock_sendmsg(struct 
 	si->size = size;
 
 	err = security_socket_sendmsg(sock, msg, size);
+	if (!err)
+		err = ccs_socket_sendmsg_permission(sock, (struct sockaddr *)
+						    msg->msg_name,
+						    msg->msg_namelen);
 	if (err)
 		return err;
 
@@ -1139,6 +1145,8 @@ static int __sock_create(struct net *net
 	}
 
 	err = security_socket_create(family, type, protocol, kern);
+	if (!err)
+		err = ccs_socket_create_permission(family, type, protocol);
 	if (err)
 		return err;
 
@@ -1412,6 +1420,11 @@ SYSCALL_DEFINE3(bind, int, fd, struct so
 						   (struct sockaddr *)&address,
 						   addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 &address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      &address, addrlen);
@@ -1451,6 +1464,8 @@ SYSCALL_DEFINE2(listen, int, fd, int, ba
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 error:
@@ -1533,6 +1548,11 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) &address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
 					  &len, 2) < 0) {
@@ -1614,6 +1634,9 @@ SYSCALL_DEFINE3(connect, int, fd, struct
 
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)&address, addrlen);
+	if (!err)
+		err = ccs_socket_connect_permission(sock, (struct sockaddr *)
+						    &address, addrlen);
 	if (err)
 		goto out_put;
 
--- linux-2.6.28-hardened-r7.orig/net/unix/af_unix.c
+++ linux-2.6.28-hardened-r7/net/unix/af_unix.c
@@ -114,6 +114,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 static struct hlist_head unix_socket_table[UNIX_HASH_SIZE + 1];
 static DEFINE_SPINLOCK(unix_table_lock);
@@ -849,6 +850,9 @@ static int unix_bind(struct socket *sock
 			goto out_mknod_dput;
 		}
 
+		err = ccs_mknod_permission(nd.path.dentry->d_inode, dentry,
+					   nd.path.mnt, mode, 0);
+		if (!err)
 		err = vfs_mknod(nd.path.dentry->d_inode, dentry, mode, 0);
 		mnt_drop_write(nd.path.mnt);
 		if (err)
--- linux-2.6.28-hardened-r7.orig/security/Kconfig
+++ linux-2.6.28-hardened-r7/security/Kconfig
@@ -567,5 +567,7 @@ config SECURITY_DEFAULT_MMAP_MIN_ADDR
 source security/selinux/Kconfig
 source security/smack/Kconfig
 
+source security/ccsecurity/Kconfig
+
 endmenu
 
--- linux-2.6.28-hardened-r7.orig/security/Makefile
+++ linux-2.6.28-hardened-r7/security/Makefile
@@ -17,3 +17,6 @@ obj-$(CONFIG_SECURITY_SELINUX)		+= selin
 obj-$(CONFIG_SECURITY_SMACK)		+= smack/built-in.o
 obj-$(CONFIG_SECURITY_ROOTPLUG)		+= root_plug.o
 obj-$(CONFIG_CGROUP_DEVICE)		+= device_cgroup.o
+
+subdir-$(CONFIG_CCSECURITY)+= ccsecurity
+obj-$(CONFIG_CCSECURITY)+= ccsecurity/built-in.o
