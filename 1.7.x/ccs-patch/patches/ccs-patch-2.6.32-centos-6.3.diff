This is TOMOYO Linux patch for CentOS 6.3.

Source code for this patch is http://vault.centos.org/6.3/updates/Source/SPackages/kernel-2.6.32-279.5.2.el6.src.rpm
---
 fs/compat.c               |    3 ++-
 fs/compat_ioctl.c         |    7 +++++++
 fs/exec.c                 |    3 ++-
 fs/fcntl.c                |    4 ++++
 fs/ioctl.c                |    5 +++++
 fs/namei.c                |   33 +++++++++++++++++++++++++++++++++
 fs/namespace.c            |   20 ++++++++++++++++++++
 fs/open.c                 |   27 +++++++++++++++++++++++++++
 fs/proc/version.c         |    7 +++++++
 include/linux/init_task.h |    9 +++++++++
 include/linux/sched.h     |    6 ++++++
 include/net/ip.h          |    3 +++
 kernel/compat.c           |    3 +++
 kernel/kexec.c            |    3 +++
 kernel/kmod.c             |    5 +++++
 kernel/module.c           |    5 +++++
 kernel/ptrace.c           |    5 +++++
 kernel/sched.c            |    3 +++
 kernel/signal.c           |   11 +++++++++++
 kernel/sys.c              |   11 +++++++++++
 kernel/sysctl.c           |    4 ++++
 kernel/time.c             |    5 +++++
 kernel/time/ntp.c         |    6 ++++++
 net/ipv4/raw.c            |    4 ++++
 net/ipv4/udp.c            |    4 ++++
 net/ipv6/raw.c            |    4 ++++
 net/ipv6/udp.c            |    4 ++++
 net/socket.c              |   21 +++++++++++++++++++++
 net/unix/af_unix.c        |    5 +++++
 security/Kconfig          |    2 ++
 security/Makefile         |    3 +++
 31 files changed, 233 insertions(+), 2 deletions(-)

--- linux-2.6.32-279.5.2.el6.orig/fs/compat.c
+++ linux-2.6.32-279.5.2.el6/fs/compat.c
@@ -54,6 +54,7 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 int compat_log = 1;
 
@@ -1550,7 +1551,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval < 0)
 		goto out;
 
--- linux-2.6.32-279.5.2.el6.orig/fs/compat_ioctl.c
+++ linux-2.6.32-279.5.2.el6/fs/compat_ioctl.c
@@ -114,6 +114,7 @@
 #ifdef CONFIG_SPARC
 #include <asm/fbio.h>
 #endif
+#include <linux/ccsecurity.h>
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -2763,6 +2764,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -2799,6 +2802,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.32-279.5.2.el6.orig/fs/exec.c
+++ linux-2.6.32-279.5.2.el6/fs/exec.c
@@ -61,6 +61,7 @@
 #include <asm/mmu_context.h>
 #include <asm/tlb.h>
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
@@ -1435,7 +1436,7 @@ int do_execve(char * filename,
 		goto out;
 
 	current->flags &= ~PF_KTHREAD;
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval < 0)
 		goto out;
 
--- linux-2.6.32-279.5.2.el6.orig/fs/fcntl.c
+++ linux-2.6.32-279.5.2.el6/fs/fcntl.c
@@ -23,6 +23,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 void set_close_on_exec(unsigned int fd, int flag)
 {
@@ -156,6 +157,9 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) && ccs_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (!is_owner_or_cap(inode))
--- linux-2.6.32-279.5.2.el6.orig/fs/ioctl.c
+++ linux-2.6.32-279.5.2.el6/fs/ioctl.c
@@ -18,6 +18,7 @@
 #include <linux/falloc.h>
 
 #include <asm/ioctls.h>
+#include <linux/ccsecurity.h>
 
 /* So that the fiemap access checks can't overflow on 32 bit machines. */
 #define FIEMAP_MAX_EXTENTS	(UINT_MAX / sizeof(struct fiemap_extent))
@@ -41,6 +42,8 @@ static long vfs_ioctl(struct file *filp,
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -639,6 +642,8 @@ SYSCALL_DEFINE3(ioctl, unsigned int, fd,
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.32-279.5.2.el6.orig/fs/namei.c
+++ linux-2.6.32-279.5.2.el6/fs/namei.c
@@ -39,6 +39,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/ccsecurity.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1741,6 +1743,11 @@ int may_open(struct path *path, int acc_
 	if (flag & O_NOATIME && !is_owner_or_cap(inode))
 		return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_open_permission(dentry, path->mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1784,6 +1791,9 @@ static int __open_namei_create(struct na
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current_umask();
 	error = security_path_mknod(&nd->path, path->dentry, mode, 0);
+	if (!error)
+		error = ccs_mknod_permission(dir->d_inode, path->dentry,
+					     nd->path.mnt, mode, 0);
 	if (error)
 		goto out_unlock;
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
@@ -2259,6 +2269,9 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const
 	if (error)
 		goto out_dput;
 	error = security_path_mknod(&nd.path, dentry, mode, dev);
+	if (!error)
+		error = ccs_mknod_permission(nd.path.dentry->d_inode, dentry,
+					     nd.path.mnt, mode, dev);
 	if (error)
 		goto out_drop_write;
 	switch (mode & S_IFMT) {
@@ -2334,6 +2347,9 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const
 	if (error)
 		goto out_dput;
 	error = security_path_mkdir(&nd.path, dentry, mode);
+	if (!error)
+		error = ccs_mkdir_permission(nd.path.dentry->d_inode, dentry,
+					     nd.path.mnt, mode);
 	if (error)
 		goto out_drop_write;
 	error = vfs_mkdir(nd.path.dentry->d_inode, dentry, mode);
@@ -2448,6 +2464,9 @@ static long do_rmdir(int dfd, const char
 	if (error)
 		goto exit3;
 	error = security_path_rmdir(&nd.path, dentry);
+	if (!error)
+		error = ccs_rmdir_permission(nd.path.dentry->d_inode, dentry,
+					     nd.path.mnt);
 	if (error)
 		goto exit4;
 	error = vfs_rmdir(nd.path.dentry->d_inode, dentry);
@@ -2537,6 +2556,9 @@ static long do_unlinkat(int dfd, const c
 		if (error)
 			goto exit2;
 		error = security_path_unlink(&nd.path, dentry);
+		if (!error)
+			error = ccs_unlink_permission(nd.path.dentry->d_inode,
+						      dentry, nd.path.mnt);
 		if (error)
 			goto exit3;
 		error = vfs_unlink(nd.path.dentry->d_inode, dentry);
@@ -2622,6 +2644,9 @@ SYSCALL_DEFINE3(symlinkat, const char __
 	if (error)
 		goto out_dput;
 	error = security_path_symlink(&nd.path, dentry, from);
+	if (!error)
+		error = ccs_symlink_permission(nd.path.dentry->d_inode, dentry,
+					       nd.path.mnt, from);
 	if (error)
 		goto out_drop_write;
 	error = vfs_symlink(nd.path.dentry->d_inode, dentry, from);
@@ -2722,6 +2747,10 @@ SYSCALL_DEFINE5(linkat, int, olddfd, con
 	if (error)
 		goto out_dput;
 	error = security_path_link(old_path.dentry, &nd.path, new_dentry);
+	if (!error)
+		error = ccs_link_permission(old_path.dentry,
+					    nd.path.dentry->d_inode,
+					    new_dentry, nd.path.mnt);
 	if (error)
 		goto out_drop_write;
 	error = vfs_link(old_path.dentry, nd.path.dentry->d_inode, new_dentry);
@@ -2963,6 +2992,10 @@ SYSCALL_DEFINE4(renameat, int, olddfd, c
 		goto exit5;
 	error = security_path_rename(&oldnd.path, old_dentry,
 				     &newnd.path, new_dentry);
+	if (!error)
+		error = ccs_rename_permission(old_dir->d_inode, old_dentry,
+					      new_dir->d_inode, new_dentry,
+					      newnd.path.mnt);
 	if (error)
 		goto exit6;
 	error = vfs_rename(old_dir->d_inode, old_dentry,
--- linux-2.6.32-279.5.2.el6.orig/fs/namespace.c
+++ linux-2.6.32-279.5.2.el6/fs/namespace.c
@@ -33,6 +33,7 @@
 #include <asm/unistd.h>
 #include "pnode.h"
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 #define HASH_SHIFT ilog2(PAGE_SIZE / sizeof(struct list_head))
 #define HASH_SIZE (1UL << HASH_SHIFT)
@@ -1053,6 +1054,8 @@ static int do_umount(struct vfsmount *mn
 	LIST_HEAD(umount_list);
 
 	retval = security_sb_umount(mnt, flags);
+	if (!retval)
+		retval = ccs_umount_permission(mnt, flags);
 	if (retval)
 		return retval;
 
@@ -1150,6 +1153,8 @@ SYSCALL_DEFINE2(umount, char __user *, n
 	if (!(flags & UMOUNT_NOFOLLOW))
 		lookup_flags |= LOOKUP_FOLLOW;
 
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 	retval = user_path_at(AT_FDCWD, name, lookup_flags, &path);
 	if (retval)
 		goto out;
@@ -1497,6 +1502,9 @@ static int do_loopback(struct path *path
 
 	if (!check_mnt(path->mnt) || !check_mnt(old_path.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto out;
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1613,6 +1621,9 @@ static int do_move_mount(struct path *pa
 	if (!check_mnt(path->mnt) || !check_mnt(old_path.mnt))
 		goto out;
 
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&path->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(path->dentry->d_inode))
@@ -1753,6 +1764,9 @@ static int do_add_mount_unlocked(struct
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 	err = graft_tree(newmnt, path);
@@ -2012,6 +2026,7 @@ int copy_mount_string(const void __user
 long do_mount(char *dev_name, char *dir_name, char *type_page,
 		  unsigned long flags, void *data_page)
 {
+	const unsigned long original_flags = flags;
 	struct path path;
 	int retval = 0;
 	int mnt_flags = 0;
@@ -2059,6 +2074,9 @@ long do_mount(char *dev_name, char *dir_
 
 	retval = security_sb_mount(dev_name, &path,
 				   type_page, flags, data_page);
+	if (!retval)
+		retval = ccs_mount_permission(dev_name, &path, type_page,
+					      original_flags, data_page);
 	if (retval)
 		goto dput_out;
 
@@ -2277,6 +2295,8 @@ SYSCALL_DEFINE2(pivot_root, const char _
 		goto out1;
 
 	error = security_sb_pivotroot(&old, &new);
+	if (!error)
+		error = ccs_pivot_root_permission(&old, &new);
 	if (error) {
 		path_put(&old);
 		goto out1;
--- linux-2.6.32-279.5.2.el6.orig/fs/open.c
+++ linux-2.6.32-279.5.2.el6/fs/open.c
@@ -31,6 +31,7 @@
 #include <linux/falloc.h>
 #include <linux/fs_struct.h>
 #include <linux/ima.h>
+#include <linux/ccsecurity.h>
 
 #include "internal.h"
 
@@ -113,6 +114,9 @@ static long do_sys_truncate(const char _
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error)
 		error = security_path_truncate(&path, length, 0);
+	if (!error)
+		error = ccs_truncate_permission(path.dentry, path.mnt, length,
+						0);
 	if (!error) {
 		vfs_dq_init(inode);
 		error = do_truncate(path.dentry, length, 0, NULL);
@@ -172,6 +176,9 @@ static long do_sys_ftruncate(unsigned in
 		error = security_path_truncate(&file->f_path, length,
 					       ATTR_MTIME|ATTR_CTIME);
 	if (!error)
+		error = ccs_truncate_permission(dentry, file->f_vfsmnt, length,
+						ATTR_MTIME|ATTR_CTIME);
+	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
 out_putf:
 	fput(file);
@@ -425,6 +432,8 @@ SYSCALL_DEFINE1(chroot, const char __use
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (ccs_chroot_permission(&path))
+		goto dput_and_out;
 
 	set_fs_root(current->fs, &path);
 	error = 0;
@@ -454,6 +463,9 @@ SYSCALL_DEFINE2(fchmod, unsigned int, fd
 	err = mnt_want_write_file(file);
 	if (err)
 		goto out_putf;
+	err = ccs_chmod_permission(dentry, file->f_vfsmnt, mode);
+	if (err)
+		goto out_drop_write;
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -461,6 +473,7 @@ SYSCALL_DEFINE2(fchmod, unsigned int, fd
 	newattrs.ia_valid = ATTR_MODE | ATTR_CTIME;
 	err = notify_change(dentry, &newattrs);
 	mutex_unlock(&inode->i_mutex);
+out_drop_write:
 	mnt_drop_write(file->f_path.mnt);
 out_putf:
 	fput(file);
@@ -483,6 +496,9 @@ SYSCALL_DEFINE3(fchmodat, int, dfd, cons
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto dput_and_out;
+	error = ccs_chmod_permission(path.dentry, path.mnt, mode);
+	if (error)
+		goto out_drop_write;
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -490,6 +506,7 @@ SYSCALL_DEFINE3(fchmodat, int, dfd, cons
 	newattrs.ia_valid = ATTR_MODE | ATTR_CTIME;
 	error = notify_change(path.dentry, &newattrs);
 	mutex_unlock(&inode->i_mutex);
+out_drop_write:
 	mnt_drop_write(path.mnt);
 dput_and_out:
 	path_put(&path);
@@ -538,6 +555,8 @@ SYSCALL_DEFINE3(chown, const char __user
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(path.dentry, path.mnt, user, group);
+	if (!error)
 	error = chown_common(path.dentry, user, group);
 	mnt_drop_write(path.mnt);
 out_release:
@@ -563,6 +582,8 @@ SYSCALL_DEFINE5(fchownat, int, dfd, cons
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(path.dentry, path.mnt, user, group);
+	if (!error)
 	error = chown_common(path.dentry, user, group);
 	mnt_drop_write(path.mnt);
 out_release:
@@ -582,6 +603,8 @@ SYSCALL_DEFINE3(lchown, const char __use
 	error = mnt_want_write(path.mnt);
 	if (error)
 		goto out_release;
+	error = ccs_chown_permission(path.dentry, path.mnt, user, group);
+	if (!error)
 	error = chown_common(path.dentry, user, group);
 	mnt_drop_write(path.mnt);
 out_release:
@@ -605,6 +628,8 @@ SYSCALL_DEFINE3(fchown, unsigned int, fd
 		goto out_fput;
 	dentry = file->f_path.dentry;
 	audit_inode(NULL, dentry);
+	error = ccs_chown_permission(dentry, file->f_vfsmnt, user, group);
+	if (!error)
 	error = chown_common(dentry, user, group);
 	mnt_drop_write(file->f_path.mnt);
 out_fput:
@@ -998,6 +1023,8 @@ EXPORT_SYMBOL(sys_close);
  */
 SYSCALL_DEFINE0(vhangup)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup_self();
 		return 0;
--- linux-2.6.32-279.5.2.el6.orig/fs/proc/version.c
+++ linux-2.6.32-279.5.2.el6/fs/proc/version.c
@@ -32,3 +32,10 @@ static int __init proc_version_init(void
 	return 0;
 }
 module_init(proc_version_init);
+
+static int __init ccs_show_version(void)
+{
+	printk(KERN_INFO "Hook version: 2.6.32-279.5.2.el6 2012/08/28\n");
+	return 0;
+}
+module_init(ccs_show_version);
--- linux-2.6.32-279.5.2.el6.orig/include/linux/init_task.h
+++ linux-2.6.32-279.5.2.el6/include/linux/init_task.h
@@ -115,6 +115,14 @@ extern struct cred init_cred;
 # define INIT_PERF_EVENTS(tsk)
 #endif
 
+#ifdef CONFIG_CCSECURITY
+#define INIT_CCSECURITY          \
+	.ccs_domain_info = NULL, \
+	.ccs_flags = 0,
+#else
+#define INIT_CCSECURITY
+#endif
+
 /*
  *  INIT_TASK is used to set up the first task table, touch at
  * your own risk!. Base=0, limit=0x1fffff (=2MB)
@@ -184,6 +192,7 @@ extern struct cred init_cred;
 	INIT_FTRACE_GRAPH						\
 	INIT_TRACE_RECURSION						\
 	INIT_TASK_RCU_PREEMPT(tsk)					\
+	INIT_CCSECURITY                                                 \
 }
 
 
--- linux-2.6.32-279.5.2.el6.orig/include/linux/sched.h
+++ linux-2.6.32-279.5.2.el6/include/linux/sched.h
@@ -43,6 +43,8 @@
 
 #ifdef __KERNEL__
 
+struct ccs_domain_info;
+
 struct sched_param {
 	int sched_priority;
 };
@@ -1647,6 +1649,10 @@ struct task_struct {
 	} memcg_batch;
 #endif
 #endif
+#ifdef CONFIG_CCSECURITY
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+#endif
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
--- linux-2.6.32-279.5.2.el6.orig/include/net/ip.h
+++ linux-2.6.32-279.5.2.el6/include/net/ip.h
@@ -30,6 +30,7 @@
 #include <net/inet_sock.h>
 #include <net/snmp.h>
 #include <net/flow.h>
+#include <linux/ccsecurity.h>
 
 struct sock;
 
@@ -209,6 +210,8 @@ extern void inet_get_local_port_range(in
 extern unsigned long *sysctl_local_reserved_ports;
 static inline int inet_is_reserved_local_port(int port)
 {
+	if (ccs_lport_reserved(port))
+		return 1;
 	return test_bit(port, sysctl_local_reserved_ports);
 }
 
--- linux-2.6.32-279.5.2.el6.orig/kernel/compat.c
+++ linux-2.6.32-279.5.2.el6/kernel/compat.c
@@ -28,6 +28,7 @@
 #include <linux/module.h>
 
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Note that the native side is already converted to a timespec, because
@@ -924,6 +925,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.32-279.5.2.el6.orig/kernel/kexec.c
+++ linux-2.6.32-279.5.2.el6/kernel/kexec.c
@@ -40,6 +40,7 @@
 #include <asm/system.h>
 #include <asm/sections.h>
 #include <asm/setup.h>
+#include <linux/ccsecurity.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -947,6 +948,8 @@ SYSCALL_DEFINE4(kexec_load, unsigned lon
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	if (kexec_load_disabled)
 		return -EPERM;
--- linux-2.6.32-279.5.2.el6.orig/kernel/kmod.c
+++ linux-2.6.32-279.5.2.el6/kernel/kmod.c
@@ -175,6 +175,11 @@ static int ____call_usermodehelper(void
 	 */
 	set_user_nice(current, 0);
 
+#ifdef CONFIG_CCSECURITY
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+#endif
+
 	retval = kernel_execve(sub_info->path, sub_info->argv, sub_info->envp);
 
 	/* Exec failed? */
--- linux-2.6.32-279.5.2.el6.orig/kernel/module.c
+++ linux-2.6.32-279.5.2.el6/kernel/module.c
@@ -56,6 +56,7 @@
 #include <linux/percpu.h>
 #include <linux/kmemleak.h>
 #include "module-verify.h"
+#include <linux/ccsecurity.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/module.h>
@@ -805,6 +806,8 @@ SYSCALL_DEFINE2(delete_module, const cha
 
 	if (!capable(CAP_SYS_MODULE) || modules_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2596,6 +2599,8 @@ SYSCALL_DEFINE3(init_module, void __user
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE) || modules_disabled)
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.32-279.5.2.el6.orig/kernel/ptrace.c
+++ linux-2.6.32-279.5.2.el6/kernel/ptrace.c
@@ -23,6 +23,7 @@
 #include <linux/syscalls.h>
 #include <linux/uaccess.h>
 #include <linux/regset.h>
+#include <linux/ccsecurity.h>
 
 int __ptrace_may_access(struct task_struct *task, unsigned int mode)
 {
@@ -195,6 +196,8 @@ SYSCALL_DEFINE4(ptrace, long, request, l
 {
 	struct task_struct *child;
 	long ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
@@ -264,6 +267,8 @@ asmlinkage long compat_sys_ptrace(compat
 {
 	struct task_struct *child;
 	long ret;
+	if (ccs_ptrace_permission(request, pid))
+		return -EPERM;
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
--- linux-2.6.32-279.5.2.el6.orig/kernel/sched.c
+++ linux-2.6.32-279.5.2.el6/kernel/sched.c
@@ -79,6 +79,7 @@
 #ifdef CONFIG_PARAVIRT
 #include <asm/paravirt.h>
 #endif
+#include <linux/ccsecurity.h>
 
 #include "sched_cpupri.h"
 #include "sched_autogroup.h"
@@ -6666,6 +6667,8 @@ int can_nice(const struct task_struct *p
 SYSCALL_DEFINE1(nice, int, increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.32-279.5.2.el6.orig/kernel/signal.c
+++ linux-2.6.32-279.5.2.el6/kernel/signal.c
@@ -35,6 +35,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/ccsecurity.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2288,6 +2289,8 @@ SYSCALL_DEFINE4(rt_sigtimedwait, const s
 SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)
 {
 	struct siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2356,6 +2359,8 @@ SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2368,6 +2373,8 @@ SYSCALL_DEFINE2(tkill, pid_t, pid, int,
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -2389,6 +2396,8 @@ SYSCALL_DEFINE3(rt_sigqueueinfo, pid_t,
 		return -EPERM;
 	}
 	info.si_signo = sig;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, &info, pid);
@@ -2409,6 +2418,8 @@ long do_rt_tgsigqueueinfo(pid_t tgid, pi
 		return -EPERM;
 	}
 	info->si_signo = sig;
+	if (ccs_tgsigqueue_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_send_specific(tgid, pid, sig, info);
 }
--- linux-2.6.32-279.5.2.el6.orig/kernel/sys.c
+++ linux-2.6.32-279.5.2.el6/kernel/sys.c
@@ -47,6 +47,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -157,6 +158,10 @@ SYSCALL_DEFINE3(setpriority, int, which,
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -380,6 +385,8 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1144,6 +1151,8 @@ SYSCALL_DEFINE2(sethostname, char __user
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1193,6 +1202,8 @@ SYSCALL_DEFINE2(setdomainname, char __us
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.32-279.5.2.el6.orig/kernel/sysctl.c
+++ linux-2.6.32-279.5.2.el6/kernel/sysctl.c
@@ -56,6 +56,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/ccsecurity.h>
 
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
@@ -2035,6 +2036,9 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen,
 					head->root, head->ctl_table);
--- linux-2.6.32-279.5.2.el6.orig/kernel/time.c
+++ linux-2.6.32-279.5.2.el6/kernel/time.c
@@ -41,6 +41,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #include "timeconst.h"
 
@@ -92,6 +93,8 @@ SYSCALL_DEFINE1(stime, time_t __user *,
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
@@ -163,6 +166,8 @@ int do_sys_settimeofday(struct timespec
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.32-279.5.2.el6.orig/kernel/time/ntp.c
+++ linux-2.6.32-279.5.2.el6/kernel/time/ntp.c
@@ -14,6 +14,7 @@
 #include <linux/timex.h>
 #include <linux/time.h>
 #include <linux/mm.h>
+#include <linux/ccsecurity.h>
 
 /*
  * NTP timekeeping variables:
@@ -475,10 +476,15 @@ int do_adjtimex(struct timex *txc)
 		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
 		    !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
+		    !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 	} else {
 		/* In order to modify anything, you gotta be super-user! */
 		 if (txc->modes && !capable(CAP_SYS_TIME))
 			return -EPERM;
+		if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
 
 		/*
 		 * if the quartz is off by more than 10% then
--- linux-2.6.32-279.5.2.el6.orig/net/ipv4/raw.c
+++ linux-2.6.32-279.5.2.el6/net/ipv4/raw.c
@@ -77,6 +77,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/ccsecurity.h>
 
 static struct raw_hashinfo raw_v4_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v4_hashinfo.lock),
@@ -681,6 +682,9 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.32-279.5.2.el6.orig/net/ipv4/udp.c
+++ linux-2.6.32-279.5.2.el6/net/ipv4/udp.c
@@ -106,6 +106,7 @@
 #include <net/xfrm.h>
 #include <trace/events/udp.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 struct udp_table udp_table;
 EXPORT_SYMBOL(udp_table);
@@ -976,6 +977,9 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.32-279.5.2.el6.orig/net/ipv6/raw.c
+++ linux-2.6.32-279.5.2.el6/net/ipv6/raw.c
@@ -59,6 +59,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/ccsecurity.h>
 
 static struct raw_hashinfo raw_v6_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v6_hashinfo.lock),
@@ -465,6 +466,9 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.32-279.5.2.el6.orig/net/ipv6/udp.c
+++ linux-2.6.32-279.5.2.el6/net/ipv6/udp.c
@@ -48,6 +48,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 int ipv6_rcv_saddr_equal(const struct sock *sk, const struct sock *sk2)
 {
@@ -219,6 +220,9 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.32-279.5.2.el6.orig/net/socket.c
+++ linux-2.6.32-279.5.2.el6/net/socket.c
@@ -98,6 +98,8 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+#include <linux/ccsecurity.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -570,6 +572,8 @@ static inline int __sock_sendmsg(struct
 				 struct msghdr *msg, size_t size)
 {
 	int err = security_socket_sendmsg(sock, msg, size);
+	if (!err)
+		err = ccs_socket_sendmsg_permission(sock, msg, size);
 
 	return err ?: __sock_sendmsg_nosec(iocb, sock, msg, size);
 }
@@ -1223,6 +1227,8 @@ int __sock_create(struct net *net, int f
 	}
 
 	err = security_socket_create(family, type, protocol, kern);
+	if (!err)
+		err = ccs_socket_create_permission(family, type, protocol);
 	if (err)
 		return err;
 
@@ -1452,6 +1458,11 @@ SYSCALL_DEFINE3(bind, int, fd, struct so
 						   (struct sockaddr *)&address,
 						   addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 &address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      &address, addrlen);
@@ -1481,6 +1492,8 @@ SYSCALL_DEFINE2(listen, int, fd, int, ba
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 		fput_light(sock->file, fput_needed);
@@ -1546,6 +1559,11 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) &address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
 					  &len, 2) < 0) {
@@ -1607,6 +1625,9 @@ SYSCALL_DEFINE3(connect, int, fd, struct
 
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)&address, addrlen);
+	if (!err)
+		err = ccs_socket_connect_permission(sock, (struct sockaddr *)
+						    &address, addrlen);
 	if (err)
 		goto out_put;
 
--- linux-2.6.32-279.5.2.el6.orig/net/unix/af_unix.c
+++ linux-2.6.32-279.5.2.el6/net/unix/af_unix.c
@@ -114,6 +114,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 static struct hlist_head unix_socket_table[UNIX_HASH_SIZE + 1];
 static DEFINE_SPINLOCK(unix_table_lock);
@@ -838,6 +839,10 @@ static int unix_bind(struct socket *sock
 		if (err)
 			goto out_mknod_dput;
 		err = security_path_mknod(&nd.path, dentry, mode, 0);
+		if (!err)
+			err = ccs_mknod_permission(nd.path.dentry->d_inode,
+						   dentry, nd.path.mnt, mode,
+						   0);
 		if (err)
 			goto out_mknod_drop_write;
 		err = vfs_mknod(nd.path.dentry->d_inode, dentry, mode, 0);
--- linux-2.6.32-279.5.2.el6.orig/security/Kconfig
+++ linux-2.6.32-279.5.2.el6/security/Kconfig
@@ -177,5 +177,7 @@ source security/tomoyo/Kconfig
 
 source security/integrity/ima/Kconfig
 
+source security/ccsecurity/Kconfig
+
 endmenu
 
--- linux-2.6.32-279.5.2.el6.orig/security/Makefile
+++ linux-2.6.32-279.5.2.el6/security/Makefile
@@ -25,3 +25,6 @@ obj-$(CONFIG_CGROUP_DEVICE)		+= device_c
 # Object integrity file lists
 subdir-$(CONFIG_IMA)			+= integrity/ima
 obj-$(CONFIG_IMA)			+= integrity/ima/built-in.o
+
+subdir-$(CONFIG_CCSECURITY)		+= ccsecurity
+obj-$(CONFIG_CCSECURITY)		+= ccsecurity/built-in.o
