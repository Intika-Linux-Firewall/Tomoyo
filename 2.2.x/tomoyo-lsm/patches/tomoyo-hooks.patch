Subject: LSM adapter functions.

Signed-off-by: Kentaro Takeda <takedakn@nttdata.co.jp>
Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
Signed-off-by: Toshiharu Harada <haradats@nttdata.co.jp>
---
 security/tomoyo/tomoyo.c |  219 +++++++++++++++++++++++++++++++++++++++++++++++
 security/tomoyo/tomoyo.h |  114 ++++++++++++++++++++++++
 2 files changed, 333 insertions(+)

--- /dev/null
+++ linux-2.6.27-rc6-mm/security/tomoyo/tomoyo.c
@@ -0,0 +1,219 @@
+/*
+ * security/tomoyo/tomoyo.c
+ *
+ * LSM hooks for TOMOYO Linux.
+ */
+
+#include <linux/security.h>
+#include "common.h"
+#include "tomoyo.h"
+#include "realpath.h"
+
+static int tmy_cred_prepare(struct cred *new, const struct cred *old, gfp_t gfp)
+{
+	new->security = kzalloc(sizeof(struct tomoyo_security), gfp);
+	if (!new->security)
+		return -ENOMEM;
+	/* BUG_ON(((struct tomoyo_security *)old->security)->domain_info); */
+	memmove(new->security, old->security, sizeof(struct tomoyo_security));
+	/* printk(KERN_INFO "%s\n", __func__); */
+	return 0;
+}
+
+static int tmy_bprm_check_security(struct linux_binprm *bprm)
+{
+	struct domain_info *next_domain = NULL;
+	int retval = 0;
+	/* struct cred *new; */
+	struct tomoyo_security *p = TMY_CRED(current);
+	/*
+	 * If called by do_execve() (i.e. bprm->cred->security == NULL),
+	 * I do execute permission check and domain transition.
+	 */
+	BUG_ON(!p->domain_info);
+	BUG_ON(!bprm->cred);
+	if (p->next_domain_info)
+		goto out;
+	tmy_load_policy(bprm->filename);
+/*  	new = prepare_creds(); */
+/*  	if (!new) */
+/* 		return -ENOMEM; */
+	retval = tmy_find_next_domain(bprm, &next_domain);
+	if (retval) {
+		/* abort_creds(new); */
+		goto out;
+	}
+	/* Remember next_domain for checking interpreter's permission. */
+	p->next_domain_info = next_domain;
+	/* Remember address of cred for clearing next_domain. */
+	p->cred = bprm->cred;
+	memmove(bprm->cred->security, current->cred->security,
+		sizeof(struct tomoyo_security));
+out:
+	return retval;
+}
+
+static void tmy_bprm_committed_creds(struct linux_binprm *bprm)
+{
+	struct tomoyo_security *p = TMY_CRED(current);
+	/* Apply next_domain_info. */
+	BUG_ON(!p->next_domain_info);
+	p->domain_info = p->next_domain_info;
+	p->next_domain_info = NULL;
+	p->cred = NULL;
+}
+
+static void tmy_cred_free(struct cred *cred)
+{
+	struct tomoyo_security *p = TMY_CRED(current);
+	/* Clear next_domain_info if do_execve() failed. */
+	if (p->cred == cred)
+		p->next_domain_info = NULL;
+	kfree(cred->security);
+}
+
+static int tmy_sysctl(struct ctl_table *table, int op)
+{
+	int error;
+	char *name;
+
+	if ((op & 6) == 0)
+		return 0;
+
+	name = sysctlpath_from_table(table);
+	if (!name)
+		return -ENOMEM;
+
+	error = tmy_check_file_perm(name, op & 6, "sysctl");
+	tmy_free(name);
+
+	return error;
+}
+
+static int tmy_path_truncate(struct path *path, loff_t length,
+			     unsigned int time_attrs, struct file *filp)
+{
+	return tmy_check_1path_perm(TMY_TYPE_TRUNCATE_ACL,
+				    path->dentry, path->mnt);
+}
+
+static int tmy_path_unlink(struct path *dir, struct dentry *dentry)
+{
+	return tmy_check_1path_perm(TMY_TYPE_UNLINK_ACL, dentry, dir->mnt);
+}
+
+static int tmy_path_mkdir(struct path *dir, struct dentry *dentry, int mode)
+{
+	return tmy_check_1path_perm(TMY_TYPE_MKDIR_ACL, dentry, dir->mnt);
+}
+
+static int tmy_path_rmdir(struct path *dir, struct dentry *dentry)
+{
+	return tmy_check_1path_perm(TMY_TYPE_RMDIR_ACL, dentry, dir->mnt);
+}
+
+static int tmy_path_symlink(struct path *dir, struct dentry *dentry,
+			    const char *old_name)
+{
+	return tmy_check_1path_perm(TMY_TYPE_SYMLINK_ACL, dentry, dir->mnt);
+}
+
+static int tmy_path_mknod(struct path *dir, struct dentry *dentry, int mode,
+			  unsigned int dev)
+{
+	struct vfsmount *mnt = dir->mnt;
+	switch (mode & S_IFMT) {
+	case S_IFREG:
+	case 0:
+		return tmy_check_1path_perm(TMY_TYPE_CREATE_ACL, dentry, mnt);
+	case S_IFCHR:
+		return tmy_check_1path_perm(TMY_TYPE_MKCHAR_ACL, dentry, mnt);
+	case S_IFBLK:
+		return tmy_check_1path_perm(TMY_TYPE_MKBLOCK_ACL, dentry, mnt);
+	case S_IFIFO:
+		return tmy_check_1path_perm(TMY_TYPE_MKFIFO_ACL, dentry, mnt);
+	case S_IFSOCK:
+		return tmy_check_1path_perm(TMY_TYPE_MKSOCK_ACL, dentry, mnt);
+	default:
+		return 0;
+	}
+}
+
+static int tmy_path_link(struct dentry *old_dentry, struct path *new_dir,
+			 struct dentry *new_dentry)
+{
+	return tmy_check_2path_perm(TMY_TYPE_LINK_ACL,
+				    old_dentry, new_dir->mnt,
+				    new_dentry, new_dir->mnt);
+}
+
+static int tmy_path_rename(struct path *old_dir, struct dentry *old_dentry,
+			   struct path *new_dir, struct dentry *new_dentry)
+{
+	return tmy_check_2path_perm(TMY_TYPE_RENAME_ACL,
+				    old_dentry, old_dir->mnt,
+				    new_dentry, new_dir->mnt);
+}
+
+static int tmy_file_fcntl(struct file *file, unsigned int cmd,
+			  unsigned long arg)
+{
+	if (cmd == F_SETFL && ((arg ^ file->f_flags) & O_APPEND))
+		return tmy_check_rewrite_permission(file);
+	return 0;
+}
+
+static int tmy_dentry_open(struct file *f, const struct cred *cred)
+{
+	int flags = f->f_flags;
+	if ((flags + 1) & O_ACCMODE)
+		flags++;
+	flags |= f->f_flags & (O_APPEND | O_TRUNC);
+
+	/* BUG_ON(current != &init_task); */
+	BUG_ON(!current->cred);
+	BUG_ON(!current->cred->security);
+	BUG_ON(!((struct tomoyo_security *)(current->cred->security))
+	       ->domain_info);
+	return tmy_check_open_permission(f->f_dentry, f->f_vfsmnt, flags);
+}
+
+static struct security_operations tomoyo_security_ops = {
+	.name                      = "tomoyo",
+	.cred_prepare              = tmy_cred_prepare,
+	.bprm_check_security       = tmy_bprm_check_security,
+	.bprm_committed_creds      = tmy_bprm_committed_creds,
+	.cred_free                 = tmy_cred_free,
+	.sysctl                    = tmy_sysctl,
+	.file_fcntl                = tmy_file_fcntl,
+	.dentry_open               = tmy_dentry_open,
+	.path_truncate             = tmy_path_truncate,
+	.path_unlink               = tmy_path_unlink,
+	.path_mkdir                = tmy_path_mkdir,
+	.path_rmdir                = tmy_path_rmdir,
+	.path_symlink              = tmy_path_symlink,
+	.path_mknod                = tmy_path_mknod,
+	.path_link                 = tmy_path_link,
+	.path_rename               = tmy_path_rename,
+};
+
+static int __init tmy_init(void)
+{
+	struct cred *cred = (struct cred *) current->cred;
+	struct tomoyo_security *p;
+	BUG_ON(current != &init_task);
+	if (!security_module_enable(&tomoyo_security_ops))
+		return 0;
+
+	p = kzalloc(sizeof(*p), GFP_KERNEL);
+	/* register ourselves with the security framework */
+	if (!p || register_security(&tomoyo_security_ops))
+		panic("Failure registering TOMOYO Linux");
+
+	printk(KERN_INFO "TOMOYO Linux initialized\n");
+	p->domain_info = &KERNEL_DOMAIN;
+	cred->security = p;
+	return 0;
+}
+
+security_initcall(tmy_init);
--- /dev/null
+++ linux-2.6.27-rc6-mm/security/tomoyo/tomoyo.h
@@ -0,0 +1,114 @@
+/*
+ * security/tomoyo/tomoyo.h
+ *
+ * Implementation of the Domain-Based Mandatory Access Control.
+ *
+ * Copyright (C) 2005-2008  NTT DATA CORPORATION
+ *
+ * Version: 2.2.0-pre   2008/09/18
+ *
+ */
+
+#ifndef _LINUX_TOMOYO_H
+#define _LINUX_TOMOYO_H
+
+struct path_info;
+struct dentry;
+struct vfsmount;
+struct inode;
+struct linux_binprm;
+struct pt_regs;
+struct tmy_page_buffer;
+
+char *sysctlpath_from_table(struct ctl_table *table);
+int tmy_check_file_perm(const char *filename, const u8 perm,
+			const char *operation);
+int tmy_check_exec_perm(const struct path_info *filename,
+			struct tmy_page_buffer *buf);
+int tmy_check_open_permission(struct dentry *dentry, struct vfsmount *mnt,
+			      const int flag);
+int tmy_check_1path_perm(const u8 operation,
+			 struct dentry *dentry,
+			 struct vfsmount *mnt);
+int tmy_check_2path_perm(const u8 operation,
+			 struct dentry *dentry1,
+			 struct vfsmount *mnt1,
+			 struct dentry *dentry2,
+			 struct vfsmount *mnt2);
+int tmy_check_rewrite_permission(struct file *filp);
+int tmy_find_next_domain(struct linux_binprm *bprm,
+			 struct domain_info **next_domain);
+
+/* Index numbers for Access Controls. */
+
+#define TYPE_SINGLE_PATH_ACL                 0
+#define TYPE_DOUBLE_PATH_ACL                 1
+
+/* Index numbers for File Controls. */
+
+/*
+ * TYPE_READ_WRITE_ACL is special. TYPE_READ_WRITE_ACL is automatically set
+ * if both TYPE_READ_ACL and TYPE_WRITE_ACL are set. Both TYPE_READ_ACL and
+ * TYPE_WRITE_ACL are automatically set if TYPE_READ_WRITE_ACL is set.
+ * TYPE_READ_WRITE_ACL is automatically cleared if either TYPE_READ_ACL or
+ * TYPE_WRITE_ACL is cleared. Both TYPE_READ_ACL and TYPE_WRITE_ACL are
+ * automatically cleared if TYPE_READ_WRITE_ACL is cleared.
+ */
+
+#define TMY_TYPE_READ_WRITE_ACL    0
+#define TMY_TYPE_EXECUTE_ACL       1
+#define TMY_TYPE_READ_ACL          2
+#define TMY_TYPE_WRITE_ACL         3
+#define TMY_TYPE_CREATE_ACL        4
+#define TMY_TYPE_UNLINK_ACL        5
+#define TMY_TYPE_MKDIR_ACL         6
+#define TMY_TYPE_RMDIR_ACL         7
+#define TMY_TYPE_MKFIFO_ACL        8
+#define TMY_TYPE_MKSOCK_ACL        9
+#define TMY_TYPE_MKBLOCK_ACL      10
+#define TMY_TYPE_MKCHAR_ACL       11
+#define TMY_TYPE_TRUNCATE_ACL     12
+#define TMY_TYPE_SYMLINK_ACL      13
+#define TMY_TYPE_REWRITE_ACL      14
+#define MAX_SINGLE_PATH_OPERATION 15
+
+#define TMY_TYPE_LINK_ACL         0
+#define TMY_TYPE_RENAME_ACL       1
+#define MAX_DOUBLE_PATH_OPERATION 2
+
+/* #define TMY_SECURITY ((struct domain_info *) current->cred->security) */
+#define TMY_SECURITY current_domain()
+
+#define TMY_DOMAINPOLICY          0
+#define TMY_EXCEPTIONPOLICY       1
+#define TMY_DOMAIN_STATUS         2
+#define TMY_PROCESS_STATUS        3
+#define TMY_MEMINFO               4
+#define TMY_SELFDOMAIN            5
+#define TMY_VERSION               6
+#define TMY_PROFILE               7
+#define TMY_MANAGER               8
+#define TMY_UPDATESCOUNTER        9
+
+extern struct domain_info KERNEL_DOMAIN;
+
+struct tomoyo_security {
+	struct domain_info *domain_info;
+	struct domain_info *next_domain_info;
+	void *cred;
+};
+
+#define TMY_CRED(task) ((struct tomoyo_security *)(task)->cred->security)
+
+static inline struct domain_info *current_domain(void)
+{
+	struct tomoyo_security *p;
+	BUG_ON(!current->cred);
+	p = TMY_CRED(current);
+	BUG_ON(!p);
+	BUG_ON(!p->domain_info);
+	BUG_ON(!p->domain_info && p->next_domain_info);
+	return p->next_domain_info ? p->next_domain_info : p->domain_info;
+}
+
+#endif
