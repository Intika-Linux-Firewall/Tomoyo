diff -urp linux-2.6.35-rc5-old/net/ipv4/raw.c linux-2.6.35-rc5/net/ipv4/raw.c
--- linux-2.6.35-rc5-old/net/ipv4/raw.c	2010-07-18 15:15:10.000000000 +0900
+++ linux-2.6.35-rc5/net/ipv4/raw.c	2010-07-18 14:32:21.000000000 +0900
@@ -676,12 +676,14 @@ static int raw_recvmsg(struct kiocb *ioc
 		goto out;
 	}
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (len < copied) {
diff -urp linux-2.6.35-rc5-old/net/ipv4/udp.c linux-2.6.35-rc5/net/ipv4/udp.c
--- linux-2.6.35-rc5-old/net/ipv4/udp.c	2010-07-18 15:15:10.000000000 +0900
+++ linux-2.6.35-rc5/net/ipv4/udp.c	2010-07-18 14:31:40.000000000 +0900
@@ -1125,6 +1125,7 @@ int udp_recvmsg(struct kiocb *iocb, stru
 	int err;
 	int is_udplite = IS_UDPLITE(sk);
 	bool slow;
+	bool update_stat;
 
 	/*
 	 *	Check any passed addresses
@@ -1140,9 +1141,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = false;
+		goto csum_copy_err;
+	}
+	update_stat = true;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -1203,7 +1206,7 @@ out:
 
 csum_copy_err:
 	slow = lock_sock_fast(sk);
-	if (!skb_kill_datagram(sk, skb, flags))
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat)
 		UDP_INC_STATS_USER(sock_net(sk), UDP_MIB_INERRORS, is_udplite);
 	unlock_sock_fast(sk, slow);
 
diff -urp linux-2.6.35-rc5-old/net/ipv6/raw.c linux-2.6.35-rc5/net/ipv6/raw.c
--- linux-2.6.35-rc5-old/net/ipv6/raw.c	2010-07-18 15:15:10.000000000 +0900
+++ linux-2.6.35-rc5/net/ipv6/raw.c	2010-07-18 14:32:06.000000000 +0900
@@ -464,12 +464,14 @@ static int rawv6_recvmsg(struct kiocb *i
 	if (np->rxpmtu && np->rxopt.bits.rxpmtu)
 		return ipv6_recv_rxpmtu(sk, msg, len);
 
-	skb = skb_recv_datagram(sk, flags, noblock, &err);
-	if (!skb)
-		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	for (;;) {
+		skb = skb_recv_datagram(sk, flags, noblock, &err);
+		if (!skb)
+			goto out;
+		if (!ccs_socket_post_recvmsg_permission(sk, skb))
+			break;
+		skb_kill_datagram(sk, skb, flags);
+	}
 
 	copied = skb->len;
 	if (copied > len) {
diff -urp linux-2.6.35-rc5-old/net/ipv6/udp.c linux-2.6.35-rc5/net/ipv6/udp.c
--- linux-2.6.35-rc5-old/net/ipv6/udp.c	2010-07-18 15:15:10.000000000 +0900
+++ linux-2.6.35-rc5/net/ipv6/udp.c	2010-07-18 14:33:30.000000000 +0900
@@ -329,6 +329,7 @@ int udpv6_recvmsg(struct kiocb *iocb, st
 	int is_udplite = IS_UDPLITE(sk);
 	int is_udp4;
 	bool slow;
+	bool update_stat;
 
 	if (addr_len)
 		*addr_len=sizeof(struct sockaddr_in6);
@@ -344,9 +345,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
-	err = ccs_socket_recvmsg_permission(sk, skb, flags);
-	if (err)
-		goto out;
+	if (ccs_socket_post_recvmsg_permission(sk, skb)) {
+		update_stat = false;
+		goto csum_copy_err;
+	}
+	update_stat = true;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	if (len > ulen)
@@ -429,7 +432,7 @@ out:
 
 csum_copy_err:
 	slow = lock_sock_fast(sk);
-	if (!skb_kill_datagram(sk, skb, flags)) {
+	if (!skb_kill_datagram(sk, skb, flags) && update_stat) {
 		if (is_udp4)
 			UDP_INC_STATS_USER(sock_net(sk),
 					UDP_MIB_INERRORS, is_udplite);
diff -urp linux-2.6.35-rc5-old/net/socket.c linux-2.6.35-rc5/net/socket.c
--- linux-2.6.35-rc5-old/net/socket.c	2010-07-18 15:15:10.000000000 +0900
+++ linux-2.6.35-rc5/net/socket.c	2010-07-18 15:26:48.000000000 +0900
@@ -1473,6 +1473,7 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (!sock)
 		goto out;
 
+ retry:
 	err = -ENFILE;
 	if (!(newsock = sock_alloc()))
 		goto out_put;
@@ -1501,10 +1502,10 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (err < 0)
 		goto out_fd;
 
-	if (ccs_socket_accept_permission(newsock,
-					 (struct sockaddr *) &address)) {
-		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
-		goto out_fd;
+	if (ccs_socket_post_accept_permission(sock, newsock)) {
+		fput(newfile);
+		put_unused_fd(newfd);
+		goto retry;
 	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
