This is TOMOYO Linux patch for Ubuntu 8.04.

Source code for this patch is "apt-get install linux-source-2.6.24"
---
 arch/ia64/ia32/sys_ia32.c       |    3 +++
 arch/ia64/kernel/ptrace.c       |    3 +++
 arch/mips/kernel/ptrace32.c     |    3 +++
 arch/powerpc/kernel/ptrace32.c  |    3 +++
 arch/s390/kernel/ptrace.c       |    3 +++
 arch/sparc/kernel/ptrace.c      |    5 +++++
 arch/sparc64/kernel/ptrace.c    |    5 +++++
 arch/x86/ia32/ptrace32.c        |    3 +++
 fs/attr.c                       |    5 +++++
 fs/compat.c                     |    3 ++-
 fs/compat_ioctl.c               |    7 +++++++
 fs/exec.c                       |   11 ++++++++++-
 fs/fcntl.c                      |    5 +++++
 fs/ioctl.c                      |    5 +++++
 fs/namei.c                      |   33 +++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   24 ++++++++++++++++++++++++
 fs/open.c                       |   28 ++++++++++++++++++++++++++++
 fs/proc/proc_misc.c             |    1 +
 include/linux/init_task.h       |    2 ++
 include/linux/sched.h           |    4 ++++
 kernel/compat.c                 |    3 +++
 kernel/kexec.c                  |    3 +++
 kernel/kmod.c                   |    3 +++
 kernel/module.c                 |    5 +++++
 kernel/ptrace.c                 |    3 +++
 kernel/sched.c                  |    3 +++
 kernel/signal.c                 |    9 +++++++++
 kernel/sys.c                    |   11 +++++++++++
 kernel/sysctl.c                 |    5 +++++
 kernel/time.c                   |    5 +++++
 kernel/time/ntp.c               |    3 +++
 net/ipv4/inet_connection_sock.c |    3 +++
 net/ipv4/inet_hashtables.c      |    3 +++
 net/ipv4/raw.c                  |    4 ++++
 net/ipv4/udp.c                  |    7 +++++++
 net/ipv6/inet6_hashtables.c     |    3 +++
 net/ipv6/raw.c                  |    4 ++++
 net/ipv6/udp.c                  |    4 ++++
 net/socket.c                    |   23 +++++++++++++++++++++++
 net/unix/af_unix.c              |    4 ++++
 security/Kconfig                |    2 ++
 security/Makefile               |    3 +++
 42 files changed, 267 insertions(+), 2 deletions(-)

--- linux-2.6.24-24.57.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.6.24-24.57/arch/ia64/ia32/sys_ia32.c
@@ -55,6 +55,7 @@
 #include <asm/types.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #include "ia32priv.h"
 
@@ -1758,6 +1759,8 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.24-24.57.orig/arch/ia64/kernel/ptrace.c
+++ linux-2.6.24-24.57/arch/ia64/kernel/ptrace.c
@@ -28,6 +28,7 @@
 #ifdef CONFIG_PERFMON
 #include <asm/perfmon.h>
 #endif
+#include <linux/ccsecurity.h>
 
 #include "entry.h"
 
@@ -1422,6 +1423,8 @@ sys_ptrace (long request, pid_t pid, uns
 	struct task_struct *child;
 	struct switch_stack *sw;
 	long ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.6.24-24.57.orig/arch/mips/kernel/ptrace32.c
+++ linux-2.6.24-24.57/arch/mips/kernel/ptrace32.c
@@ -35,6 +35,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+#include <linux/ccsecurity.h>
 
 int ptrace_getregs(struct task_struct *child, __s64 __user *data);
 int ptrace_setregs(struct task_struct *child, __s64 __user *data);
@@ -50,6 +51,8 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 #if 0
 	printk("ptrace(r=%d,pid=%d,addr=%08lx,data=%08lx)\n",
--- linux-2.6.24-24.57.orig/arch/powerpc/kernel/ptrace32.c
+++ linux-2.6.24-24.57/arch/powerpc/kernel/ptrace32.c
@@ -32,6 +32,7 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+#include <linux/ccsecurity.h>
 
 /*
  * does not yet catch signals sent when the child dies.
@@ -89,6 +90,8 @@ long compat_sys_ptrace(int request, int 
 {
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.6.24-24.57.orig/arch/s390/kernel/ptrace.c
+++ linux-2.6.24-24.57/arch/s390/kernel/ptrace.c
@@ -41,6 +41,7 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifdef CONFIG_COMPAT
 #include "compat_ptrace.h"
@@ -701,6 +702,8 @@ sys_ptrace(long request, long pid, long 
 	struct task_struct *child;
 	int ret;
 
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		 ret = ptrace_traceme();
--- linux-2.6.24-24.57.orig/arch/sparc/kernel/ptrace.c
+++ linux-2.6.24-24.57/arch/sparc/kernel/ptrace.c
@@ -23,6 +23,7 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 #define MAGIC_CONSTANT 0x80000000
 
@@ -267,6 +268,10 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
 
 	lock_kernel();
 #ifdef DEBUG_PTRACE
--- linux-2.6.24-24.57.orig/arch/sparc64/kernel/ptrace.c
+++ linux-2.6.24-24.57/arch/sparc64/kernel/ptrace.c
@@ -32,6 +32,7 @@
 #include <asm/spitfire.h>
 #include <asm/page.h>
 #include <asm/cpudata.h>
+#include <linux/ccsecurity.h>
 
 /* Returning from ptrace is a bit tricky because the syscall return
  * low level code assumes any value returned which is negative and
@@ -180,6 +181,10 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
 	int ret;
+	if (!ccs_capable(CCS_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
 
 	if (test_thread_flag(TIF_32BIT)) {
 		addr &= 0xffffffffUL;
--- linux-2.6.24-24.57.orig/arch/x86/ia32/ptrace32.c
+++ linux-2.6.24-24.57/arch/x86/ia32/ptrace32.c
@@ -27,6 +27,7 @@
 #include <asm/i387.h>
 #include <asm/fpu32.h>
 #include <asm/ia32.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Determines which flags the user has access to [1 = access, 0 = no access].
@@ -235,6 +236,8 @@ asmlinkage long sys32_ptrace(long reques
 	void __user *datap = compat_ptr(data);
 	int ret;
 	__u32 val;
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 
 	switch (request) { 
 	case PTRACE_TRACEME:
--- linux-2.6.24-24.57.orig/fs/attr.c
+++ linux-2.6.24-24.57/fs/attr.c
@@ -14,6 +14,7 @@
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 /* Taken over from the old code... */
 
@@ -160,6 +161,8 @@ int fnotify_change(struct dentry *dentry
 
 	if (inode->i_op && inode->i_op->setattr) {
 		error = security_inode_setattr(dentry, mnt, attr);
+		if (!error)
+			error = ccs_check_setattr_permission(dentry, attr);
 		if (!error) {
 			if (file && file->f_op && file->f_op->fsetattr)
 				error = file->f_op->fsetattr(file, attr);
@@ -170,6 +173,8 @@ int fnotify_change(struct dentry *dentry
 		error = inode_change_ok(inode, attr);
 		if (!error)
 			error = security_inode_setattr(dentry, mnt, attr);
+		if (!error)
+			error = ccs_check_setattr_permission(dentry, attr);
 		if (!error) {
 			if ((ia_valid & ATTR_UID && attr->ia_uid != inode->i_uid) ||
 			    (ia_valid & ATTR_GID && attr->ia_gid != inode->i_gid))
--- linux-2.6.24-24.57.orig/fs/compat.c
+++ linux-2.6.24-24.57/fs/compat.c
@@ -55,6 +55,7 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 int compat_log = 1;
 
@@ -1406,7 +1407,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		/* execve success */
 		security_bprm_free(bprm);
--- linux-2.6.24-24.57.orig/fs/compat_ioctl.c
+++ linux-2.6.24-24.57/fs/compat_ioctl.c
@@ -114,6 +114,7 @@
 #ifdef CONFIG_SPARC
 #include <asm/fbio.h>
 #endif
+#include <linux/ccsecurity.h>
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -2920,6 +2921,8 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
@@ -2944,6 +2947,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.24-24.57.orig/fs/exec.c
+++ linux-2.6.24-24.57/fs/exec.c
@@ -60,6 +60,8 @@
 #include <linux/kmod.h>
 #endif
 
+#include <linux/ccsecurity.h>
+
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
 int suid_dumpable = 0;
@@ -119,6 +121,10 @@ asmlinkage long sys_uselib(const char __
 	if (error)
 		goto exit;
 
+	error = ccs_check_uselib_permission(nd.dentry, nd.mnt);
+	if (error)
+		goto exit;
+
 	file = nameidata_to_filp(&nd, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -656,6 +662,9 @@ struct file *open_exec(const char *name)
 		file = ERR_PTR(-EACCES);
 		if (S_ISREG(inode->i_mode)) {
 			int err = vfs_permission(&nd, MAY_EXEC);
+			if (!err)
+				err = ccs_check_open_exec_permission(nd.dentry,
+								     nd.mnt);
 			file = ERR_PTR(err);
 			if (!err) {
 				file = nameidata_to_filp(&nd, O_RDONLY);
@@ -1349,7 +1358,7 @@ int do_execve(char * filename,
 		goto out;
 	bprm->argv_len = env_p - bprm->p;
 
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval >= 0) {
 		/* execve success */
 		free_arg_pages(bprm);
--- linux-2.6.24-24.57.orig/fs/fcntl.c
+++ linux-2.6.24-24.57/fs/fcntl.c
@@ -23,6 +23,7 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 void fastcall set_close_on_exec(unsigned int fd, int flag)
 {
@@ -217,6 +218,10 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	if (((arg ^ filp->f_flags) & O_APPEND) &&
+	    ccs_check_rewrite_permission(filp))
+		return -EPERM;
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (!is_owner_or_cap(inode))
--- linux-2.6.24-24.57.orig/fs/ioctl.c
+++ linux-2.6.24-24.57/fs/ioctl.c
@@ -15,6 +15,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
+#include <linux/ccsecurity.h>
 
 static long do_ioctl(struct file *filp, unsigned int cmd,
 		unsigned long arg)
@@ -23,6 +24,8 @@ static long do_ioctl(struct file *filp, 
 
 	if (!filp->f_op)
 		goto out;
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -165,6 +168,8 @@ asmlinkage long sys_ioctl(unsigned int f
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
 	if (error)
 		goto out_fput;
 
--- linux-2.6.24-24.57.orig/fs/namei.c
+++ linux-2.6.24-24.57/fs/namei.c
@@ -35,6 +35,8 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+#include <linux/ccsecurity.h>
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1662,6 +1664,11 @@ int may_open(struct nameidata *nd, int a
 		if (!is_owner_or_cap(inode))
 			return -EPERM;
 
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_check_open_permission(dentry, nd->mnt, flag);
+	if (error)
+		return error;
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1703,6 +1710,9 @@ static int open_namei_create(struct name
 
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_check_mknod_permission(dir->d_inode, path->dentry, nd->mnt,
+					   mode, 0);
+	if (!error)
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
 	mutex_unlock(&dir->d_inode->i_mutex);
 	dput(nd->dentry);
@@ -1713,6 +1723,7 @@ static int open_namei_create(struct name
 	return may_open(nd, 0, flag & ~O_TRUNC);
 }
 
+#include <linux/ccsecurity_vfs.h>
 /*
  *	open_namei()
  *
@@ -1987,6 +1998,10 @@ asmlinkage long sys_mknodat(int dfd, con
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
+		error = ccs_check_mknod_permission(nd.dentry->d_inode, dentry,
+						   nd.mnt, mode,
+						   new_decode_dev(dev));
+		if (!error)
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.dentry->d_inode,dentry,mode,&nd);
@@ -2065,6 +2080,9 @@ asmlinkage long sys_mkdirat(int dfd, con
 
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
+	error = ccs_check_mkdir_permission(nd.dentry->d_inode, dentry, nd.mnt,
+					   mode);
+	if (!error)
 	error = vfs_mkdir(nd.dentry->d_inode, dentry, nd.mnt, mode);
 	dput(dentry);
 out_unlock:
@@ -2173,6 +2191,8 @@ static long do_rmdir(int dfd, const char
 	error = PTR_ERR(dentry);
 	if (IS_ERR(dentry))
 		goto exit2;
+	error = ccs_check_rmdir_permission(nd.dentry->d_inode, dentry, nd.mnt);
+	if (!error)
 	error = vfs_rmdir(nd.dentry->d_inode, dentry, nd.mnt);
 	dput(dentry);
 exit2:
@@ -2253,6 +2273,9 @@ static long do_unlinkat(int dfd, const c
 		inode = dentry->d_inode;
 		if (inode)
 			atomic_inc(&inode->i_count);
+		error = ccs_check_unlink_permission(nd.dentry->d_inode, dentry,
+						    nd.mnt);
+		if (!error)
 		error = vfs_unlink(nd.dentry->d_inode, dentry, nd.mnt);
 	exit2:
 		dput(dentry);
@@ -2335,6 +2358,9 @@ asmlinkage long sys_symlinkat(const char
 	if (IS_ERR(dentry))
 		goto out_unlock;
 
+	error = ccs_check_symlink_permission(nd.dentry->d_inode, dentry,
+					     nd.mnt, from);
+	if (!error)
 	error = vfs_symlink(nd.dentry->d_inode, dentry, nd.mnt, from,
 			    S_IALLUGO);
 	dput(dentry);
@@ -2432,6 +2458,9 @@ asmlinkage long sys_linkat(int olddfd, c
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto out_unlock;
+	error = ccs_check_link_permission(old_nd.dentry, nd.dentry->d_inode,
+					  new_dentry, nd.mnt);
+	if (!error)
 	error = vfs_link(old_nd.dentry, old_nd.mnt, nd.dentry->d_inode,
 			 new_dentry, nd.mnt);
 	dput(new_dentry);
@@ -2665,6 +2694,10 @@ static int do_rename(int olddfd, const c
 	error = -ENOTEMPTY;
 	if (new_dentry == trap)
 		goto exit5;
+	error = ccs_check_rename_permission(old_dir->d_inode, old_dentry,
+					    new_dir->d_inode, new_dentry,
+					    newnd.mnt);
+	if (!error)
 
 	error = vfs_rename(old_dir->d_inode, old_dentry, oldnd.mnt,
 			   new_dir->d_inode, new_dentry, newnd.mnt);
--- linux-2.6.24-24.57.orig/fs/namespace.c
+++ linux-2.6.24-24.57/fs/namespace.c
@@ -29,6 +29,7 @@
 #include <asm/unistd.h>
 #include "pnode.h"
 #include "internal.h"
+#include <linux/ccsecurity.h>
 
 /* spinlock for vfsmount related operations, inplace of dcache_lock */
 __cacheline_aligned_in_smp DEFINE_SPINLOCK(vfsmount_lock);
@@ -545,6 +546,9 @@ static int do_umount(struct vfsmount *mn
 	if (retval)
 		return retval;
 
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
 	 * unmounting unconditionally. Unmount only happens if:
@@ -633,6 +637,8 @@ asmlinkage long sys_umount(char __user *
 {
 	struct nameidata nd;
 	int retval;
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
 
 	retval = __user_walk(name, LOOKUP_FOLLOW, &nd);
 	if (retval)
@@ -940,6 +946,9 @@ static int do_loopback(struct nameidata 
 
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto out;
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1025,6 +1034,9 @@ static int do_move_mount(struct nameidat
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
 
+	err = -EPERM;
+	if (ccs_may_umount(old_nd.mnt) || ccs_may_mount(nd))
+		goto out;
 	err = -ENOENT;
 	mutex_lock(&nd->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(nd->dentry->d_inode))
@@ -1126,6 +1138,9 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto unlock;
 
 	newmnt->mnt_flags = mnt_flags;
 
@@ -1436,6 +1451,11 @@ long do_mount(char *dev_name, char *dir_
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+	retval = ccs_check_mount_permission(dev_name, dir_name, type_page,
+					    &flags);
+	if (retval)
+		return retval;
+
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
 		mnt_flags |= MNT_NOSUID;
@@ -1717,6 +1737,8 @@ asmlinkage long sys_pivot_root(const cha
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_PIVOT_ROOT))
+		return -EPERM;
 
 	lock_kernel();
 
@@ -1733,6 +1755,8 @@ asmlinkage long sys_pivot_root(const cha
 		goto out1;
 
 	error = security_sb_pivotroot(&old_nd, &new_nd);
+	if (!error)
+		error = ccs_check_pivot_root_permission(&old_nd, &new_nd);
 	if (error) {
 		path_release(&old_nd);
 		goto out1;
--- linux-2.6.24-24.57.orig/fs/open.c
+++ linux-2.6.24-24.57/fs/open.c
@@ -27,6 +27,7 @@
 #include <linux/rcupdate.h>
 #include <linux/audit.h>
 #include <linux/falloc.h>
+#include <linux/ccsecurity.h>
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -267,6 +268,9 @@ static long do_sys_truncate(const char _
 	if (error)
 		goto put_write_and_out;
 
+	error = ccs_check_truncate_permission(nd.dentry, nd.mnt, length, 0);
+	if (error)
+		goto put_write_and_out;
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -321,6 +325,10 @@ static long do_sys_ftruncate(unsigned in
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	error = ccs_check_truncate_permission(dentry, file->f_vfsmnt, length,
+					      0);
+	if (error)
+		goto out_putf;
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, file->f_path.mnt, length,
@@ -542,6 +550,10 @@ asmlinkage long sys_chroot(const char __
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	if (!ccs_capable(CCS_SYS_CHROOT))
+		goto dput_and_out;
+	if (ccs_check_chroot_permission(&nd))
+		goto dput_and_out;
 
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
@@ -575,6 +587,9 @@ asmlinkage long sys_fchmod(unsigned int 
 	err = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto out_putf;
+	err = ccs_chmod_permission(dentry, file->f_vfsmnt, mode);
+	if (err)
+		goto out_putf;
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
 		mode = inode->i_mode;
@@ -609,6 +624,9 @@ asmlinkage long sys_fchmodat(int dfd, co
 	error = -EPERM;
 	if (IS_IMMUTABLE(inode) || IS_APPEND(inode))
 		goto dput_and_out;
+	error = ccs_chmod_permission(nd.dentry, nd.mnt, mode);
+	if (error)
+		goto dput_and_out;
 
 	mutex_lock(&inode->i_mutex);
 	if (mode == (mode_t) -1)
@@ -676,6 +694,8 @@ asmlinkage long sys_chown(const char __u
 	error = user_path_walk(filename, &nd);
 	if (error)
 		goto out;
+	error = ccs_chown_permission(nd.dentry, nd.mnt, user, group);
+	if (!error)
 	error = chown_common(nd.dentry, nd.mnt, user, group, NULL);
 	path_release(&nd);
 out:
@@ -696,6 +716,8 @@ asmlinkage long sys_fchownat(int dfd, co
 	error = __user_walk_fd(dfd, filename, follow, &nd);
 	if (error)
 		goto out;
+	error = ccs_chown_permission(nd.dentry, nd.mnt, user, group);
+	if (!error)
 	error = chown_common(nd.dentry, nd.mnt, user, group, NULL);
 	path_release(&nd);
 out:
@@ -710,6 +732,8 @@ asmlinkage long sys_lchown(const char __
 	error = user_path_walk_link(filename, &nd);
 	if (error)
 		goto out;
+	error = ccs_chown_permission(nd.dentry, nd.mnt, user, group);
+	if (!error)
 	error = chown_common(nd.dentry, nd.mnt, user, group, NULL);
 	path_release(&nd);
 out:
@@ -729,6 +753,8 @@ asmlinkage long sys_fchown(unsigned int 
 
 	dentry = file->f_path.dentry;
 	audit_inode(NULL, dentry);
+	error = ccs_chown_permission(dentry, file->f_vfsmnt, user, group);
+	if (!error)
 	error = chown_common(dentry, file->f_path.mnt, user, group, file);
 	fput(file);
 out:
@@ -1162,6 +1188,8 @@ EXPORT_SYMBOL(sys_close);
  */
 asmlinkage long sys_vhangup(void)
 {
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		/* XXX: this needs locking */
 		tty_vhangup(current->signal->tty);
--- linux-2.6.24-24.57.orig/fs/proc/proc_misc.c
+++ linux-2.6.24-24.57/fs/proc/proc_misc.c
@@ -784,4 +784,5 @@ void __init proc_misc_init(void)
 			entry->proc_fops = &proc_sysrq_trigger_operations;
 	}
 #endif
+	printk(KERN_INFO "Hook version: 2.6.24-24.57 2009/08/09\n");
 }
--- linux-2.6.24-24.57.orig/include/linux/init_task.h
+++ linux-2.6.24-24.57/include/linux/init_task.h
@@ -173,6 +173,8 @@ extern struct group_info init_groups;
 	.dirties = INIT_PROP_LOCAL_SINGLE(dirties),			\
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
+	.ccs_domain_info = NULL,                 \
+	.ccs_flags = 0,                          \
 }
 
 
--- linux-2.6.24-24.57.orig/include/linux/sched.h
+++ linux-2.6.24-24.57/include/linux/sched.h
@@ -28,6 +28,8 @@
 #define CLONE_NEWPID		0x20000000	/* New pid namespace */
 #define CLONE_NEWNET		0x40000000	/* New network namespace */
 
+struct ccs_domain_info;
+
 /*
  * Scheduling policies
  */
@@ -1188,6 +1190,8 @@ struct task_struct {
 	struct latency_record latency_record[LT_SAVECOUNT];
 #endif
 	struct list_head	*scm_work_list;
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
 };
 
 /*
--- linux-2.6.24-24.57.orig/kernel/compat.c
+++ linux-2.6.24-24.57/kernel/compat.c
@@ -25,6 +25,7 @@
 #include <linux/posix-timers.h>
 
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 int get_compat_timespec(struct timespec *ts, const struct compat_timespec __user *cts)
 {
@@ -870,6 +871,8 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.24-24.57.orig/kernel/kexec.c
+++ linux-2.6.24-24.57/kernel/kexec.c
@@ -31,6 +31,7 @@
 #include <asm/system.h>
 #include <asm/semaphore.h>
 #include <asm/sections.h>
+#include <linux/ccsecurity.h>
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -933,6 +934,8 @@ asmlinkage long sys_kexec_load(unsigned 
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.24-24.57.orig/kernel/kmod.c
+++ linux-2.6.24-24.57/kernel/kmod.c
@@ -173,6 +173,9 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+
 	retval = -EPERM;
 	if (current->fs->root)
 		retval = kernel_execve(sub_info->path,
--- linux-2.6.24-24.57.orig/kernel/module.c
+++ linux-2.6.24-24.57/kernel/module.c
@@ -46,6 +46,7 @@
 #include <asm/semaphore.h>
 #include <asm/cacheflush.h>
 #include <linux/license.h>
+#include <linux/ccsecurity.h>
 
 extern int module_sysfs_initialized;
 
@@ -664,6 +665,8 @@ sys_delete_module(const char __user *nam
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2099,6 +2102,8 @@ sys_init_module(void __user *umod,
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.24-24.57.orig/kernel/ptrace.c
+++ linux-2.6.24-24.57/kernel/ptrace.c
@@ -23,6 +23,7 @@
 
 #include <asm/pgtable.h>
 #include <asm/uaccess.h>
+#include <linux/ccsecurity.h>
 
 /*
  * ptrace a task: make the debugger its new parent and
@@ -467,6 +468,8 @@ asmlinkage long sys_ptrace(long request,
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
 	 */
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
 		ret = ptrace_traceme();
--- linux-2.6.24-24.57.orig/kernel/sched.c
+++ linux-2.6.24-24.57/kernel/sched.c
@@ -66,6 +66,7 @@
 
 #include <asm/tlb.h>
 #include <asm/irq_regs.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Scheduler clock - returns current time in nanosec units.
@@ -4181,6 +4182,8 @@ int can_nice(const struct task_struct *p
 asmlinkage long sys_nice(int increment)
 {
 	long nice, retval;
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.24-24.57.orig/kernel/signal.c
+++ linux-2.6.24-24.57/kernel/signal.c
@@ -32,6 +32,7 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+#include <linux/ccsecurity.h>
 
 /*
  * SLAB caches for signal bits.
@@ -2214,6 +2215,8 @@ asmlinkage long
 sys_kill(int pid, int sig)
 {
 	struct siginfo info;
+	if (ccs_kill_permission(pid, sig))
+		return -EPERM;
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2272,6 +2275,8 @@ asmlinkage long sys_tgkill(int tgid, int
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	if (ccs_tgkill_permission(tgid, pid, sig))
+		return -EPERM;
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2285,6 +2290,8 @@ sys_tkill(int pid, int sig)
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	if (ccs_tkill_permission(pid, sig))
+		return -EPERM;
 
 	return do_tkill(0, pid, sig);
 }
@@ -2302,6 +2309,8 @@ sys_rt_sigqueueinfo(int pid, int sig, si
 	if (info.si_code >= 0)
 		return -EPERM;
 	info.si_signo = sig;
+	if (ccs_sigqueue_permission(pid, sig))
+		return -EPERM;
 
 	/* POSIX.1b doesn't mention process groups.  */
 	return kill_proc_info(sig, &info, pid);
--- linux-2.6.24-24.57.orig/kernel/sys.c
+++ linux-2.6.24-24.57/kernel/sys.c
@@ -42,6 +42,7 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -140,6 +141,10 @@ asmlinkage long sys_setpriority(int whic
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -376,6 +381,8 @@ asmlinkage long sys_reboot(int magic1, i
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1362,6 +1369,8 @@ asmlinkage long sys_sethostname(char __u
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1407,6 +1416,8 @@ asmlinkage long sys_setdomainname(char _
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.24-24.57.orig/kernel/sysctl.c
+++ linux-2.6.24-24.57/kernel/sysctl.c
@@ -50,6 +50,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+#include <linux/ccsecurity.h>
 
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
@@ -1391,6 +1392,7 @@ char *sysctl_pathname(ctl_table *table, 
 EXPORT_SYMBOL(sysctl_pathname);
 
 #ifdef CONFIG_SYSCTL_SYSCALL
+
 int do_sysctl(int __user *name, int nlen, void __user *oldval, size_t __user *oldlenp,
 	       void __user *newval, size_t newlen)
 {
@@ -1407,6 +1409,9 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen, head->ctl_table);
 		if (error != -ENOTDIR) {
--- linux-2.6.24-24.57.orig/kernel/time.c
+++ linux-2.6.24-24.57/kernel/time.c
@@ -38,6 +38,7 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+#include <linux/ccsecurity.h>
 
 /*
  * The timezone where the local system is located.  Used as a default by some
@@ -86,6 +87,8 @@ asmlinkage long sys_stime(time_t __user 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	do_settimeofday(&tv);
 	return 0;
@@ -155,6 +158,8 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.24-24.57.orig/kernel/time/ntp.c
+++ linux-2.6.24-24.57/kernel/time/ntp.c
@@ -17,6 +17,7 @@
 #include <linux/capability.h>
 #include <asm/div64.h>
 #include <asm/timex.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Timekeeping variables
@@ -246,6 +247,8 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
 
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.6.24-24.57.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.24-24.57/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,7 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+#include <linux/ccsecurity.h>
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -99,6 +100,8 @@ int inet_csk_get_port(struct inet_hashin
 		do {
 			head = &hashinfo->bhash[inet_bhashfn(rover, hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			if (ccs_lport_reserved(rover))
+				goto next;
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (tb->port == rover)
 					goto next;
--- linux-2.6.24-24.57.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.24-24.57/net/ipv4/inet_hashtables.c
@@ -22,6 +22,7 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+#include <linux/ccsecurity.h>
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -292,6 +293,8 @@ int inet_hash_connect(struct inet_timewa
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
 			spin_lock(&head->lock);
 
--- linux-2.6.24-24.57.orig/net/ipv4/raw.c
+++ linux-2.6.24-24.57/net/ipv4/raw.c
@@ -79,6 +79,7 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+#include <linux/ccsecurity.h>
 
 struct hlist_head raw_v4_htable[RAWV4_HTABLE_SIZE];
 DEFINE_RWLOCK(raw_v4_lock);
@@ -605,6 +606,9 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.24-24.57.orig/net/ipv4/udp.c
+++ linux-2.6.24-24.57/net/ipv4/udp.c
@@ -104,6 +104,7 @@
 #include <net/checksum.h>
 #include <net/xfrm.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 /*
  *	Snmp MIB for the UDP layer
@@ -159,6 +160,8 @@ int __udp_lib_get_port(struct sock *sk, 
 		/* 1st pass: look for empty (or shortest) hash chain */
 		for (i = 0; i < UDP_HTABLE_SIZE; i++) {
 			int size = 0;
+			if (ccs_lport_reserved(rover))
+				goto next;
 
 			head = &udptable[rover & (UDP_HTABLE_SIZE - 1)];
 			if (hlist_empty(head))
@@ -182,6 +185,7 @@ int __udp_lib_get_port(struct sock *sk, 
 		/* 2nd pass: find hole in shortest hash chain */
 		rover = best;
 		for (i = 0; i < (1 << 16) / UDP_HTABLE_SIZE; i++) {
+			if (!ccs_lport_reserved(rover))
 			if (! __udp_lib_lport_inuse(rover, udptable))
 				goto gotit;
 			rover += UDP_HTABLE_SIZE;
@@ -841,6 +845,9 @@ try_again:
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.24-24.57.orig/net/ipv6/inet6_hashtables.c
+++ linux-2.6.24-24.57/net/ipv6/inet6_hashtables.c
@@ -21,6 +21,7 @@
 #include <net/inet_hashtables.h>
 #include <net/inet6_hashtables.h>
 #include <net/ip.h>
+#include <linux/ccsecurity.h>
 
 void __inet6_hash(struct inet_hashinfo *hashinfo,
 				struct sock *sk)
@@ -267,6 +268,8 @@ int inet6_hash_connect(struct inet_timew
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			if (ccs_lport_reserved(port))
+				continue;
 			head = &hinfo->bhash[inet_bhashfn(port, hinfo->bhash_size)];
 			spin_lock(&head->lock);
 
--- linux-2.6.24-24.57.orig/net/ipv6/raw.c
+++ linux-2.6.24-24.57/net/ipv6/raw.c
@@ -59,6 +59,7 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+#include <linux/ccsecurity.h>
 
 struct hlist_head raw_v6_htable[RAWV6_HTABLE_SIZE];
 DEFINE_RWLOCK(raw_v6_lock);
@@ -443,6 +444,9 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.24-24.57.orig/net/ipv6/udp.c
+++ linux-2.6.24-24.57/net/ipv6/udp.c
@@ -49,6 +49,7 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+#include <linux/ccsecurity.h>
 
 DEFINE_SNMP_STAT(struct udp_mib, udp_stats_in6) __read_mostly;
 
@@ -134,6 +135,9 @@ try_again:
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.24-24.57.orig/net/socket.c
+++ linux-2.6.24-24.57/net/socket.c
@@ -94,6 +94,8 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+#include <linux/ccsecurity.h>
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -551,6 +553,10 @@ static inline int __sock_sendmsg(struct 
 	si->size = size;
 
 	err = security_socket_sendmsg(sock, msg, size);
+	if (!err)
+		err = ccs_socket_sendmsg_permission(sock, (struct sockaddr *)
+						    msg->msg_name,
+						    msg->msg_namelen);
 	if (err)
 		return err;
 
@@ -1107,6 +1113,8 @@ static int __sock_create(struct net *net
 	}
 
 	err = security_socket_create(family, type, protocol, kern);
+	if (!err)
+		err = ccs_socket_create_permission(family, type, protocol);
 	if (err)
 		return err;
 
@@ -1338,6 +1346,11 @@ asmlinkage long sys_bind(int fd, struct 
 						   (struct sockaddr *)address,
 						   addrlen);
 			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 address,
+								 addrlen);
+			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
 						      address, addrlen);
@@ -1367,6 +1380,8 @@ asmlinkage long sys_listen(int fd, int b
 
 		err = security_socket_listen(sock, backlog);
 		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
 		fput_light(sock->file, fput_needed);
@@ -1430,6 +1445,11 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_fd;
 
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)address,
 					  &len, 2) < 0) {
@@ -1492,6 +1512,9 @@ asmlinkage long sys_connect(int fd, stru
 
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)address, addrlen);
+	if (!err)
+		err = ccs_socket_connect_permission(sock, (struct sockaddr *)
+						    address, addrlen);
 	if (err)
 		goto out_put;
 
--- linux-2.6.24-24.57.orig/net/unix/af_unix.c
+++ linux-2.6.24-24.57/net/unix/af_unix.c
@@ -116,6 +116,7 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+#include <linux/ccsecurity.h>
 
 int sysctl_unix_max_dgram_qlen __read_mostly = 10;
 
@@ -839,6 +840,9 @@ static int unix_bind(struct socket *sock
 		 */
 		mode = S_IFSOCK |
 		       (SOCK_INODE(sock)->i_mode & ~current->fs->umask);
+		err = ccs_check_mknod_permission(nd.dentry->d_inode, dentry,
+						 nd.mnt, mode, 0);
+		if (!err)
 		err = vfs_mknod(nd.dentry->d_inode, dentry, nd.mnt, mode, 0);
 		if (err)
 			goto out_mknod_dput;
--- linux-2.6.24-24.57.orig/security/Kconfig
+++ linux-2.6.24-24.57/security/Kconfig
@@ -106,5 +106,7 @@ config SECURITY_ROOTPLUG
 source security/selinux/Kconfig
 source security/apparmor/Kconfig
 
+source security/ccsecurity/Kconfig
+
 endmenu
 
--- linux-2.6.24-24.57.orig/security/Makefile
+++ linux-2.6.24-24.57/security/Makefile
@@ -17,3 +17,6 @@ obj-$(CONFIG_SECURITY_SELINUX)		+= selin
 obj-$(CONFIG_SECURITY_APPARMOR)		+= commoncap.o apparmor/
 obj-$(CONFIG_SECURITY_CAPABILITIES)	+= commoncap.o capability.o
 obj-$(CONFIG_SECURITY_ROOTPLUG)		+= commoncap.o root_plug.o
+
+subdir-$(CONFIG_CCSECURITY)+= ccsecurity
+obj-$(CONFIG_CCSECURITY)+= ccsecurity/built-in.o
