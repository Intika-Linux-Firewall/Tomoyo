<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>TOMOYO Linux 1.8.x : The Official Guide : Chapter 4</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../media/tomoyotitle.png" alt="tomoyotitle.png" width="320" height="40" border="0" align="left" title="TOMOYO Linux"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.en" title="TOMOYO Linux Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../about.html.en" title="About TOMOYO Linux">About</a></li>
<li id="tomoyo-download"><a href="../download.html.en" title="Get TOMOYO Linux">Download</a></li>
<li id="tomoyo-changelogs"><a href="../changelogs.html.en" title="TOMOYO Linux ChangeLogs">ChangeLogs</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../links.html.en" title="Links">Links</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="chapter-4.html.ja" title="Go to Japanese page">Japanese page</a></li>
</ul>
</div>

<div id="content">

<div id="documentation">

<div class="navheader">
<p><a href="chapter-3.html.en">&lt;Prev&gt;</a> <a href="index.html.en">&lt;Index&gt;</a> <a href="chapter-5.html.en">&lt;Next&gt;</a></p>
</div>

<h2>Chapter 4: Basic knowledge about TOMOYO Linux</h2>

<p>In this chapter, specification of TOMOYO Linux is described. You don't need to memorize/understand all at once. You can come back to this chapter at any time.</p>

<h3><a name="4.1">4.1. Things needed for auditing/restricting access requests</a></h3>

<p></p>

<h3><a name="4.2">4.2. Understanding TOMOYO's domains</a></h3>

<p>TODO: Add explanation of process's lifecycle (fork()/execve()/exit()).</p>

<p>In TOMOYO Linux, <strong>"domains"</strong> are used for describing a process's credential. This is an important concept. Every process in a system belongs to a domain. Each domain has a name called <strong>"domainname"</strong>. By default, domainnames are mechanically determined as a concatenation of pathnames the process has executed by that moment. That is, broadly speaking, every time a process executes some program, the process moves from one domain to another domain. Moving from one domain to another domain is called a <strong>"domain transition"</strong>. Have a look at this diagram:</p>

<img src="media/domain_transition.png" alt="domain_transition.png" title="Domain Transition" width="600" height="450">

<p>In a Linux system, the kernel program is executed as the initial process. Therefore, the initial process belongs to the "<strong>&lt;kernel&gt;</strong>" domain. The initial process then by default executes <code>/sbin/init</code> using execve(). Since the initial process belonged to the "&lt;kernel&gt;" domain, the initial process process moves from the "&lt;kernel&gt;" domain to "<strong>&lt;kernel&gt; /sbin/init</strong>" domain by executing <code>/sbin/init</code>. At this point, there are two domains. One is the "&lt;kernel&gt;" domain which is used by the initial process running as the kernel program, and the other is the "&lt;kernel&gt; /sbin/init" domain which is used by the initial process running as <code>/sbin/init</code>. TOMOYO distinguishes these two domains by domainnames.</p>

<p>Then, the initial process creates a new process using fork() and then the newly created process executes <code>/etc/rc.d/rc.sysinit</code>. As a result, the newly created process moves from "&lt;kernel&gt; /sbin/init" domain to "<strong>&lt;kernel&gt; /sbin/init /etc/rc.d/rc.sysinit</strong>" domain. When <code>/etc/rc.d/rc.sysinit</code> finished doing its purpose, the newly created process is terminated by exit(). Then, the initial process again creates a new process using fork() and then the newly created process executes <code>/etc/rc.d/rc</code>. As a result, the newly created process moves from "&lt;kernel&gt; /sbin/init" domain to "<strong>&lt;kernel&gt; /sbin/init /etc/rc.d/rc</strong>" domain. When <code>/etc/rc.d/rc</code> finished doing its purpose, the newly created process is terminated by exit().</p>

<p>Did you notice that the initial process remained at the "&lt;kernel&gt; /sbin/init" domain whereas the newly created processes went to further domains? TOMOYO utilizes the domainnames these processes belong to as credentials.</p>

<!--
<p>The process execution history is important. Consider the following domains:</p>

<p>&lt;kernel&gt; /sbin/init <strong>/etc/rc.d/rc</strong><br>
&lt;kernel&gt; /sbin/init /etc/rc.d/rc.sysinit <strong>/etc/rc.d/rc</strong></p>

<p>In both cases, the script "/etc/rc.d/rc" is the process causing a new domain to be created. However, <strong>because the process execution history is different, they are considered to be two separate domains</strong>. This allows you to control what can be executed by any particular domain, and allows policy to be more flexible as you can apply different levels of restriction to a process depending on how it was executed.</p>
-->
<!--There is also the possibility to manage domain transition very precisely and for example apply the same restriction to a process without regard to how it was executed. This topic will be discussed later.-->

<h3><a name="4.2">4.2. Making domainnames shorter</a></h3>

<p>You might wonder that what happens if some process forever repeated execve() .</p>
<p>We cannot deal with infinite length of domainnames due to amount of memory available and usability problem. Therefore, max length of any domainname is limited to 4000 bytes. Any execve() requests that exceeds this limit will be rejected.</p>

<p>Then, you might worry that all domainnames can be kept within this limit. Don't worry. You won't get such long domainnames unless you execute programs like below:</p>

<pre class="command">#! /bin/sh
exec $0
</pre>

<p>But sometimes you may want to assign the same domain regardless of previously executed pathnames. For example, you may want to deal with daemon programs automatically started upon boot and manually restarted after boot equally. You can use below syntax for explicitly controlling domain transition.</p>

<ul>
<li>default_transition $program keep</li>
<li>default_transition $program $domainname</li>
<li>default_transition $program child</li>
<li>default_transition $program $pathname</li>
</ul>

<p>The first line is used for staying at current domain. For example,</p>

<pre>
default_transition /usr/bin/xargs keep
</pre>

<p>causes current process to stay at current domain when <code>/usr/bin/xargs</code> is executed.</p>

<p>The second line is used for aggregating domains. For example,</p>

<pre>
default_transition /usr/sbin/sshd &lt;kernel&gt; /usr/sbin/sshd
</pre>

<p>causes current process to go to "&lt;kernel&gt; /usr/sbin/sshd" domain when <code>/usr/sbin/sshd</code> is executed.</p>

<p>The third line is used for going to child of current domain. For example,</p>

<pre>
default_transition /bin/sh child
</pre>

<p>causes current process to go to the child of current domain (e.g. "&lt;kernel&gt; /usr/sbin/sshd /bin/sh" domain if current domain is "&lt;kernel&gt; /usr/sbin/sshd") when <code>/bin/sh</code> is executed.</p>

<p>The fourth line is used for going to child of current domain with the given name. For example,</p>

<pre>
default_transition /tmp/logrotate.\?\?\?\?\?\? /tmp/logrotate.tmp
</pre>

<p>causes current process to go to the chlid of current domain (e.g. "&lt;kernel&gt; /usr/sbin/logrotate /tmp/logrotate.tmp" domain if current domain is "&lt;kernel&gt; /usr/sbin/logrotate" domain) when a program that matches TOMOYO's wildcard expression <code>/tmp/logrotate.\?\?\?\?\?\?</code> is executed.</p>

<p>The difference between "child" and "$pathname" is that the former uses requested program's pathname for determining domainname whereas the latter uses $pathname for determining domainname. This difference is important when aggregating domains for temporarily executed programs. For example, suppose current domain is "&lt;kernel&gt; /usr/sbin/libvirtd",</p>

<pre>
default_transition /tmp/virtd\?\?\?\?\?\? child
</pre>

<p>causes transition to "&lt;kernel&gt; /usr/sbin/libvirtd /tmp/virtdgbr4ew" domain when <code>/tmp/virtdgbr4ew</code> is executed and "&lt;kernel&gt; /usr/sbin/libvirtd /tmp/virtdh5ebr8" domain when <code>/tmp/virtdh5ebr8</code> is executed. On the other hand,</p>

<pre>
default_transition /tmp/virtd\?\?\?\?\?\? /tmp/virtd.tmp
</pre>

<p>causes transition to "&lt;kernel&gt; /usr/sbin/libvirtd /tmp/virtd.tmp" domain when <code>/tmp/virtdgbr4ew</code> or <code>/tmp/virtdh5ebr8</code> is executed.</p>

<h3><a name="4.3">4.3. Understanding TOMOYO's wildcard expressions.</a></h3>

<h4><a name="4.3.1">4.3.1. About word expression rules</a></h4>

<p>In TOMOYO Linux, any string is represented using ASCII printable characters.</p>

<p>Pathnames may contain not only regular characters but also spaces, carriage returns and multibyte characters. Such pathnames can be managed by TOMOYO Linux using octal expressions. Information from the table below can be used to represent special characters.</p>

<p>The first row indicates the lower 4 bits and the first column indicates the higher 4 bits.</p>

<div class="simple-table">
<table>
<tr>
<td>
</td>
<th><p>0x0</p></th>
<th><p>0x1</p></th>
<th><p>0x2</p></th>
<th><p>0x3</p></th>
<th><p>0x4</p></th>
<th><p>0x5</p></th>
<th><p>0x6</p></th>
<th><p>0x7</p></th>
<th><p>0x8</p></th>
<th><p>0x9</p></th>
<th><p>0xA</p></th>
<th><p>0xB</p></th>
<th><p>0xC</p></th>
<th><p>0xD</p></th>
<th><p>0xE</p></th>
<th><p>0xF</p></th>
</tr>
<tr>
<th><p>0x0</p></th>
<td><p>\000</p></td>
<td><p>\001</p></td>
<td><p>\002</p></td>
<td><p>\003</p></td>
<td><p>\004</p></td>
<td><p>\005</p></td>
<td><p>\006</p></td>
<td><p>\007</p></td>
<td><p>\010</p></td>
<td><p>\011</p></td>
<td><p>\012</p></td>
<td><p>\013</p></td>
<td><p>\014</p></td>
<td><p>\015</p></td>
<td><p>\016</p></td>
<td><p>\017</p></td>
</tr>
<tr>
<th><p>0x1</p></th>
<td><p>\020</p></td>
<td><p>\021</p></td>
<td><p>\022</p></td>
<td><p>\023</p></td>
<td><p>\024</p></td>
<td><p>\025</p></td>
<td><p>\026</p></td>
<td><p>\027</p></td>
<td><p>\030</p></td>
<td><p>\031</p></td>
<td><p>\032</p></td>
<td><p>\033</p></td>
<td><p>\034</p></td>
<td><p>\035</p></td>
<td><p>\036</p></td>
<td><p>\037</p></td>
</tr>
<tr>
<th><p>0x2</p></th>
<td><p>\040</p></td>
<td><p>!</p></td>
<td><p>"</p></td>
<td><p>#</p></td>
<td><p>$</p></td>
<td><p>%</p></td>
<td><p>&amp;</p></td>
<td><p>'</p></td>
<td><p>(</p></td>
<td><p>)</p></td>
<td><p>*</p></td>
<td><p>+</p></td>
<td><p>,</p></td>
<td><p>-</p></td>
<td><p>.</p></td>
<td><p>/</p></td>
</tr>
<tr>
<th><p>0x3</p></th>
<td><p>0</p></td>
<td><p>1</p></td>
<td><p>2</p></td>
<td><p>3</p></td>
<td><p>4</p></td>
<td><p>5</p></td>
<td><p>6</p></td>
<td><p>7</p></td>
<td><p>8</p></td>
<td><p>9</p></td>
<td><p>:</p></td>
<td><p>;</p></td>
<td><p>&lt;</p></td>
<td><p>=</p></td>
<td><p>&gt;</p></td>
<td><p>?</p></td>
</tr>
<tr>
<th><p>0x4</p></th>
<td><p>@</p></td>
<td><p>A</p></td>
<td><p>B</p></td>
<td><p>C</p></td>
<td><p>D</p></td>
<td><p>E</p></td>
<td><p>F</p></td>
<td><p>G</p></td>
<td><p>H</p></td>
<td><p>I</p></td>
<td><p>J</p></td>
<td><p>K</p></td>
<td><p>L</p></td>
<td><p>M</p></td>
<td><p>N</p></td>
<td><p>O</p></td>
</tr>
<tr>
<th><p>0x5</p></th>
<td><p>P</p></td>
<td><p>Q</p></td>
<td><p>R</p></td>
<td><p>S</p></td>
<td><p>T</p></td>
<td><p>U</p></td>
<td><p>V</p></td>
<td><p>W</p></td>
<td><p>X</p></td>
<td><p>Y</p></td>
<td><p>Z</p></td>
<td><p>[</p></td>
<td><p>\\</p></td>
<td><p>]</p></td>
<td><p>^</p></td>
<td><p>_</p></td>
</tr>
<tr>
<th><p>0x6</p></th>
<td><p>`</p></td>
<td><p>a</p></td>
<td><p>b</p></td>
<td><p>c</p></td>
<td><p>d</p></td>
<td><p>e</p></td>
<td><p>f</p></td>
<td><p>g</p></td>
<td><p>h</p></td>
<td><p>i</p></td>
<td><p>j</p></td>
<td><p>k</p></td>
<td><p>l</p></td>
<td><p>m</p></td>
<td><p>n</p></td>
<td><p>o</p></td>
</tr>
<tr>
<th><p>0x7</p></th>
<td><p>p</p></td>
<td><p>q</p></td>
<td><p>r</p></td>
<td><p>s</p></td>
<td><p>t</p></td>
<td><p>u</p></td>
<td><p>v</p></td>
<td><p>w</p></td>
<td><p>x</p></td>
<td><p>y</p></td>
<td><p>z</p></td>
<td><p>{</p></td>
<td><p>|</p></td>
<td><p>}</p></td>
<td><p>~</p></td>
<td><p>\177</p></td>
</tr>
<tr>
<th><p>0x8</p></th>
<td><p>\200</p></td>
<td><p>\201</p></td>
<td><p>\202</p></td>
<td><p>\203</p></td>
<td><p>\204</p></td>
<td><p>\205</p></td>
<td><p>\206</p></td>
<td><p>\207</p></td>
<td><p>\210</p></td>
<td><p>\211</p></td>
<td><p>\212</p></td>
<td><p>\213</p></td>
<td><p>\214</p></td>
<td><p>\215</p></td>
<td><p>\216</p></td>
<td><p>\217</p></td>
</tr>
<tr>
<th><p>0x9</p></th>
<td><p>\220</p></td>
<td><p>\221</p></td>
<td><p>\222</p></td>
<td><p>\223</p></td>
<td><p>\224</p></td>
<td><p>\225</p></td>
<td><p>\226</p></td>
<td><p>\227</p></td>
<td><p>\230</p></td>
<td><p>\231</p></td>
<td><p>\232</p></td>
<td><p>\233</p></td>
<td><p>\234</p></td>
<td><p>\235</p></td>
<td><p>\236</p></td>
<td><p>\237</p></td>
</tr>
<tr>
<th><p>0xA</p></th>
<td><p>\240</p></td>
<td><p>\241</p></td>
<td><p>\242</p></td>
<td><p>\243</p></td>
<td><p>\244</p></td>
<td><p>\245</p></td>
<td><p>\246</p></td>
<td><p>\247</p></td>
<td><p>\250</p></td>
<td><p>\251</p></td>
<td><p>\252</p></td>
<td><p>\253</p></td>
<td><p>\254</p></td>
<td><p>\255</p></td>
<td><p>\256</p></td>
<td><p>\257</p></td>
</tr>
<tr>
<th><p>0xB</p></th>
<td><p>\260</p></td>
<td><p>\261</p></td>
<td><p>\262</p></td>
<td><p>\263</p></td>
<td><p>\264</p></td>
<td><p>\265</p></td>
<td><p>\266</p></td>
<td><p>\267</p></td>
<td><p>\270</p></td>
<td><p>\271</p></td>
<td><p>\272</p></td>
<td><p>\273</p></td>
<td><p>\274</p></td>
<td><p>\275</p></td>
<td><p>\276</p></td>
<td><p>\277</p></td>
</tr>
<tr>
<th><p>0xC</p></th>
<td><p>\300</p></td>
<td><p>\301</p></td>
<td><p>\302</p></td>
<td><p>\303</p></td>
<td><p>\304</p></td>
<td><p>\305</p></td>
<td><p>\306</p></td>
<td><p>\307</p></td>
<td><p>\310</p></td>
<td><p>\311</p></td>
<td><p>\312</p></td>
<td><p>\313</p></td>
<td><p>\314</p></td>
<td><p>\315</p></td>
<td><p>\316</p></td>
<td><p>\317</p></td>
</tr>
<tr>
<th><p>0xD</p></th>
<td><p>\320</p></td>
<td><p>\321</p></td>
<td><p>\322</p></td>
<td><p>\323</p></td>
<td><p>\324</p></td>
<td><p>\325</p></td>
<td><p>\326</p></td>
<td><p>\327</p></td>
<td><p>\330</p></td>
<td><p>\331</p></td>
<td><p>\332</p></td>
<td><p>\333</p></td>
<td><p>\334</p></td>
<td><p>\335</p></td>
<td><p>\336</p></td>
<td><p>\337</p></td>
</tr>
<tr>
<th><p>0xE</p></th>
<td><p>\340</p></td>
<td><p>\341</p></td>
<td><p>\342</p></td>
<td><p>\343</p></td>
<td><p>\344</p></td>
<td><p>\345</p></td>
<td><p>\346</p></td>
<td><p>\347</p></td>
<td><p>\350</p></td>
<td><p>\351</p></td>
<td><p>\352</p></td>
<td><p>\353</p></td>
<td><p>\354</p></td>
<td><p>\355</p></td>
<td><p>\356</p></td>
<td><p>\357</p></td>
</tr>
<tr>
<th><p>0xF</p></th>
<td><p>\360</p></td>
<td><p>\361</p></td>
<td><p>\362</p></td>
<td><p>\363</p></td>
<td><p>\364</p></td>
<td><p>\365</p></td>
<td><p>\366</p></td>
<td><p>\367</p></td>
<td><p>\370</p></td>
<td><p>\371</p></td>
<td><p>\372</p></td>
<td><p>\373</p></td>
<td><p>\374</p></td>
<td><p>\375</p></td>
<td><p>\376</p></td>
<td><p>\377</p></td>
</tr>
</table>
</div>

<p>Notes:</p>
<ul>
<li>The "\" character (0x5c) is used for indicating octal expression. Thus, "\\" must be used to represent a "\".</li>
<li>The characters 0x00 to 0x20, and 0x7F to 0xFF are represented using the expression "\ooo".</li>
<li>The space character (0x20) is used as a delimiter that separates words, while the line feed character (0x0A) is used as a delimiter that separates lines.</li>
<li>All other characters are regarded as a space character.</li>
<li>Multiple spaces are automatically compressed into one space, and leading and trailing spaces are automatically deleted.</li>
</ul>

<p>Examples:</p>
<ul>
<li>The string "Hello world!" should be expressed as "Hello\040world!".</li>
</ul>

<h4><a name="4.3.2">4.3.2. About pathname calculation rules</a></h4>

<p>In TOMOYO Linux, pathnames are normalized (i.e. contains no symbolic links and no "//" "/../" "/./"). Therefore, pathnames generally begin with a "/". But there are two exceptions.</p>

<p>One applies when calculating pathnames for program execution operation. When calculating pathnames for program execution, the last component of the requested pathname may be a symbolic link. This is because some programs behave differently depending on the invocation name (a.k.a. argv[0]), and symbolic links are used for changing the invocation name.</p>

<p>The other applies when calculating pathnames for other than program executionoperation (e.g. opening file for reading). When calculating pathnames for other than program execution, pathnames on filesystems that do not support rename() operation (e.g. proc filesystem which is likely mounted on /proc/ directory) are represented using filesystem's name as a prefix. For example, the file "/proc/meminfo" is represented as "proc:/meminfo".</p>

<h4><a name="4.3.3">4.3.3. About wildcard expression rules</a></h4>

<p>In TOMOYO Linux, any characters that are interpreted as a wildcard are prefixed with \ character.</p>

<p>Pathnames may contain wildcards that match multiple pathnames. The supported wildcards are outlined in the following table:</p>

<div class="simple-table">
<table>
<tr>
<th><p>Wildcard</p></th>
<th><p>Pattern match</p></th>
<th><p>Examples</p></th>
</tr>
<tr>
<td><p>\*</p></td>
<td><p>0 or more repetitions of characters other than "/"</p></td>
<td><p>/var/log/samba/\*</p></td>
</tr>
<tr>
<td><p>\@</p></td>
<td><p>0 or more repetitions of characters other than "/" or "."</p></td>
<td><p>/var/www/html/\@.html</p></td>
</tr>
<tr>
<td><p>\?</p></td>
<td><p>1 byte character other than "/"</p></td>
<td><p>/tmp/mail.\?\?\?\?\?\?</p></td>
</tr>
<tr>
<td><p>\$</p></td>
<td><p>1 or more repetitions of decimal digits</p></td>
<td><p>/proc/\$/cmdline</p></td>
</tr>
<tr>
<td><p>\+</p></td>
<td><p>1 decimal digit.</p></td>
<td><p>/var/tmp/my_work.\+</p></td>
</tr>
<tr>
<td><p>\X</p></td>
<td><p>1 or more repetitions of hexadecimal digits</p></td>
<td><p>/var/tmp/my-work.\X</p></td>
</tr>
<tr>
<td><p>\x</p></td>
<td><p>1 hexadecimal digit</p></td>
<td><p>/tmp/my-work.\x</p></td>
</tr>
<tr>
<td><p>\A</p></td>
<td><p>1 or more repetitions of alphabet characters</p></td>
<td><p>/var/log/my-work/\$-\A-\$.log</p></td>
</tr>
<tr>
<td><p>\a</p></td>
<td><p>1 alphabet character</p></td>
<td><p>/home/users/\a/\*/public_html/\*.html</p></td>
</tr>
<tr>
<td><p>\-</p></td>
<td><p>Pathname subtraction operator (negative match)</p></td>
<td>
<p>/\*\-proc\-sys/</p>
<p>This will match /\*/ directories except "/proc/" and "/sys/".</p>
</td>
</tr>
<tr>
<td><p>/\{dir\}/</p></td>
<td><p>Recursive directory matching operator.</p>
<p>Matches "/" and 1 or more repetitions of "dir/".</p></td>
<td>
<p>/var/www/html/\{\*\}/</p>
<p>This will match all subdirectories under /var/www/html/ . Note that /var/www/html/ will not match.</p>
<br>
<p>/var/www/html/\{\*\}/\*.html</p>
<p>This will match all *.html files in subdirectories under /var/www/html/ . Note that /var/www/html/\*.html will not match.</p>
</td>
</tr>
</table>
</div>

<h3><a name="4.4">4.4. Understanding "domain policy" mode and "acl policy" mode.</a></h3>

<p>In TOMOYO Linux, you can audit/restrict access requests in two ways.</p>

<p>One is called "domain policy" mode where rules are written from the point of view of processes. All resources that are accessed by processes are subjected to permission checking. This is useful for restricting access requests as white listing.</p>

<p>The other is called "acl policy" mode where rules are written from the point of view of resources. Only resources that are listed in the rules are subjected to permission checking. This is useful for restricting access requests as black listing.</p>

<p>Explanation of actual usage starts from next chapter.</p>

<h3><a name="4.5">4.5. List of supported keywords</a></h3>

<p>TOMOYO Linux can audit/restrict below operations.</p>

<div class="simple-table">
<table><tbody>
<tr><th>Description</th><th>Directive</th><th>Operand1</th><th>Operand2</th><th>Operand3</th><th>Operand4</th><th>Conditions</th></tr>
<tr><td>Execute a program</td><td>file execute</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_exec">exec</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Open for reading</td><td>file read</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Open for writing</td><td>file write</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Open for appending</td><td>file append</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Read attributes of a file</td><td>file getattr</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Create a regular file</td><td>file create</td><td>pathname</td><td>dac mode</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Delete a non-directory</td><td>file unlink</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Change owner ID</td><td>file chown</td><td>pathname</td><td>ownder id</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Change group ID</td><td>file chgrp</td><td>pathname</td><td>group id</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Change dac permission</td><td>file chmod</td><td>pathname</td><td>dac mode</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Create a directory</td><td>file mkdir</td><td>pathname</td><td>dac mode</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Delete a directory</td><td>file rmdir</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Create a FIFO</td><td>file mkfifo</td><td>pathname</td><td>dac mode</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Create a UNIX domain socket</td><td>file mksock</td><td>pathname</td><td>dac mode</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Create a block device file</td><td>file mkblock</td><td>pathname</td><td>dac mode</td><td>major number</td><td>minor number</td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Create a character device file</td><td>file mkchar</td><td>pathname</td><td>dac mode</td><td>major number</td><td>minor number</td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Truncate a regular file</td><td>file truncate</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Create a symbolic link</td><td>file symlink</td><td>pathname</td><td>symbolic link's content</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a></td></tr>
<tr><td>Create a hard link</td><td>file link</td><td>old pathname</td><td>new pathname</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a> <a href="#condition_path2_parent">path2.parent</a></td></tr>
<tr><td>Rename a pathname</td><td>file rename</td><td>old pathname</td><td>new pathname</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a> <a href="#condition_path2_parent">path2.parent</a></td></tr>
<tr><td>Request ioctl operation</td><td>file ioctl</td><td>pathname</td><td>command number</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Request mount operation</td><td>file mount</td><td>device file's pathname</td><td>mount point's pathname</td><td>filesystem's type</td><td>mount flags</td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a> <a href="#condition_path2_parent">path2.parent</a> <a href="#condition_path2">path2</a></td></tr>
<tr><td>Request unmount operation</td><td>file unmount</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Request chroot operation</td><td>file chroot</td><td>pathname</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Request pivot_root operation</td><td>file pivot_root</td><td>new root directory</td><td>location to put old root directory</td><td colspan="2"></td><td><a href="#condition_task">task</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a> <a href="#condition_path2_parent">path2.parent</a> <a href="#condition_path2">path2</a></td></tr>
<tr><td>Pass environment variable</td><td>misc env</td><td>environment variable's name</td><td colspan="3"></td><td><a href="#condition_task">task</a> <a href="#condition_exec">exec</a> <a href="#condition_path1_parent">path1.parent</a> <a href="#condition_path1">path1</a></td></tr>
<tr><td>Use of the create_module(2), init_module(2) and delete_module(2) syscalls</td><td>capability use_kernel_module</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of PACKET sockets</td><td>capability use_packet</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of ROUTE sockets</td><td>capability use_route</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of kexec_load(2) syscall</td><td>capability SYS_KEXEC_LOAD</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of nice(2) and setpriority(2) syscalls</td><td>capability SYS_NICE</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of reboot(2) syscall</td><td>capability SYS_REBOOT</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of sethostname(2) and setdomainname(2) syscalls</td><td>capability SYS_SETHOSTNAME</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of stime(2), settimeofday(2) and adjtimex(2) syscalls</td><td>capability SYS_TIME</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Use of vhangup(2) syscall</td><td>capability SYS_VHANGUP</td><td colspan="4"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Request ptrace operation</td><td>ipc ptrace</td><td>command number</td><td>target process's domainname</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Bind TCP sockets to specified local IP address and port</td><td>network inet stream bind</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Listen TCP sockets at specified local IP address and port</td><td>network inet stream listen</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Accept TCP sockets from specified remote IP address and port</td><td>network inet stream accept</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Connect TCP sockets to specified remote IP address and port</td><td>network inet stream connect</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Bind UDP sockets to specified local IP address and port</td><td>network inet dgram bind</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Receive UDP packets from specified remote IP address and port</td><td>network inet dgram recv</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Send UDP packets to specified remote IP address and port</td><td>network inet dgram send</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Bind IP sockets for specified protocol to specified local IP address</td><td>network inet raw bind</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Receive IP packets for specified protocol from specified remote IP address</td><td>network inet raw recv</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Send IP packets for specified protocol to specified remote IP address</td><td>network inet raw send</td><td>IPv4 or IPv6 address</td><td>port number</td><td colspan="2"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Bind byte stream sockets to specified address</td><td>network unix stream bind</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Listen byte stream sockets at specified address</td><td>network unix stream listen</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Accept byte stream sockets from specified address</td><td>network unix stream accept</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Connect byte stream sockets to specified address</td><td>network unix stream connect</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Bind datagram sockets to specified address</td><td>network unix dgram bind</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Receive datagrams from specified address</td><td>network unix dgram recv</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Send datagrams to specified address</td><td>network unix dgram</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Bind seqpacket sockets to specified address</td><td>network unix seqpacket bind </td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Listen seqpacket sockets at specified address</td><td>network unix seqpacket listen</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Accept seqpacket sockets from specified address</td><td>network unix seqpacket accept</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
<tr><td>Connect seqpacket sockets to specified address</td><td>network unix seqpacket connect</td><td>Unix domain socket address</td><td colspan="3"></td><td><a href="#condition_task">task</a></td></tr>
</tbody></table>
</div>

<p>TOMOYO Linux can also check below optional parameters.</p>

<h3><a name="4.6">4.6. Understanding groups</a></h3>

<p>TOMOYO Linux can deal with three types of arguments (i.e. string values such as pathnames, integer values such as UID, IPv4 and IPv6 network address). In order to aid grouping these arguments, three directives are provided.</p>

<p>path_group is a directive for grouping string values. You can define pathname groups in</p>

<pre>
path_group $groupname $word
</pre>

<p>format. For example, you can define</p>

<pre>
path_group TMP_FILES /tmp/\*
path_group TMP_FILES /tmp/\{\*\}/\*
path_group HOME_FILES /root/\*
path_group HOME_FILES /root/\{\*\}/\*
path_group HOME_FILES /home/\*/\*
path_group HOME_FILES /home/\*/\{\*\}/\*
</pre>

<p>for grouping files under /tmp/ directory and files under home directory.</p>

<p>number_group is a directive for grouping integer values range. You can define number groups in<p>

<pre>
number_group $groupname $number
number_group $groupname $min_number-$max_number
</pre>

<p>format. For example, you can define</p>

<pre>
number_group FTPD_BINDABLE_PORTS 21
number_group FTPD_BINDABLE_PORTS 1024-65535
</pre>

<p>for grouping 21 and 1024-65535.</p>

<p>address_group is a directive for grouping IPv4 and IPv6 addresses. You can define address groups in</p>

<pre>
address_group $groupname $address
address_group $groupname $min_address-$max_address
</pre>

<p>format. For example, you can define</p>

<pre>
address_group PRIVATE_ADDRESS 10.0.0.0-10.255.255.255
address_group PRIVATE_ADDRESS 172.16.0.0-172.31.255.255
address_group PRIVATE_ADDRESS 192.168.0.0-192.168.255.255
address_group PRIVATE_ADDRESS fd00::-fdff:ffff:ffff:ffff:ffff:ffff:ffff:ffff
address_group LOOPBACK_ADDRESS 127.0.0.0-127.255.255.255
address_group LOOPBACK_ADDRESS ::1
</pre>

<p>for grouping private addresses and loopback address</p>

<p>Use "\=$groupname" for matching one of values in "$groupname" group. For example,</p>

<pre>
file write \=TMP_FILES
</pre>

<p>means "opening files in TMP_FILES group for writing".</p>

<p>Use "\!$groupname" for matching none of values in "$groupname" group. For example,</p>

<pre>
file read \!HOME_FILES
</pre>

<p>means "opening files not in HOME_FILES group for writing".</p>

<p>A special group "any" is reserved for matching any string values and numeric values and network addresses. "\=any" makes sense, but "\!any" makes no sense.</p>

<p>These directives can group only arguments within an ACL entry. TOMOYO Linux provides one more directive for grouping ACL entries.</p>

<p>acl_group is a directive for grouping ACL entries. You can define ACL groups in</p>

<pre>
acl_group $groupname $acl_entry
</pre>

<p>format. For example, you can define</p>

<pre>
acl_group USE_SHARED_LIBRARY file read/getattr \=SHARED_LIBRARY_FILES
acl_group USE_SHARED_LIBRARY file ioctl \=SHARED_LIBRARY_FILES \=any
</pre>

<p>for grouping operations that should be allowed to shared libraries. (Note that SHARED_LIBRARY_FILES refers a path_group which is not defined in this tutorial.)</p>

<p>Use</p>

<pre>
use_group \=$groupname
</pre>

<p>to refer "$groupname" group. For example,</p>

<pre>
use_group \=USE_SHARED_LIBRARY
</pre>

<p>is equivalent with</p>

<pre>
file read/getattr \=SHARED_LIBRARY_FILES
file ioctl \=SHARED_LIBRARY_FILES \=any
</pre>

<p>. (QUESTION: Do we want

<pre>
use_group \!ALLOWED_OPERATIONS
</pre>

<p>syntax so that we can specify like</p>

<pre>
allow use_group \!ALLOWED_OPERATIONS
    mode enforcing
</pre>

<p>at "acl policy" mode in order to deny any operations that are not in ALLOWED_OPERATIONS acl_group? Such syntax might cause a disaster if ALLOWED_OPERATIONS acl_group is by error empty or incomplete.)</p>

<h2>Chapter 5: Understanding "acl policy" mode</h2>

<p>This tutorial explains "acl policy" mode first, for it is easier to use than "domain policy" mode.</p>

<h3><a name="5.1">5.1. Syntax</a></h3>

<p>Syntax for acl policy is shown below:</p>

<pre>
allow $resource $action $arguments $conditions
    mode $mode
    by $domainname1 $condition1
    by $domainname2 $condition2
    by $domainname3 $condition3
</pre>

<p>The first line defines resources and actions that should be subjected to permission checks.</p>

<p>$resource is type of resourse, such as "file" and "network".</p>

<p>$action is operation applied to $resource. For example "read" and "write" for "file".</p>

<p>$arguments are mandatory arguments used for identifying resource.
For example, "/etc/passwd" for "file".<br>
The number of mandatory arguments is determined based on $resource and $action. For example, only one argument is required when $resource is "file" and $action is "read".</p>

<p>$conditions are optinal arguments that filters conditions to apply this rule. For example, "task.uid=0" means "if current thread's uid is 0".</p>

<p>The second line defines mode of access restriction.</p>

<p>$mode is type of enforcing, either "enforcing" or "permissive".</p>

<p>The third line and downwards are credentials that are allowed to operate on the resource defined in the first line.</p>

<p>$domainnameX is a domainname and $conditioX are optional conditions.</p>

<h3><a name="5.2">5.2. Examples</a></h3>

<pre>
allow file execute /sbin/init
    mode permissive
    by &lt;kernel&gt;
</pre>

<p>This example shows that processes which are in the "&lt;kernel&gt;" domain is allowed to execute <code>/sbin/init</code>. But this example does not reject execution of <code>/sbin/init</code> by processes which are not in the "&lt;kernel&gt;" domain because mode is "permissive".</p>

<pre>
allow file read /etc/shadow
    mode enforcing
    by &lt;kernel&gt; /usr/sbin/sshd
</pre>

<p>This example shows that processes which are in the "&lt;kernel&gt; /usr/sbin/sshd" domain is allowed to open /etc/shadow for reading. This example rejects opening /etc/shadow for reading by processes which are not in the "&lt;kernel&gt; /usr/sbin/sshd" domain because mode is "enforcing".</p>

<p>Note that rules for file resources are written using pathnames. This means that the "acl policy" rules will not be applied after the file is (e.g.) renamed. To be able to apply rules, you need to restrict operations that lead to bypass of "acl policy" rules. The "domain policy" rules might be helpful.</p>

<h3><a name="5.3">5.3. Using "acl policy" mode</a></h3>

<p>Experience "acl policy" mode.</p>

<h3><a name="6.1">6.2. Using "acl policy" mode as a boolean level restriction</a></h3>

<p>By specifying "\=any" to mandatory arguments, you can enforce a boolean level restriction. For example,</p>

<pre>
allow file pivot_root \=any \=any
    mode enforcing
</pre>

<p>completely disallows pivot_root operation. For example,</p>

<pre>
allow file execute \=any path1.uid!=0
    mode enforcing
</pre>

<p>completely disallows execution of programs not owned by root user. For example,</p>

<pre>
allow file link \=any \=any task.uid!=0 path1.uid!=task.uid
    mode enforcing
</pre>

<p>disallows non root users to create hard links of files not owned by themselves. For example,</p>

<pre>
allow file ioctl \=any \=any path1.type=char path1.dev_major=1 path1.dev_minor=232
    mode enforcing
    by &lt;kernel&gt; /usr/bin/qemu-kvm
</pre>

<p>allows ioctl operation on any character device file with major=1 and minor=232 (a.k.a. /dev/kvm) to only processes in "&lt;kernel&gt; /usr/bin/qemu-kvm" domain.</p>

<h2>Chapter 7: Understanding "domain policy" mode</h2>

<h3><a name="7.1">7.1. Understanding profiles</a></h3>

<p>Press the "w" key, then press the "e" key, and you will see the <strong>"Exception Policy Editor"</strong> screen:</p>

<a href="media/editpolicy-exception-full.png">(Click to view complete screen.)<br><img src="media/editpolicy-exception-list1.png" alt="editpolicy-exception-list1.png" title="Exception policy" width="675" height="375"></a>

<p>You can scroll this window using the arrow keys and/or the Home/End/PageUp/PageDown keys.</p>

<p>The permissions here are similar to those in the domain policy, but apply to all domains. Permissions defined here will not be displayed in domain policy, and access requests from any domain that match a permission in exception policy will be automatically accepted. The exception policy can also be used to shorten and simplify domain policy for each domain by using the group directives.</p>

<p>For in depth details on the directives that can used in exception policy, see <a href="policy-specification/exception-policy-syntax.html.en">Exception policy syntax</a> located in <a href="policy-specification/index.html.en">Appendix B: Policy specification</a>.</p>

<p>Note that rules for file resources are written using pathnames. This means that the "acl policy" rules will not be applied after the file is (e.g.) renamed. To be able to apply rules, you need to restrict operations that lead to bypass of "acl policy" rules. The "domain policy" rules might be helpful.</p>

<h3><a name="4.4">4.4. View domains with the policy editor</a></h3>

<p>Let's have a look at the policy editor to get a better understanding of domains. This is the main tool used with TOMOYO Linux and it is important to become comfortable using it. The instructions on this page can be supplemented with this page describing <a href="tool-editpolicy.html.en">How to use the Policy Editor</a>.</p>

<p>Once the system has been rebooted into the TOMOYO Linux kernel, run the policy editor with the "/etc/ccs/" option to edit policy files within the "/etc/ccs/" directory:</p>

<pre class="command">
# /usr/sbin/ccs-editpolicy /etc/ccs/
</pre>

<p>The policy editor provides a number of "screens" that each serve a different role. The default screen that greets the user is the <strong>"Domain Transition Editor"</strong>. The picture below describes the domain tree that should be visible after running the above command. As of now, only the "&lt;kernel&gt;" domain is defined:</p>

<img src="media/editpolicy-domain-list1.png" alt="editpolicy-domain-list1.png" title="Only one domain is defined" width="675" height="375">

<p>Since this is a newly initialized policy, the policy files in "/etc/ccs/" are empty. <strong>There are two sets of policy involved in TOMOYO Linux: policy loaded in the kernel, and policy saved to "/etc/ccs/"</strong>. Many sets of policies can be saved to "/etc/ccs/" and can be loaded into the kernel at boot or on demand. Saving policy to disk will be discussed in later. Press the "q" key to quit the policy editor.</p>

<p>Now run the policy editor again <strong>without</strong> the "/etc/ccs/" option in order to view the policy that is loaded in the kernel:</p>

<pre class="command">
# /usr/sbin/ccs-editpolicy
</pre>

<p>As the system runs, TOMOYO Linux will record the creation of new domains and add them to the tree. After running the above command, the domain tree should appear populated with all domains created since startup:</p>

<img src="media/editpolicy-domain-list2.png" alt="editpolicy-domain-list2.png" title="Many domains have been created" width="675" height="375">

<p>The <strong>first line</strong> shows what screen you are on and how many domains are listed.<br>
The <strong>second line</strong> is the message area.<br>
The <strong>third line</strong> shows the domain name currently selected by the cursor.<br>
The <strong>fourth line</strong> and downwards are the domains currently defined.</p>

<p>Try executing some commands and see where new domains are created. You can do this while you still have the policy editor running.</p>

<p>You can scroll using the <strong>arrow keys</strong> and/or the <strong>Home/End/PageUp/PageDown</strong> keys.<br>
Press the <strong>"r"</strong> key to refresh the contents of the screen.<br>
Press the <strong>"f"</strong> key to find an entry.<br>
Press the <strong>"?"</strong> key to view the available commands. Press the "?" again to go back to the previous screen.</p>

<p>Note that a new domain is only created if it is unique, so executing the same command over and over again will not result in the creation of many domains.</p>

<h3><a name="4.4">4.4. Understanding profiles</a></h3>

<p>Each domain can be restricted using TOMOYO Linux by assigning a <strong>"profile"</strong>. These profiles can be assigned to any domain independently of others, which allows you to slowly build up the security in your system one domain at a time. This also allows you to create custom profiles for specific domains, but this is a more advanced topic for later on.</p>

<p>In the policy editor, look at the numbers in the second column of each line:</p>

<img src="media/editpolicy-domain-profile-number.png" alt="editpolicy-domain-profile-number.png" title="This domain refers profile 0." width="675" height="375">

<p>This number is called the <strong>"profile number"</strong>. A profile number is an integer value which takes between 0 and 255. The default profile number is "0", also known as "Disabled Mode", in which the domain is completely unrestricted.</p>

<p>Press the <strong>"w"</strong> key to list the different "screens" that can be viewed using the policy editor:</p>

<img src="media/editpolicy-window-list.png" alt="editpolicy-window-list.png" title="List of available windows." width="675" height="375">

<p>Press the <strong>"p"</strong> key to select the <strong>"Profile Editor"</strong>, and you will see the list of profiles:</p>

<img src="media/editpolicy-profile-list.png" alt="editpolicy-profile-list.png" title="List of defined profiles." width="675" height="375">

<p>Each profile contains 3 fields:</p>

<div class="simple-table">
<table>
<tr>
<th><p>Name</p></th>
<th><p>Control</p></th>
</tr>
<tr>
<td><p>COMMENT</p></td>
<td><p>Description of the profile.</p></td>
</tr>
<tr>
<td><p>CONFIG</p></td>
<td><p>Configuration of operation mode.</p></td>
</tr>
<tr>
<td><p>PREFERENCE</p></td>
<td><p>Configuration of various options.</p></td>
</tr>
</table>
</div>

<p>Each CONFIG line can contain either "enforcing=yes" or "enforcing=no" parameter:</p>

<div class="simple-table">
<table>
<tr>
<th><p>Value</p></th>
<th><p>Meaning</p></th>
</tr>
<tr>
<td><p>enforcing=yes</p></td>
<td><p>Reject an access request if the request violates policy. </p></td>
</tr>
<tr>
<td><p>enforcing=no</p></td>
<td><p>Do not reject an access request if the request violates policy.</p></td>
</tr>
</table>
</div>

<p>The PREFERENCE line holds the following options:</p>

<div class="simple-table">
<table>
<tr>
<th><p>Name</p></th>
<th><p>Function</p></th>
</tr>
<tr>
<td><p>max_audit_log</p></td>
<td><p>Sets the maximum number of audit logs that the kernel will hold</p></td>
</tr>
<tr>
<td><p>enforcing_penalty</p></td>
<td><p>Sets the length of time a process is forced to sleep after policy violation</p>
</tr>
</table>
</div>

<p>Thus, there are four default profiles that each play a different role:</p>

<img src="media/default_profiles-en.png" alt="default_profiles-en.png" title="Default profiles" width="640" height="320">

<p>Each of these profiles can be assigned to a domain:</p>

<img src="media/kernel_namespace.png" alt="kernel_namespace.png" title="Domain refers profiles" width="600" height="450">

<p>The "Learning Mode" profile is the feature of TOMOYO Linux that makes developing policy very easy. This mode will automatically generate policy for any domain that has this profile selected. This can then be developed and refined into a solid policy. The other profiles, "Permissive Mode" and "Enforcing Mode", are for later on when a domain is ready to be restricted.</p>

<p>For further information on management of profiles, read <a href="chapter-9.html.en">Chapter 9: Advanced profile management</a>.</p>

<h3><a name="4.5">4.5. Understanding domain policy</a></h3>

<p>The restrictions of each domain can be viewed using the <strong>"Domain Policy Editor"</strong> screen, which can be accessed by selecting a domain in the "Domain Transition Editor" screen, and then pressing the "Enter" key. Since no policy has been developed yet, the screen is empty. This is an example of domain policy for Apache:</p>

<a href="media/editpolicy-httpd-full.png">(Click to view complete screen.)<br><img src="media/editpolicy-httpd-acl1.png" alt="editpolicy-httpd-acl1.png" title="Domain policy" width="675" height="375"></a>

<p>The permissions in domain policy are represented here with directives such as "file read" and "file write". Once the domain is placed in "Enforcing Mode", only the permissions defined in domain policy will be allowed, as well as the permissions defined in exception policy (see <a href="chapter-4.html.en#4.5">4.5: Understanding exception policy</a>). In order to develop a policy of least privilege that still allows normal usage, the "Learning Mode" and "Permissive Mode" can be used. For in depth details on the directives that can be used in domain policy, see <a href="policy-specification/domain-policy-syntax.html.en">Domain policy syntax</a> located in <a href="policy-specification/index.html.en">Appendix B: Policy specification</a>.</p>

<h3><a name="4.6">4.6. Understanding exception policy</a></h3>

<p>Press the "w" key, then press the "e" key, and you will see the <strong>"Exception Policy Editor"</strong> screen:</p>

<a href="media/editpolicy-exception-full.png">(Click to view complete screen.)<br><img src="media/editpolicy-exception-list1.png" alt="editpolicy-exception-list1.png" title="Exception policy" width="675" height="375"></a>

<p>You can scroll this window using the arrow keys and/or the Home/End/PageUp/PageDown keys.</p>

<p>The permissions here are similar to those in the domain policy, but apply to all domains. Permissions defined here will not be displayed in domain policy, and access requests from any domain that match a permission in exception policy will be automatically accepted. The exception policy can also be used to shorten and simplify domain policy for each domain by using the group directives.</p>

<p>For in depth details on the directives that can used in exception policy, see <a href="policy-specification/exception-policy-syntax.html.en">Exception policy syntax</a> located in <a href="policy-specification/index.html.en">Appendix B: Policy specification</a>.</p>

<h3><a name="4.7">4.7. Saving audit logs</a></h3>

<p>When a domain tries to perform an action that has been permitted in domain/exception policy, this action is granted. If the action has not been permitted in policy, then the action is rejected, assuming the domain is in "Enforcing Mode".</p>

<p>When developing policy, it may be useful to save a log entry every time a domain makes a request that is undefined in domain/exception policy. While this is crucial for system administration once policy has been fully developed and enforced, it can also be used alongside "Learning Mode" to help develop policy.</p>

<p>TOMOYO Linux can record <strong>"access granted logs"</strong> (access requests that were granted by either domain policy or exception policy) and <strong>"access rejected logs"</strong> (access requests that were not granted by neither domain policy nor exception policy). These logs are in the form of domain policy. This is useful in the case that the user wishes to permit a domain to perform actions that are not currently permitted in policy. The "access rejected log" could then be used to append permissions to domain policy. The "Learning Mode" described in <a href="chapter-5.html.en">the next chapter</a> mostly automates the process of appending "access rejected logs" into domain policy for domains set to that mode.</p>

<p>The following values can be given for the "grant_log" parameter of the CONFIG line:</p>

<div class="simple-table">
<table>
<tr>
<th>
<p>Value</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>
<tr>
<td>
<p>no</p>
</td>
<td>
<p>Don't record "access granted logs" unless "grant_log=yes" is explicitly specified in the individual ACL entry.</p>
</td>
</tr>
<tr>
<td>
<p>yes</p>
</td>
<td>
<p>Record "access granted logs" unless "grant_log=no" is explicitly specified in the individual ACL entry.</p>
</td>
</tr>
</table>
</div>

<p>The following values can be given for the "reject_log" parameter of the CONFIG line:</p>

<div class="simple-table">
<table>
<tr>
<th>
<p>Value</p>
</th>
<th>
<p>Meaning</p>
</th>
</tr>
<tr>
<td>
<p>no</p>
</td>
<td>
<p>Don't record "access rejected logs".</p>
</td>
</tr>
<tr>
<td>
<p>yes</p>
</td>
<td>
<p>Record "access rejected logs".</p>
</td>
</tr>
</table>
</div>

<p><code>ccs-auditd</code> is a daemon program that reads from the <a href="policy-specification/proc-interface.html.en#audit">/proc/ccs/audit</a> interface and writes to specified log files. To make use of this daemon, it can for example be run by adding "/usr/sbin/ccs-auditd" to "/etc/rc.local".</p>

<p>The configuration of this daemon is done in the "/etc/ccs/tools/auditd.conf" file. Text read from the <a href="policy-specification/proc-interface.html.en#audit">/proc/ccs/audit</a> can be sorted and sent to different files. Some useful defaults exist, but an advanced user can make use of extensive sorting rules to make administration easier. The default configuration file looks like this:</p>

<pre>
# This file contains sorting rules used by ccs-auditd command.

# An audit log consists with three lines. You can refer the first line
# using 'header' keyword, the second line using 'domain' keyword, and the
# third line using 'acl' keyword.
#
# Words in each line are separated by a space character. Therefore, you can
# use 'header[index]', 'domain[index]', 'acl[index]' for referring index'th
# word of the line. The index starts from 1, and 0 refers the whole line
# (i.e. 'header[0]' = 'header', 'domain[0]' = 'domain', 'acl[0]' = 'acl').
#
# Three operators are provided for conditional sorting.
# '.contains' is for 'fgrep keyword' match.
# '.equals' is for 'grep ^keyword$' match.
# '.starts' is for 'grep ^keyword' match.
#
# Sorting rules are defined using multi-lined chunks. A chunk is terminated
# by a 'destination' line which specifies the pathname to write the audit
# log. A 'destination' line is processed only when all preceding 'header',
# 'domain' and 'acl' lines in that chunk have matched.
# Evaluation stops at the first processed 'destination' line.
# Therefore, no audit logs are written more than once.
#
# More specific matches should be placed before less specific matches.
# For example:
#
# header.contains profile=3
# domain.contains /usr/sbin/httpd
# destination     /var/log/tomoyo/reject_003_httpd.log
#
# This chunk should be placed before the chunk that matches logs with
# profile=3. If placed after, the audit logs for /usr/sbin/httpd will be
# sent to /var/log/tomoyo/reject_003.log .

# Please use TOMOYO Linux's escape rule (e.g. '\040' rather than '\ ' for
# representing a ' ' in a word).

# Discard all granted logs.
header.contains granted=yes
destination     /dev/null

# Save rejected logs with profile=0 to /var/log/tomoyo/reject_000.log
header.contains profile=0
destination     /var/log/tomoyo/reject_000.log

# Save rejected logs with profile=1 to /var/log/tomoyo/reject_001.log
header.contains profile=1
destination     /var/log/tomoyo/reject_001.log

# Save rejected logs with profile=2 to /var/log/tomoyo/reject_002.log
header.contains profile=2
destination     /var/log/tomoyo/reject_002.log

# Save rejected logs with profile=3 to /var/log/tomoyo/reject_003.log
header.contains profile=3
destination     /var/log/tomoyo/reject_003.log
</pre>

<p>It is important to <strong>be careful with disk space if "access granted logs" are saved</strong>, as this file can grow extremely quickly. Do not do this unless you know what you are doing.</p>

<p>To manage logs with <code>logrotate</code>, create "/etc/logrotate.d/tomoyo" with the following content (give "nocreate" option or logs after the first rotation will not be saved):</p>

<pre>
/var/log/tomoyo/*.log {
&nbsp;&nbsp;weekly
&nbsp;&nbsp;rotate 9
&nbsp;&nbsp;missingok
&nbsp;&nbsp;notifempty
&nbsp;&nbsp;nocreate
}
</pre>

<p>If audit logs are not required, <code>ccs-auditd</code> need not be run. In this case, give <a href="chapter-9.html.en#9.2.3">PREFERENCE={ max_audit_log=0 }</a> for profiles to save memory and improve performance. While the use of audit logs can be delayed until a domain has been switched to "Enforcing Mode", it is recommended to store "access rejected logs" at this point for the development of fine-grained policy.</p>

<p>Distributers may wish to create daemon or service to be included with the package. It is very simple to do so, as such a daemon would only need to run a single command: <code>/usr/sbin/ccs-auditd</code>. If you are using systemd, create "/lib/systemd/system/ccs-auditd.service" with the following contents:</p>

<pre>
[Unit]
Description=TOMOYO Linux Auditing Daemon

[Service]
Type=forking
ExecStart=/usr/sbin/ccs-auditd
ExecReload=/bin/kill -HUP $MAINPID

[Install]
WantedBy=multi-user.target
</pre>

</div><!-- documentation -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
<a href="chapter-3.html.en">Prev</a>
</td>
<td class="docs-index">
<a href="index.html.en">Index</a>
</td>
<td class="docs-next">
<a href="chapter-5.html.en">Next</a>
</td>
</tr>
<tr>
<td class="docs-previous-description">
<p>Chapter 3: How do I install TOMOYO Linux?</p>
</td>
<td class="docs-home">
</td>
<td class="docs-next-description">
<p>Chapter 5: How do I manage domains?</p>
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="chapter-4.html.ja">Japanese page</a>.</p>
<p class="timestamp">Last modified: $Date: 2011-07-01 14:59:22 +0900 (Fri, 01 Jul 2011) $</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</div>

</body>
</html>
