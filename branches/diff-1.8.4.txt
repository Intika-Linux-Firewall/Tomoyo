Index: trunk/1.8.x/ccs-patch/security/ccsecurity/internal.h
===================================================================
--- trunk/1.8.x/ccs-patch/security/ccsecurity/internal.h	(revision 6393)
+++ trunk/1.8.x/ccs-patch/security/ccsecurity/internal.h	(working copy)
@@ -1237,8 +1237,9 @@
 	const struct ccs_path_info *domainname;
 	/* Namespace for this domain. Never NULL. */
 	struct ccs_policy_namespace *ns;
+	/* Group numbers to use. */
+	unsigned long group[CCS_MAX_ACL_GROUPS / BITS_PER_LONG];
 	u8 profile;        /* Profile number to use. */
-	u8 group;          /* Group number to use.   */
 	bool is_deleted;   /* Delete flag.           */
 	bool flags[CCS_MAX_DOMAIN_INFO_FLAGS];
 };
Index: trunk/1.8.x/ccs-patch/security/ccsecurity/permission.c
===================================================================
--- trunk/1.8.x/ccs-patch/security/ccsecurity/permission.c	(revision 6395)
+++ trunk/1.8.x/ccs-patch/security/ccsecurity/permission.c	(working copy)
@@ -773,7 +773,7 @@
 	do {
 		struct ccs_acl_info *ptr;
 		const struct list_head *list = &domain->acl_info_list;
-		bool retried = false;
+		u16 i = 0;
 retry:
 		list_for_each_entry_srcu(ptr, list, list, &ccs_ss) {
 			if (!ccs_check_entry(r, ptr))
@@ -785,9 +785,10 @@
 			ccs_audit_log(r);
 			return 0;
 		}
-		if (!retried) {
-			retried = true;
-			list = &domain->ns->acl_group[domain->group];
+		for (; i < CCS_MAX_ACL_GROUPS; i++) {
+			if (!test_bit(i, domain->group))
+				continue;
+			list = &domain->ns->acl_group[i++];
 			goto retry;
 		}
 		r->granted = false;
Index: trunk/1.8.x/ccs-patch/security/ccsecurity/policy_io.c
===================================================================
--- trunk/1.8.x/ccs-patch/security/ccsecurity/policy_io.c	(revision 6394)
+++ trunk/1.8.x/ccs-patch/security/ccsecurity/policy_io.c	(working copy)
@@ -3549,7 +3549,9 @@
 	if (sscanf(data, "use_group %u\n", &idx) == 1 &&
 	    idx < CCS_MAX_ACL_GROUPS) {
 		if (!is_delete)
-			domain->group = (u8) idx;
+			set_bit(idx, domain->group);
+		else
+			clear_bit(idx, domain->group);
 		return 0;
 	}
 	for (idx = 0; idx < CCS_MAX_DOMAIN_INFO_FLAGS; idx++) {
@@ -4086,21 +4088,33 @@
 			ccs_set_lf(head);
 			ccs_io_printf(head, "use_profile %u\n",
 				      domain->profile);
-			ccs_io_printf(head, "use_group %u\n", domain->group);
 			for (i = 0; i < CCS_MAX_DOMAIN_INFO_FLAGS; i++)
 				if (domain->flags[i])
 					ccs_set_string(head, ccs_dif[i]);
+			head->r.index = 0;
 			head->r.step++;
+			/* fall through */
+		case 1:
+			while (head->r.index < CCS_MAX_ACL_GROUPS) {
+				i = head->r.index++;
+				if (!test_bit(i, domain->group))
+					continue;
+				ccs_io_printf(head, "use_group %u\n", i);
+				if (!ccs_flush(head))
+					return;
+			}
+			head->r.index = 0;
+			head->r.step++;
 			ccs_set_lf(head);
 			/* fall through */
-		case 1:
+		case 2:
 			if (!ccs_read_acl(head, &domain->acl_info_list))
 				return;
 			head->r.step++;
 			if (!ccs_set_lf(head))
 				return;
 			/* fall through */
-		case 2:
+		case 3:
 			head->r.step = 0;
 			if (head->r.print_this_domain_only)
 				goto done;
@@ -5835,7 +5849,7 @@
 		const struct ccs_domain_info *domain =
 			security->ccs_domain_info;
 		e.profile = domain->profile;
-		e.group = domain->group;
+		memcpy(e.group, domain->group, sizeof(e.group));
 	}
 	e.domainname = ccs_get_name(domainname);
 	if (!e.domainname)
@@ -5858,10 +5872,13 @@
 		security->ccs_domain_info = entry;
 		if (created) {
 			struct ccs_request_info r;
+			int i;
 			ccs_init_request_info(&r, CCS_MAC_FILE_EXECUTE);
 			r.granted = false;
 			ccs_write_log(&r, "use_profile %u\n", entry->profile);
-			ccs_write_log(&r, "use_group %u\n", entry->group);
+			for (i = 0; i < CCS_MAX_ACL_GROUPS; i++)
+				if (test_bit(i, entry->group))
+					ccs_write_log(&r, "use_group %u\n", i);
 			ccs_update_stat(CCS_STAT_POLICY_UPDATES);
 		}
 	}
Index: trunk/1.8.x/ccs-tools/usr_lib_ccs/init_policy.c
===================================================================
--- trunk/1.8.x/ccs-tools/usr_lib_ccs/init_policy.c	(revision 6393)
+++ trunk/1.8.x/ccs-tools/usr_lib_ccs/init_policy.c	(working copy)
@@ -957,7 +957,7 @@
 /* Which profile number does <kernel> domain use? */
 static unsigned char default_profile = 0;
 /* Which ACL group does <kernel> domain use? */
-static unsigned char default_group = 0;
+static _Bool use_group[256] = { };
 
 /**
  * make_domain_policy - Make /etc/ccs/policy/current/domain_policy.conf .
@@ -967,6 +967,7 @@
 static void make_domain_policy(void)
 {
 	FILE *fp;
+	int i;
 	if (!chdir_policy())
 		return;
 	if (!access("domain_policy.conf", R_OK))
@@ -977,8 +978,10 @@
 		return;
 	}
 	fprintf(stderr, "Creating domain policy... ");
-	fprintf(fp, "<kernel>\nuse_profile %u\nuse_group %u\n",
-		default_profile, default_group);
+	fprintf(fp, "<kernel>\nuse_profile %u\n", default_profile);
+	for (i = 0; i < 256; i++)
+		if (use_group[i])
+			fprintf(fp, "use_group %u\n", i);
 	close_file(fp, 1, "domain_policy.tmp", "domain_policy.conf");
 }
 
@@ -1685,7 +1688,7 @@
 		} else if (!strncmp(arg, "use_profile=", 12)) {
 			default_profile = atoi(arg + 12);
 		} else if (!strncmp(arg, "use_group=", 10)) {
-			default_group = atoi(arg + 10);
+			use_group[(unsigned char) atoi(arg + 10)] = 1;
 		} else if (!strncmp(arg, "grant_log=", 10)) {
 			grant_log = arg + 10;
 		} else if (!strncmp(arg, "reject_log=", 11)) {
@@ -1701,6 +1704,11 @@
 	}
 	if (!dir)
 		dir = "/etc/ccs";
+	for (i = 0; i < 256; i++)
+		if (use_group[i])
+			break;
+	if (i == 256)
+		use_group[0] = 1;
 	policy_dir = strdup(dir);
 	memset(path, 0, sizeof(path));
 	make_policy_dir();
Index: trunk/1.8.x/ccs-tools/usr_sbin/editpolicy.c
===================================================================
--- trunk/1.8.x/ccs-tools/usr_sbin/editpolicy.c	(revision 6394)
+++ trunk/1.8.x/ccs-tools/usr_sbin/editpolicy.c	(working copy)
@@ -1711,7 +1711,7 @@
 		if (sscanf(line, "use_profile %u", &idx) == 1 && idx < 256)
 			ccs_dp.list[index].profile = (u8) idx;
 		else if (sscanf(line, "use_group %u", &idx) == 1 && idx < 256)
-			ccs_dp.list[index].group = (u8) idx;
+			ccs_dp.list[index].group[idx] = 1;
 	}
 }
 
@@ -1747,7 +1747,7 @@
 		for (index = 0; index < ccs_dp.list_len; index++) {
 			char *cp;
 			const struct ccs_domain *ptr = &ccs_dp.list[index];
-			if (ptr->group != group || ptr->target || ptr->is_dd)
+			if (!ptr->group[group] || ptr->target || ptr->is_dd)
 				continue;
 			cp = ccs_strdup(line);
 			ccs_parse_domain_line(ns, cp, index, false);
Index: trunk/1.8.x/ccs-tools/usr_sbin/editpolicy.h
===================================================================
--- trunk/1.8.x/ccs-tools/usr_sbin/editpolicy.h	(revision 6393)
+++ trunk/1.8.x/ccs-tools/usr_sbin/editpolicy.h	(working copy)
@@ -455,8 +455,8 @@
 	const struct ccs_path_info **string_ptr;
 	int string_count;
 	int number;   /* domain number (-1 if target or is_dd) */
+	_Bool group[256];
 	u8 profile;
-	u8 group;
 	_Bool is_djt; /* domain jump target */
 	_Bool is_dk;  /* domain keeper */
 	_Bool is_du;  /* unreachable domain */
Index: trunk/1.8.x/ccs-tools/usr_sbin/editpolicy_offline.c
===================================================================
--- trunk/1.8.x/ccs-tools/usr_sbin/editpolicy_offline.c	(revision 6394)
+++ trunk/1.8.x/ccs-tools/usr_sbin/editpolicy_offline.c	(working copy)
@@ -801,8 +801,9 @@
 	struct list_head acl_info_list;
 	/* Name of this domain. Never NULL.          */
 	const struct ccs_path_info *domainname;
+	/* Group numbers to use.   */
+	bool group[CCS_MAX_ACL_GROUPS];
 	u8 profile;        /* Profile number to use. */
-	u8 group;          /* Group number to use.   */
 	bool is_deleted;   /* Delete flag.           */
 	bool flags[CCS_MAX_DOMAIN_INFO_FLAGS];
 };
@@ -3938,8 +3939,7 @@
 	}
 	if (sscanf(data, "use_group %u\n", &idx) == 1 &&
 	    idx < CCS_MAX_ACL_GROUPS) {
-		if (!is_delete)
-			domain->group = (u8) idx;
+		domain->group[idx] = !is_delete;
 		return 0;
 	}
 	for (idx = 0; idx < CCS_MAX_DOMAIN_INFO_FLAGS; idx++) {
@@ -4334,7 +4334,7 @@
 	if (head.eof)
 		return;
 	list_for_each_entry(domain, &ccs_domain_list, list) {
-		u8 i;
+		u16 i;
 		if (domain->is_deleted)
 			continue;
 		if (head.print_this_domain_only &&
@@ -4343,10 +4343,12 @@
 		/* Print domainname and flags. */
 		cprintf("%s\n", domain->domainname->name);
 		cprintf("use_profile %u\n", domain->profile);
-		cprintf("use_group %u\n", domain->group);
 		for (i = 0; i < CCS_MAX_DOMAIN_INFO_FLAGS; i++)
 			if (domain->flags[i])
 				cprintf("%s", ccs_dif[i]);
+		for (i = 0; i < CCS_MAX_ACL_GROUPS; i++)
+			if (domain->group[i])
+				cprintf("use_group %u\n", i);
 		cprintf("\n");
 		ccs_read_domain2(&domain->acl_info_list);
 		cprintf("\n");
