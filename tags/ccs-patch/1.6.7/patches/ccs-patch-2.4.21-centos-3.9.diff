This is TOMOYO Linux patch for CentOS 3.9.

Source code for this patch is http://ftp.riken.jp/Linux/centos/3.9/updates/SRPMS/kernel-2.4.21-58.EL.src.rpm
---
 Documentation/Configure.help |   86 +++++++++++++++++++++++++++++++++++++++++++
 arch/alpha/kernel/ptrace.c   |    7 +++
 arch/arm/kernel/ptrace.c     |    7 +++
 arch/cris/kernel/ptrace.c    |    7 +++
 arch/i386/kernel/ptrace.c    |    7 +++
 arch/ia64/ia32/sys_ia32.c    |    7 +++
 arch/ia64/kernel/ptrace.c    |    7 +++
 arch/m68k/kernel/ptrace.c    |    7 +++
 arch/mips/kernel/ptrace.c    |    7 +++
 arch/mips64/kernel/ptrace.c  |   11 +++++
 arch/parisc/kernel/ptrace.c  |    7 +++
 arch/ppc/kernel/ptrace.c     |    7 +++
 arch/ppc64/kernel/ptrace.c   |    7 +++
 arch/ppc64/kernel/ptrace32.c |    7 +++
 arch/s390/kernel/ptrace.c    |    7 +++
 arch/s390x/kernel/ptrace.c   |    7 +++
 arch/sh/kernel/ptrace.c      |    7 +++
 arch/sparc/kernel/ptrace.c   |    9 ++++
 arch/sparc64/kernel/ptrace.c |    9 ++++
 arch/x86_64/ia32/ptrace32.c  |    7 +++
 arch/x86_64/kernel/ptrace.c  |    7 +++
 fs/Config.in                 |    3 +
 fs/Makefile                  |    1 
 fs/attr.c                    |   10 +++++
 fs/exec.c                    |   16 +++++++-
 fs/fcntl.c                   |    7 +++
 fs/ioctl.c                   |   16 ++++++++
 fs/namei.c                   |   64 ++++++++++++++++++++++++++++++++
 fs/namespace.c               |   57 ++++++++++++++++++++++++++++
 fs/open.c                    |   30 +++++++++++++++
 fs/proc/Makefile             |    4 ++
 fs/proc/proc_misc.c          |    5 ++
 include/linux/sched.h        |   12 ++++++
 kernel/kmod.c                |    5 ++
 kernel/module.c              |   15 +++++++
 kernel/sched.c               |    7 +++
 kernel/signal.c              |   15 +++++++
 kernel/sys.c                 |   21 ++++++++++
 kernel/sysctl.c              |   19 +++++++++
 kernel/time.c                |   15 +++++++
 net/core/datagram.c          |   10 +++++
 net/ipv4/tcp_ipv4.c          |   11 +++++
 net/ipv4/udp.c               |   11 +++++
 net/ipv6/tcp_ipv6.c          |    7 +++
 net/ipv6/udp.c               |   11 +++++
 net/socket.c                 |   38 +++++++++++++++++++
 net/unix/af_unix.c           |    8 ++++
 47 files changed, 650 insertions(+), 2 deletions(-)

--- linux-2.4.21-58.EL.orig/Documentation/Configure.help
+++ linux-2.4.21-58.EL/Documentation/Configure.help
@@ -27989,6 +27989,92 @@ CONFIG_CRC32
   kernel tree does. Such modules that use library CRC32 functions
   require M here.
 
+CONFIG_SAKURA
+  Say Y here to support the Domain-Free Mandatory Access Control.
+
+  SAKURA stands for
+  "Security Advancement Know-how Upon Read-only Approach".
+  As the name shows, SAKURA was originally a methodology to make
+  root fs read-only to avoid tampering the system files.
+  But now, SAKURA is not only a methodology but also a kernel patch
+  that improves the system security with less effort.
+
+  SAKURA can restrict operations that affect systemwide.
+
+CONFIG_TOMOYO
+  Say Y here to support the Domain-Based Mandatory Access Control.
+
+  TOMOYO stands for "Task Oriented Management Obviates Your Onus".
+  TOMOYO is intended to provide the Domain-Based MAC
+  utilizing task_struct.
+
+  The word "domain" in TOMOYO is a class that a process
+  (i.e. task_struct) belong to.
+  The domain of a process changes whenever the process
+  executes a program.
+  This allows you to classify at the finest level.
+  The access permission is granted to domains, not to processes.
+  Policy is defined as "Which domain can access to which resource.".
+
+  The biggest feature of TOMOYO is that TOMOYO has "learning mode".
+  The learning mode can automatically generate policy definition,
+  and dramatically reduces the policy definition labors.
+
+  TOMOYO is applicable to figuring out the system's behavior, for
+  TOMOYO uses the canonicalized absolute pathnames and
+  TreeView style domain transitions.
+
+  You can make custom root fs with minimum files
+  to run minimum applications with TOMOYO.
+
+CONFIG_TOMOYO_MAX_ACCEPT_ENTRY
+  This is the default value for maximal ACL entries
+  that are automatically appended into policy at "learning mode".
+  Some programs access thousands of objects, so running
+  such programs in "learning mode" dulls the system response
+  and consumes much memory.
+  This is the safeguard for such programs.
+
+CONFIG_TOMOYO_MAX_GRANT_LOG
+  This is the default value for maximal entries for
+  access grant logs that the kernel can hold on memory.
+  You can read the log via /proc/ccs/grant_log.
+  If you don't need access grant logs,
+  you may set this value to 0.
+
+CONFIG_TOMOYO_MAX_REJECT_LOG
+  This is the default value for maximal entries for
+  access reject logs that the kernel can hold on memory.
+  You can read the log via /proc/ccs/reject_log.
+  If you don't need access reject logs,
+  you may set this value to 0.
+
+CONFIG_SYAORAN
+  Say Y or M here to support the Tamper-Proof Device Filesystem.
+
+  SYAORAN stands for
+  "Simple Yet All-important Object Realizing Abiding Nexus".
+  SYAORAN is a filesystem for /dev with Mandatory Access Control.
+
+  SAKURA can make root fs read-only, but the system can't work
+  if /dev is read-only. Therefore you need to mount a writable
+  filesystem (such as tmpfs) for /dev if root fs is read-only.
+
+  But the writable /dev means that files on /dev might be tampered.
+  For example, if /dev/null is deleted and re-created as a symbolic
+  link to /dev/hda by an attacker, the contents of the IDE HDD
+  will be destroyed at a blow.
+
+  Also, TOMOYO controls file access by pathnames,
+  not by security labels.
+  Therefore /dev/null, for example, might be tampered
+  if a process have write permission to /dev/null .
+
+  SYAORAN can ensure /dev/null is a character device file
+  with major=1 minor=3.
+
+  You can use SAKURA to make /dev not unmountable.
+
 #
 # A couple of things I keep forgetting:
 #   capitalize: AppleTalk, Ethernet, DOS, DMA, FAT, FTP, Internet,
--- linux-2.4.21-58.EL.orig/arch/alpha/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/alpha/kernel/ptrace.c
@@ -18,6 +18,9 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/fpu.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "proto.h"
 
@@ -251,6 +254,10 @@ sys_ptrace(long request, long pid, long 
 {
 	struct task_struct *child;
 	long ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	DBG(DBG_MEM, ("request=%ld pid=%ld addr=0x%lx data=0x%lx\n",
--- linux-2.4.21-58.EL.orig/arch/arm/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/arm/kernel/ptrace.c
@@ -20,6 +20,9 @@
 #include <asm/uaccess.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "ptrace.h"
 
@@ -576,6 +579,10 @@ asmlinkage int sys_ptrace(long request, 
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/cris/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/cris/kernel/ptrace.c
@@ -44,6 +44,9 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/processor.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * does not yet catch signals sent when the child dies.
@@ -108,6 +111,10 @@ asmlinkage int sys_ptrace(long request, 
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/i386/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/i386/kernel/ptrace.c
@@ -23,6 +23,9 @@
 #include <asm/debugreg.h>
 #include <asm/ldt.h>
 #include <asm/desc.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * does not yet catch signals sent when the child dies.
@@ -235,6 +238,10 @@ asmlinkage int sys_ptrace(long request, 
 	struct task_struct *child;
 	struct user * dummy = NULL;
 	int i, ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/ia64/ia32/sys_ia32.c
+++ linux-2.4.21-58.EL/arch/ia64/ia32/sys_ia32.c
@@ -58,6 +58,9 @@
 #include <net/scm.h>
 #include <net/sock.h>
 #include <asm/ia32.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #define DEBUG	0
 
@@ -3152,6 +3155,10 @@ sys32_ptrace (int request, pid_t pid, un
 	struct task_struct *child;
 	unsigned int value, tmp;
 	long i, ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.4.21-58.EL.orig/arch/ia64/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/ia64/kernel/ptrace.c
@@ -27,6 +27,9 @@
 #ifdef CONFIG_PERFMON
 #include <asm/perfmon.h>
 #endif
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Bits in the PSR that we allow ptrace() to change:
@@ -1207,6 +1210,10 @@ sys_ptrace (long request, pid_t pid, uns
 	struct task_struct *child;
 	struct switch_stack *sw;
 	long ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/m68k/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/m68k/kernel/ptrace.c
@@ -25,6 +25,9 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/processor.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * does not yet catch signals sent when the child dies.
@@ -104,6 +107,10 @@ asmlinkage int sys_ptrace(long request, 
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/mips/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/mips/kernel/ptrace.c
@@ -27,6 +27,9 @@
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
 #include <asm/cpu.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Called by kernel/ptrace.c when detaching..
@@ -43,6 +46,10 @@ asmlinkage int sys_ptrace(long request, 
 	struct task_struct *child;
 	int ret;
 	extern void save_fp(struct task_struct *);
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 #if 0
--- linux-2.4.21-58.EL.orig/arch/mips64/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/mips64/kernel/ptrace.c
@@ -29,6 +29,9 @@
 #include <asm/system.h>
 #include <asm/uaccess.h>
 #include <asm/bootinfo.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Called by kernel/ptrace.c when detaching..
@@ -48,6 +51,10 @@ asmlinkage int sys32_ptrace(int request,
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
@@ -314,6 +321,10 @@ asmlinkage int sys_ptrace(long request, 
 {
 	struct task_struct *child;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 #if 0
--- linux-2.4.21-58.EL.orig/arch/parisc/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/parisc/kernel/ptrace.c
@@ -21,6 +21,9 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 #include <asm/offset.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* These are used in entry.S, syscall_restore_rfi.  We need to record the
  * current stepping mode somewhere other than in PSW, because there is no
@@ -94,6 +97,10 @@ long sys_ptrace(long request, pid_t pid,
 #ifdef DEBUG_PTRACE
 	long oaddr=addr, odata=data;
 #endif
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/ppc/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/ppc/kernel/ptrace.c
@@ -30,6 +30,9 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Set of msr bits that gdb can change on behalf of a process.
@@ -159,6 +162,10 @@ int sys_ptrace(long request, long pid, l
 {
 	struct task_struct *child;
 	int ret = -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.4.21-58.EL.orig/arch/ppc64/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/ppc64/kernel/ptrace.c
@@ -31,6 +31,9 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Set of msr bits that gdb can change on behalf of a process.
@@ -127,6 +130,10 @@ int sys_ptrace(long request, long pid, l
 {
 	struct task_struct *child;
 	int ret = -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.4.21-58.EL.orig/arch/ppc64/kernel/ptrace32.c
+++ linux-2.4.21-58.EL/arch/ppc64/kernel/ptrace32.c
@@ -30,6 +30,9 @@
 #include <asm/page.h>
 #include <asm/pgtable.h>
 #include <asm/system.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifdef CONFIG_ALTIVEC
 /*
@@ -129,6 +132,10 @@ int sys32_ptrace(long request, long pid,
 {
 	struct task_struct *child;
 	int ret = -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) {
--- linux-2.4.21-58.EL.orig/arch/s390/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/s390/kernel/ptrace.c
@@ -38,6 +38,9 @@
 #include <asm/pgalloc.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 
 void FixPerRegisters(struct task_struct *task)
@@ -224,6 +227,10 @@ asmlinkage int sys_ptrace(long request, 
 	unsigned long tmp;
 	int copied;
 	ptrace_area   parea; 
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (request == PTRACE_TRACEME) 
--- linux-2.4.21-58.EL.orig/arch/s390x/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/s390x/kernel/ptrace.c
@@ -44,6 +44,9 @@
 #else
 #define parent_31bit 0
 #endif
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 
 void FixPerRegisters(struct task_struct *task)
@@ -434,6 +437,10 @@ asmlinkage int sys_ptrace(long request, 
 #define sizeof_parent_long 8
 #define dataptr (u8 *)&data
 #endif
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	lock_kernel();
 	if (request == PTRACE_TRACEME) 
 	{
--- linux-2.4.21-58.EL.orig/arch/sh/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/sh/kernel/ptrace.c
@@ -26,6 +26,9 @@
 #include <asm/system.h>
 #include <asm/processor.h>
 #include <asm/mmu_context.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * does not yet catch signals sent when the child dies.
@@ -162,6 +165,10 @@ asmlinkage int sys_ptrace(long request, 
 	struct task_struct *child, *tsk = current;
 	struct user * dummy = NULL;
 	int ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	ret = -EPERM;
--- linux-2.4.21-58.EL.orig/arch/sparc/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/sparc/kernel/ptrace.c
@@ -21,6 +21,9 @@
 #include <asm/pgtable.h>
 #include <asm/system.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #define MAGIC_CONSTANT 0x80000000
 
@@ -262,6 +265,12 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long data = regs->u_regs[UREG_I3];
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 #ifdef DEBUG_PTRACE
--- linux-2.4.21-58.EL.orig/arch/sparc64/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/sparc64/kernel/ptrace.c
@@ -26,6 +26,9 @@
 #include <asm/psrcompat.h>
 #include <asm/visasm.h>
 #include <asm/spitfire.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #define MAGIC_CONSTANT 0x80000000
 
@@ -108,6 +111,12 @@ asmlinkage void do_ptrace(struct pt_regs
 	unsigned long data = regs->u_regs[UREG_I3];
 	unsigned long addr2 = regs->u_regs[UREG_I4];
 	struct task_struct *child;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE)) {
+		pt_error_return(regs, EPERM);
+		return;
+	}
+	/***** TOMOYO Linux end. *****/
 
 	if (current->thread.flags & SPARC_FLAG_32BIT) {
 		addr &= 0xffffffffUL;
--- linux-2.4.21-58.EL.orig/arch/x86_64/ia32/ptrace32.c
+++ linux-2.4.21-58.EL/arch/x86_64/ia32/ptrace32.c
@@ -24,6 +24,9 @@
 #include <asm/i387.h>
 #include <asm/fpu32.h>
 #include <linux/mm.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* determines which flags the user has access to. */
 /* 1 = access 0 = no access */
@@ -201,6 +204,10 @@ asmlinkage long sys32_ptrace(long reques
 	struct pt_regs *childregs; 
 	int ret;
 	__u32 val;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	switch (request) { 
 	case PTRACE_TRACEME:
--- linux-2.4.21-58.EL.orig/arch/x86_64/kernel/ptrace.c
+++ linux-2.4.21-58.EL/arch/x86_64/kernel/ptrace.c
@@ -25,6 +25,9 @@
 #include <asm/debugreg.h>
 #include <asm/ldt.h>
 #include <asm/desc.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * does not yet catch signals sent when the child dies.
@@ -191,6 +194,10 @@ asmlinkage long sys_ptrace(long request,
 	struct task_struct *child;
 	struct user * dummy = NULL;
 	long i, ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/* This lock_kernel fixes a subtle race with suid exec */
 	lock_kernel();
--- linux-2.4.21-58.EL.orig/fs/Config.in
+++ linux-2.4.21-58.EL/fs/Config.in
@@ -201,4 +201,7 @@ comment 'Partition Types'
 source fs/partitions/Config.in
 endmenu
 source fs/nls/Config.in
+
+source fs/Config.ccs.in
+
 endmenu
--- linux-2.4.21-58.EL.orig/fs/Makefile
+++ linux-2.4.21-58.EL/fs/Makefile
@@ -97,4 +97,5 @@ obj-$(CONFIG_NFSD_ACL)		+= solaris_acl.o
 obj-y += $(join $(subdir-y),$(subdir-y:%=/%.o))
 
 
+include Makefile-2.4.ccs
 include $(TOPDIR)/Rules.make
--- linux-2.4.21-58.EL.orig/fs/attr.c
+++ linux-2.4.21-58.EL/fs/attr.c
@@ -12,6 +12,9 @@
 #include <linux/dnotify.h>
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* Taken over from the old code... */
 
@@ -127,6 +130,13 @@ int notify_change(struct dentry * dentry
 		attr->ia_atime = now;
 	if (!(ia_valid & ATTR_MTIME_SET))
 		attr->ia_mtime = now;
+	/***** TOMOYO Linux start. *****/
+	if ((ia_valid & ATTR_MODE) && !ccs_capable(CCS_SYS_CHMOD))
+		return -EPERM;
+	if ((ia_valid & (ATTR_UID | ATTR_GID)) &&
+	    !ccs_capable(CCS_SYS_CHOWN))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (inode->i_op && inode->i_op->setattr) 
--- linux-2.4.21-58.EL.orig/fs/exec.c
+++ linux-2.4.21-58.EL/fs/exec.c
@@ -51,6 +51,9 @@
 #ifdef CONFIG_KMOD
 #include <linux/kmod.h>
 #endif
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int core_uses_pid;
 char core_pattern[65] = "core";
@@ -129,6 +132,12 @@ asmlinkage long sys_uselib(const char * 
 	if (error)
 		goto exit;
 
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_uselib_permission(nd.dentry, nd.mnt);
+	if (error)
+		goto exit;
+	/***** TOMOYO Linux end. *****/
+
 	file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
 	error = PTR_ERR(file);
 	if (IS_ERR(file))
@@ -416,6 +425,11 @@ struct file *open_exec(const char *name)
 			int err = permission(inode, MAY_EXEC);
 			if (!err && !(inode->i_mode & 0111))
 				err = -EACCES;
+			/***** TOMOYO Linux start. *****/
+			if (!err)
+				err = ccs_check_open_exec_permission(nd.dentry,
+								     nd.mnt);
+			/***** TOMOYO Linux end. *****/
 			file = ERR_PTR(err);
 			if (!err) {
 				file = dentry_open(nd.dentry, nd.mnt, O_RDONLY);
@@ -1148,7 +1162,7 @@ int do_execve(char * filename, char ** a
 	if (retval < 0) 
 		goto out; 
 
-	retval = search_binary_handler(&bprm,regs);
+	retval = ccs_search_binary_handler(&bprm, regs);
 	if (retval >= 0)
 		/* execve success */
 		return retval;
--- linux-2.4.21-58.EL.orig/fs/fcntl.c
+++ linux-2.4.21-58.EL/fs/fcntl.c
@@ -15,6 +15,9 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 extern int sock_fcntl (struct file *, unsigned int cmd, unsigned long arg);
 extern int fcntl_setlease(unsigned int fd, struct file *filp, long arg);
@@ -212,6 +215,10 @@ static int setfl(int fd, struct file * f
 	 */
 	if (!(arg & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!(arg & O_APPEND) && ccs_check_rewrite_permission(filp))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	if ((arg & O_DIRECT) && !(inode->i_mapping && 
 				  inode->i_mapping->a_ops &&
 				  (inode->i_mapping->a_ops->direct_IO ||
--- linux-2.4.21-58.EL.orig/fs/ioctl.c
+++ linux-2.4.21-58.EL/fs/ioctl.c
@@ -10,6 +10,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/ioctls.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 static int file_ioctl(struct file *filp,unsigned int cmd,unsigned long arg)
 {
@@ -55,6 +58,13 @@ asmlinkage long sys_ioctl(unsigned int f
 	filp = fget(fd);
 	if (!filp)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_ioctl_permission(filp, cmd, arg);
+	if (error) {
+		fput(filp);
+		goto out;
+	}
+	/***** TOMOYO Linux end. *****/
 	error = 0;
 	lock_kernel();
 	switch (cmd) {
@@ -112,6 +122,12 @@ asmlinkage long sys_ioctl(unsigned int f
 				error = -ENOTTY;
 			break;
 		default:
+			/***** TOMOYO Linux start. *****/
+			if (!ccs_capable(CCS_SYS_IOCTL)) {
+				error = -EPERM;
+				break;
+			}
+			/***** TOMOYO Linux end. *****/
 			error = -ENOTTY;
 			if (S_ISREG(filp->f_dentry->d_inode->i_mode))
 				error = file_ioctl(filp, cmd, arg);
--- linux-2.4.21-58.EL.orig/fs/namei.c
+++ linux-2.4.21-58.EL/fs/namei.c
@@ -28,6 +28,11 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+#include <linux/module.h>
+/***** TOMOYO Linux end. *****/
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1013,6 +1018,9 @@ exit_lock:
 	return error;
 }
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_vfs.h>
+/***** TOMOYO Linux end. *****/
 /*
  *	open_namei()
  *
@@ -1080,6 +1088,11 @@ do_last:
 	if (!dentry->d_inode) {
 		if (!IS_POSIXACL(dir->d_inode))
 			mode &= ~current->fs->umask;
+		/***** TOMOYO Linux start. *****/
+		error = ccs_check_mknod_permission(dir->d_inode, dentry,
+						   nd->mnt, mode, 0);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		error = vfs_create(dir->d_inode, dentry, mode);
 		up(&dir->d_inode->i_sem);
 		dput(nd->dentry);
@@ -1165,6 +1178,13 @@ ok:
 			goto exit;
 	}
 
+	/***** TOMOYO Linux start. *****/
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_check_open_permission(dentry, nd->mnt, flag);
+	if (error)
+		goto exit;
+	/***** TOMOYO Linux end. *****/
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1303,6 +1323,7 @@ asmlinkage long sys_mknod(const char * f
 
 	if (S_ISDIR(mode))
 		return -EPERM;
+
 	tmp = getname(filename);
 	if (IS_ERR(tmp))
 		return PTR_ERR(tmp);
@@ -1316,6 +1337,11 @@ asmlinkage long sys_mknod(const char * f
 	if (!IS_POSIXACL(nd.dentry->d_inode))
 		mode &= ~current->fs->umask;
 	if (!IS_ERR(dentry)) {
+		/***** TOMOYO Linux start. *****/
+		error = ccs_check_mknod_permission(nd.dentry->d_inode, dentry,
+						   nd.mnt, mode, dev);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		switch (mode & S_IFMT) {
 		case 0: case S_IFREG:
 			error = vfs_create(nd.dentry->d_inode,dentry,mode);
@@ -1384,6 +1410,12 @@ asmlinkage long sys_mkdir(const char * p
 		if (!IS_ERR(dentry)) {
 			if (!IS_POSIXACL(nd.dentry->d_inode))
 				mode &= ~current->fs->umask;
+			/***** TOMOYO Linux start. *****/
+			error = ccs_check_mkdir_permission(nd.dentry->d_inode,
+							   dentry, nd.mnt,
+							   mode);
+			if (!error)
+			/***** TOMOYO Linux end. *****/
 			error = vfs_mkdir(nd.dentry->d_inode, dentry, mode);
 			dput(dentry);
 		}
@@ -1492,6 +1524,11 @@ asmlinkage long sys_rmdir(const char * p
 	dentry = lookup_hash(&nd.last, nd.dentry);
 	error = PTR_ERR(dentry);
 	if (!IS_ERR(dentry)) {
+		/***** TOMOYO Linux start. *****/
+		error = ccs_check_rmdir_permission(nd.dentry->d_inode, dentry,
+						   nd.mnt);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		error = vfs_rmdir(nd.dentry->d_inode, dentry);
 		dput(dentry);
 	}
@@ -1554,6 +1591,11 @@ asmlinkage long sys_unlink(const char * 
 		/* Why not before? Because we want correct error value */
 		if (nd.last.name[nd.last.len])
 			goto slashes;
+		/***** TOMOYO Linux start. *****/
+		error = ccs_check_unlink_permission(nd.dentry->d_inode, dentry,
+						    nd.mnt);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		error = vfs_unlink(nd.dentry->d_inode, dentry);
 	exit2:
 		dput(dentry);
@@ -1618,6 +1660,12 @@ asmlinkage long sys_symlink(const char *
 		dentry = lookup_create(&nd, 0);
 		error = PTR_ERR(dentry);
 		if (!IS_ERR(dentry)) {
+			/***** TOMOYO Linux start. *****/
+			error = ccs_check_symlink_permission(nd.dentry->d_inode,
+							     dentry, nd.mnt,
+							     from);
+			if (!error)
+			/***** TOMOYO Linux end. *****/
 			error = vfs_symlink(nd.dentry->d_inode, dentry, from);
 			dput(dentry);
 		}
@@ -1702,6 +1750,12 @@ asmlinkage long sys_link(const char * ol
 		new_dentry = lookup_create(&nd, 0);
 		error = PTR_ERR(new_dentry);
 		if (!IS_ERR(new_dentry)) {
+			/***** TOMOYO Linux start. *****/
+			error = ccs_check_link_permission(old_nd.dentry,
+							  nd.dentry->d_inode,
+							  new_dentry, nd.mnt);
+			if (!error)
+			/***** TOMOYO Linux end. *****/
 			error = vfs_link(old_nd.dentry, nd.dentry->d_inode, new_dentry);
 			dput(new_dentry);
 		}
@@ -1932,12 +1986,22 @@ static inline int do_rename(const char *
 	error = PTR_ERR(new_dentry);
 	if (IS_ERR(new_dentry))
 		goto exit4;
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_rename_permission(old_dir->d_inode, old_dentry,
+					    new_dir->d_inode, new_dentry,
+					    newnd.mnt);
+	if (error)
+		goto exit5;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	error = vfs_rename(old_dir->d_inode, old_dentry,
 				   new_dir->d_inode, new_dentry);
 	unlock_kernel();
 
+	/***** TOMOYO Linux start. *****/
+exit5:
+	/***** TOMOYO Linux end. *****/
 	dput(new_dentry);
 exit4:
 	dput(old_dentry);
--- linux-2.4.21-58.EL.orig/fs/namespace.c
+++ linux-2.4.21-58.EL/fs/namespace.c
@@ -21,6 +21,13 @@
 #include <linux/seq_file.h>
 #include <linux/namespace.h>
 
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
+
 struct vfsmount *do_kern_mount(const char *type, int flags, char *name, void *data);
 int do_remount_sb(struct super_block *sb, int flags, void * data);
 void kill_super(struct super_block *sb);
@@ -290,6 +297,10 @@ static int do_umount(struct vfsmount *mn
 {
 	struct super_block * sb = mnt->mnt_sb;
 	int retval = 0;
+	/***** SAKURA Linux start. *****/
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+	/***** SAKURA Linux end. *****/
 
 	/*
 	 * If we may have to abort operations to get out of this
@@ -365,6 +376,10 @@ asmlinkage long sys_umount(char * name, 
 {
 	struct nameidata nd;
 	int retval;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	retval = __user_walk(name, LOOKUP_POSITIVE|LOOKUP_FOLLOW, &nd);
 	if (retval)
@@ -500,6 +515,11 @@ static int do_loopback(struct nameidata 
 	down_write(&current->namespace->sem);
 	err = -EINVAL;
 	if (check_mnt(nd->mnt) && (!recurse || check_mnt(old_nd.mnt))) {
+		/***** SAKURA Linux start. *****/
+		err = -EPERM;
+		if (ccs_may_mount(nd))
+			goto out;
+		/***** SAKURA Linux end. *****/
 		err = -ENOMEM;
 		if (recurse)
 			mnt = copy_tree(old_nd.mnt, old_nd.dentry);
@@ -517,6 +537,9 @@ static int do_loopback(struct nameidata 
 			mntput(mnt);
 	}
 
+	/***** SAKURA Linux start. *****/
+ out:
+	/***** SAKURA Linux end. *****/
 	up_write(&current->namespace->sem);
 	path_release(&old_nd);
 	return err;
@@ -570,6 +593,12 @@ static int do_move_mount(struct nameidat
 	if (!check_mnt(nd->mnt) || !check_mnt(old_nd.mnt))
 		goto out;
 
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_umount(old_nd.mnt) || ccs_may_mount(nd))
+		goto out;
+	/***** SAKURA Linux end. *****/
+
 	err = -ENOENT;
 	down(&nd->dentry->d_inode->i_zombie);
 	if (IS_DEADDIR(nd->dentry->d_inode))
@@ -641,6 +670,12 @@ static int do_add_mount(struct nameidata
 	if (nd->mnt->mnt_sb == mnt->mnt_sb && nd->mnt->mnt_root == nd->dentry)
 		goto unlock;
 
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_mount(nd))
+		goto unlock;
+	/***** SAKURA Linux end. *****/
+
 	mnt->mnt_flags = mnt_flags;
 	err = graft_tree(mnt, nd);
 unlock:
@@ -715,6 +750,17 @@ long do_mount(char * dev_name, char * di
 	if (dev_name && !memchr(dev_name, 0, PAGE_SIZE))
 		return -EINVAL;
 
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_MOUNT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
+	/***** SAKURA Linux start. *****/
+	retval = ccs_check_mount_permission(dev_name, dir_name, type_page,
+					    &flags);
+	if (retval)
+		return retval;
+	/***** SAKURA Linux end. *****/
+
 	/* Separate the per-mountpoint flags */
 	if (flags & MS_NOSUID)
 		mnt_flags |= MNT_NOSUID;
@@ -908,6 +954,10 @@ asmlinkage long sys_pivot_root(const cha
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PIVOT_ROOT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 
@@ -922,6 +972,13 @@ asmlinkage long sys_pivot_root(const cha
 	if (error)
 		goto out1;
 
+	/***** SAKURA Linux start. *****/
+	error = ccs_check_pivot_root_permission(&old_nd, &new_nd);
+	if (error) {
+		path_release(&old_nd);
+		goto out1;
+	}
+	/***** SAKURA Linux end. *****/
 	read_lock(&current->fs->lock);
 	user_nd.mnt = mntget(current->fs->rootmnt);
 	user_nd.dentry = dget(current->fs->root);
--- linux-2.4.21-58.EL.orig/fs/open.c
+++ linux-2.4.21-58.EL/fs/open.c
@@ -21,6 +21,13 @@
 
 #define special_file(m) (S_ISCHR(m)||S_ISBLK(m)||S_ISFIFO(m)||S_ISSOCK(m))
 
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
+
 int vfs_statfs(struct super_block *sb, struct statfs *buf)
 {
 	int retval = -ENODEV;
@@ -241,6 +248,11 @@ static inline long do_sys_truncate(const
 	if (error)
 		goto dput_and_out;
 
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_truncate_permission(nd.dentry, nd.mnt, length, 0);
+	if (!error)
+	/***** TOMOYO Linux end. *****/
+
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error) {
 		DQUOT_INIT(inode);
@@ -294,6 +306,12 @@ static inline long do_sys_ftruncate(unsi
 	if (IS_APPEND(inode))
 		goto out_putf;
 
+	/***** TOMOYO Linux start. *****/
+	error = ccs_check_truncate_permission(dentry, file->f_vfsmnt, length,
+					      0);
+	if (error)
+		goto out_putf;
+	/***** TOMOYO Linux end. *****/
 	error = locks_verify_truncate(inode, file, length);
 	if (!error)
 		error = do_truncate(dentry, length);
@@ -530,6 +548,14 @@ asmlinkage long sys_chroot(const char * 
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_CHROOT))
+		goto dput_and_out;
+	/***** TOMOYO Linux end. *****/
+	/***** SAKURA Linux start. *****/
+	if (ccs_check_chroot_permission(&nd))
+		goto dput_and_out;
+	/***** SAKURA Linux end. *****/
 
 	set_fs_root(current->fs, nd.mnt, nd.dentry);
 	set_fs_altroot();
@@ -1019,6 +1045,10 @@ out_unlock:
  */
 asmlinkage long sys_vhangup(void)
 {
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup(current->tty);
 		return 0;
--- linux-2.4.21-58.EL.orig/fs/proc/Makefile
+++ linux-2.4.21-58.EL/fs/proc/Makefile
@@ -18,4 +18,8 @@ ifeq ($(CONFIG_PROC_DEVICETREE),y)
 obj-y += proc_devtree.o
 endif
 
+export-objs += ccs_proc.o
+obj-$(CONFIG_SAKURA) += ccs_proc.o
+obj-$(CONFIG_TOMOYO) += ccs_proc.o
+
 include $(TOPDIR)/Rules.make
--- linux-2.4.21-58.EL.orig/fs/proc/proc_misc.c
+++ linux-2.4.21-58.EL/fs/proc/proc_misc.c
@@ -713,4 +713,9 @@ void __init proc_misc_init(void)
 			entry->proc_fops = &ppc_htab_operations;
 	}
 #endif
+	/***** CCS start. *****/
+#if defined(CONFIG_SAKURA) || defined(CONFIG_TOMOYO)
+	printk(KERN_INFO "Hook version: 2.4.21-58.EL 2009/03/24\n");
+#endif
+	/***** CCS end. *****/
 }
--- linux-2.4.21-58.EL.orig/include/linux/sched.h
+++ linux-2.4.21-58.EL/include/linux/sched.h
@@ -36,6 +36,10 @@ extern int exec_shield_randomize;
 extern int panic_timeout;
 extern int print_fatal_signals;
 
+/***** TOMOYO Linux start. *****/
+struct ccs_domain_info;
+/***** TOMOYO Linux end. *****/
+
 /*
  * cloning flags:
  */
@@ -586,6 +590,10 @@ struct task_struct {
 	void *audit;
 #endif
 #endif /* !__GENKSYMS__ */
+	/***** TOMOYO Linux start. *****/
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+	/***** TOMOYO Linux end. *****/
 };
 
 /*
@@ -740,6 +748,10 @@ extern struct exec_domain	default_exec_d
     switch_lock:	SPIN_LOCK_UNLOCKED,				\
     journal_info:	NULL,						\
     real_stack:		&tsk,						\
+	/***** TOMOYO Linux start. *****/ \
+	ccs_domain_info: NULL,            \
+	ccs_flags: 0                      \
+	/***** TOMOYO Linux end. *****/   \
 }
 
 
--- linux-2.4.21-58.EL.orig/kernel/kmod.c
+++ linux-2.4.21-58.EL/kernel/kmod.c
@@ -144,6 +144,11 @@ int exec_usermodehelper(char *program_pa
 	/* Allow execve args to be in kernel space. */
 	set_fs(KERNEL_DS);
 
+	/***** TOMOYO Linux start. *****/
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+	/***** TOMOYO Linux end. *****/
+
 	/* Go, go, go... */
 	if (execve(program_path, argv, envp) < 0)
 		return -errno;
--- linux-2.4.21-58.EL.orig/kernel/module.c
+++ linux-2.4.21-58.EL/kernel/module.c
@@ -11,6 +11,9 @@
 #include <linux/slab.h>
 #include <linux/kmod.h>
 #include <linux/seq_file.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Originally by Anonymous (as far as I know...)
@@ -333,6 +336,10 @@ sys_create_module(const char *name_user,
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	lock_kernel();
 	if ((namelen = get_mod_name(name_user, &name)) < 0) {
 		error = namelen;
@@ -394,6 +401,10 @@ sys_init_module(const char *name_user, s
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	lock_kernel();
 	if ((namelen = get_mod_name(name_user, &name)) < 0) {
 		error = namelen;
@@ -662,6 +673,10 @@ sys_delete_module(const char *name_user)
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	if (name_user) {
--- linux-2.4.21-58.EL.orig/kernel/sched.c
+++ linux-2.4.21-58.EL/kernel/sched.c
@@ -31,6 +31,9 @@
 #include <linux/blkdev.h>
 #include <linux/delay.h>
 #include <linux/timer.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 
 #define cpu_to_node_mask(cpu) (cpu_online_map)
@@ -1736,6 +1739,10 @@ out_unlock:
 asmlinkage long sys_nice(int increment)
 {
 	long nice;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 *	Setpriority might change our priority at the same moment.
--- linux-2.4.21-58.EL.orig/kernel/signal.c
+++ linux-2.4.21-58.EL/kernel/signal.c
@@ -21,6 +21,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/siginfo.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 static void print_maps(void);
 static void print_ulimits(void);
@@ -1898,6 +1901,12 @@ asmlinkage long
 sys_kill(int pid, int sig)
 {
 	struct siginfo info;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -1967,6 +1976,12 @@ sys_tkill(int pid, int sig)
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	info.si_signo = sig;
 	info.si_errno = 0;
--- linux-2.4.21-58.EL.orig/kernel/sys.c
+++ linux-2.4.21-58.EL/kernel/sys.c
@@ -23,6 +23,9 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -234,6 +237,12 @@ asmlinkage long sys_setpriority(int whic
 
 	if (which > 2 || which < 0)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
+	/***** TOMOYO Linux end. *****/
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -364,6 +373,10 @@ asmlinkage long sys_reboot(int magic1, i
 	    (magic2 != LINUX_REBOOT_MAGIC2 && magic2 != LINUX_REBOOT_MAGIC2A &&
 			magic2 != LINUX_REBOOT_MAGIC2B))
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	lock_kernel();
 	switch (cmd) {
@@ -1154,6 +1167,10 @@ asmlinkage long sys_sethostname(char *na
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1195,6 +1212,10 @@ asmlinkage long sys_setdomainname(char *
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.4.21-58.EL.orig/kernel/sysctl.c
+++ linux-2.4.21-58.EL/kernel/sysctl.c
@@ -34,6 +34,9 @@
 #include <linux/hugetlb.h>
 
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifdef CONFIG_ROOT_NFS
 #include <linux/nfs_fs.h>
@@ -554,6 +557,11 @@ int do_sysctl(int *name, int nlen, void 
 
 		spin_unlock(&sysctl_lock);
 
+		/***** TOMOYO Linux start. *****/
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		error = parse_table(name, nlen, oldval, oldlenp,
 					newval, newlen, head->ctl_table,
 					&context);
@@ -623,6 +631,15 @@ repeat:
 				if (ctl_perm(table, 001))
 					return -EPERM;
 				if (table->strategy) {
+					/***** TOMOYO Linux start. *****/
+					int op = 0;
+					if (oldval)
+						op |= 004;
+					if (newval)
+						op |= 002;
+					if (ctl_perm(table, op))
+						return -EPERM;
+					/***** TOMOYO Linux end. *****/
 					error = table->strategy(
 						table, name, nlen,
 						oldval, oldlenp,
@@ -1563,7 +1580,7 @@ int sysctl_string(ctl_table *table, int 
 			len--;
 		((char *) table->data)[len] = 0;
 	}
-	return 0;
+	return 1;
 }
 
 /*
--- linux-2.4.21-58.EL.orig/kernel/time.c
+++ linux-2.4.21-58.EL/kernel/time.c
@@ -29,6 +29,9 @@
 #include <linux/smp_lock.h>
 
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* 
  * The timezone where the local system is located.  Used as a default by some
@@ -76,6 +79,10 @@ asmlinkage long sys_stime(int * tptr)
 
 	if (!capable(CAP_SYS_TIME))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	if (get_user(value, tptr))
 		return -EFAULT;
 	br_write_lock_irq(BR_XTIME_LOCK);
@@ -150,6 +157,10 @@ int do_sys_settimeofday(struct timeval *
 
 	if (!capable(CAP_SYS_TIME))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 		
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
@@ -216,6 +227,10 @@ int do_adjtimex(struct timex *txc)
 	/* In order to modify anything, you gotta be super-user! */
 	if (txc->modes && !capable(CAP_SYS_TIME))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 		
 	/* Now we validate the data before disabling interrupts */
 
--- linux-2.4.21-58.EL.orig/net/core/datagram.c
+++ linux-2.4.21-58.EL/net/core/datagram.c
@@ -47,6 +47,10 @@
 #include <net/sock.h>
 #include <net/checksum.h>
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  *	Is a socket 'connection oriented' ?
@@ -168,6 +172,12 @@ struct sk_buff *skb_recv_datagram(struct
 		} else
 			skb = skb_dequeue(&sk->receive_queue);
 
+		/***** TOMOYO Linux start. *****/
+		error = ccs_socket_recv_datagram_permission(sk, skb, flags);
+		if (error)
+			goto no_packet;
+		/***** TOMOYO Linux end. *****/
+
 		if (skb)
 			return skb;
 
--- linux-2.4.21-58.EL.orig/net/ipv4/tcp_ipv4.c
+++ linux-2.4.21-58.EL/net/ipv4/tcp_ipv4.c
@@ -67,6 +67,9 @@
 
 #include <linux/inet.h>
 #include <linux/stddef.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 extern int sysctl_ip_dynaddr;
 int sysctl_tcp_tw_reuse = 0;
@@ -225,6 +228,10 @@ static int tcp_v4_get_port(struct sock *
 				rover = low;
 			head = &tcp_bhash[tcp_bhashfn(rover)];
 			spin_lock(&head->lock);
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(rover))
+				goto next;
+			/***** SAKURA Linux end. *****/
 			for (tb = head->chain; tb; tb = tb->next)
 				if (tb->port == rover)
 					goto next;
@@ -685,6 +692,10 @@ static int tcp_v4_hash_connect(struct so
 				rover = low;
 			head = &tcp_bhash[tcp_bhashfn(rover)];
 			spin_lock(&head->lock);		
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(rover))
+				goto next_port;
+			/***** SAKURA Linux end. *****/
 
 			/* Does not bother with rcv_saddr checks,
 			 * because the established check is already
--- linux-2.4.21-58.EL.orig/net/ipv4/udp.c
+++ linux-2.4.21-58.EL/net/ipv4/udp.c
@@ -104,6 +104,9 @@
 #include <net/checksum.h>
 #include <linux/compiler.h>
 #include <net/xfrm.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 /*
  *	Snmp MIB for the UDP layer
@@ -138,6 +141,10 @@ static int udp_v4_get_port(struct sock *
 					result = sysctl_local_port_range[0] +
 						((result - sysctl_local_port_range[0]) &
 						 (UDP_HTABLE_SIZE - 1));
+				/***** SAKURA Linux start. *****/
+				if (ccs_lport_reserved(result))
+					continue;
+				/***** SAKURA Linux end. *****/
 				goto gotit;
 			}
 			size = 0;
@@ -155,6 +162,10 @@ static int udp_v4_get_port(struct sock *
 				result = sysctl_local_port_range[0]
 					+ ((result - sysctl_local_port_range[0]) &
 					   (UDP_HTABLE_SIZE - 1));
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(result))
+				continue;
+			/***** SAKURA Linux end. *****/
 			if (!udp_lport_inuse(result))
 				break;
 		}
--- linux-2.4.21-58.EL.orig/net/ipv6/tcp_ipv6.c
+++ linux-2.4.21-58.EL/net/ipv6/tcp_ipv6.c
@@ -53,6 +53,9 @@
 #include <net/inet_ecn.h>
 
 #include <asm/uaccess.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 static void	tcp_v6_send_reset(struct sk_buff *skb);
 static void	tcp_v6_or_send_ack(struct sk_buff *skb, struct open_request *req);
@@ -111,6 +114,10 @@ static int tcp_v6_get_port(struct sock *
 				rover = low;
 			head = &tcp_bhash[tcp_bhashfn(rover)];
 			spin_lock(&head->lock);
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(rover))
+				goto next;
+			/***** SAKURA Linux end. *****/
 			for (tb = head->chain; tb; tb = tb->next)
 				if (tb->port == rover)
 					goto next;
--- linux-2.4.21-58.EL.orig/net/ipv6/udp.c
+++ linux-2.4.21-58.EL/net/ipv6/udp.c
@@ -52,6 +52,9 @@
 
 #include <net/checksum.h>
 #include <net/xfrm.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 struct udp_mib udp_stats_in6[NR_CPUS*2];
 
@@ -79,6 +82,10 @@ static int udp_v6_get_port(struct sock *
 					result = sysctl_local_port_range[0] +
 						((result - sysctl_local_port_range[0]) &
 						 (UDP_HTABLE_SIZE - 1));
+				/***** SAKURA Linux start. *****/
+				if (ccs_lport_reserved(result))
+					continue;
+				/***** SAKURA Linux end. *****/
 				goto gotit;
 			}
 			size = 0;
@@ -96,6 +103,10 @@ static int udp_v6_get_port(struct sock *
 				result = sysctl_local_port_range[0]
 					+ ((result - sysctl_local_port_range[0]) &
 					   (UDP_HTABLE_SIZE - 1));
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(result))
+				continue;
+			/***** SAKURA Linux end. *****/
 			if (!udp_lport_inuse(result))
 				break;
 		}
--- linux-2.4.21-58.EL.orig/net/socket.c
+++ linux-2.4.21-58.EL/net/socket.c
@@ -86,6 +86,10 @@
 #include <net/scm.h>
 #include <net/tux.h>
 #include <linux/netfilter.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
 
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_read(struct file *file, char *buf,
@@ -521,6 +525,12 @@ int sock_sendmsg(struct socket *sock, st
 	int err;
 	struct scm_cookie scm;
 
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_sendmsg_permission(sock,
+					    (struct sockaddr *) msg->msg_name,
+					    msg->msg_namelen);
+	if (!err)
+	/***** TOMOYO Linux end. *****/
 	err = scm_send(sock, msg, &scm);
 	if (err >= 0) {
 		err = sock->ops->sendmsg(sock, msg, size, &scm);
@@ -898,6 +908,11 @@ int sock_create(int family, int type, in
 		family = PF_PACKET;
 	}
 		
+	/***** TOMOYO Linux start. *****/
+	i = ccs_socket_create_permission(family, type, protocol);
+	if (i)
+		return i;
+	/***** TOMOYO Linux end. *****/
 #if defined(CONFIG_KMOD) && defined(CONFIG_NET)
 	/* Attempt to load a protocol module if the find failed. 
 	 * 
@@ -1053,6 +1068,12 @@ asmlinkage long sys_bind(int fd, struct 
 	if((sock = sockfd_lookup(fd,&err))!=NULL)
 	{
 		if((err=move_addr_to_kernel(umyaddr,addrlen,address))>=0)
+			/***** TOMOYO Linux start. *****/
+			err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+							 address, addrlen);
+		if (!err)
+			/***** TOMOYO Linux end. *****/
 			err = sock->ops->bind(sock, (struct sockaddr *)address, addrlen);
 		sockfd_put(sock);
 	}			
@@ -1074,6 +1095,10 @@ asmlinkage long sys_listen(int fd, int b
 	if ((sock = sockfd_lookup(fd, &err)) != NULL) {
 		if ((unsigned) backlog > SOMAXCONN)
 			backlog = SOMAXCONN;
+		/***** TOMOYO Linux start. *****/
+		err = ccs_socket_listen_permission(sock);
+		if (!err)
+		/***** TOMOYO Linux end. *****/
 		err=sock->ops->listen(sock, backlog);
 		sockfd_put(sock);
 	}
@@ -1114,6 +1139,13 @@ asmlinkage long sys_accept(int fd, struc
 	if (err < 0)
 		goto out_release;
 
+	/***** TOMOYO Linux start. *****/
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_release;
+	}
+	/***** TOMOYO Linux end. *****/
 	if (upeer_sockaddr) {
 		if(newsock->ops->getname(newsock, (struct sockaddr *)address, &len, 2)<0) {
 			err = -ECONNABORTED;
@@ -1164,6 +1196,12 @@ asmlinkage long sys_connect(int fd, stru
 	err = move_addr_to_kernel(uservaddr, addrlen, address);
 	if (err < 0)
 		goto out_put;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_connect_permission(sock, (struct sockaddr *) address,
+					    addrlen);
+	if (err)
+		goto out_put;
+	/***** TOMOYO Linux end. *****/
 	err = sock->ops->connect(sock, (struct sockaddr *) address, addrlen,
 				 sock->file->f_flags);
 out_put:
--- linux-2.4.21-58.EL.orig/net/unix/af_unix.c
+++ linux-2.4.21-58.EL/net/unix/af_unix.c
@@ -111,6 +111,9 @@
 #include <linux/rtnetlink.h>
 
 #include <asm/checksum.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int sysctl_unix_max_dgram_qlen = 10;
 
@@ -720,6 +723,11 @@ static int unix_bind(struct socket *sock
 		 * All right, let's create it.
 		 */
 		mode = S_IFSOCK | (sock->inode->i_mode & ~current->fs->umask);
+		/***** TOMOYO Linux start. *****/
+		err = ccs_check_mknod_permission(nd.dentry->d_inode, dentry,
+						 nd.mnt, mode, 0);
+		if (!err)
+		/***** TOMOYO Linux end. *****/
 		err = vfs_mknod(nd.dentry->d_inode, dentry, mode, 0);
 		if (err)
 			goto out_mknod_dput;
