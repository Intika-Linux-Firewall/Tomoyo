<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux Install manual</title>
<link rel="stylesheet" href="https://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="android-arm.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>

<h1>TOMOYO Linux on Android</h1>

<p>This page describes how to run TOMOYO Linux on Android emulator for ARM architecture. This page assumes Ubuntu 8.04.4 for x86 architecture as the host environment.</p>

<hr>

<h2>Step 1: Install required packages.</h2>

<p>Install packages as suggested at <a href="https://source.android.com/source/download.html">https://source.android.com/source/download.html</a> .</p>

<table border="1">
<tr><td>
sudo apt-get install git-core gnupg sun-java5-jdk flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl libncurses5-dev zlib1g-dev
</td></tr>
</table>

<h2>Step 2: Set environment variables.</h2>

<p>Set environment variables shown below. Adding to user's initrc script (e.g. ~/.bashrc ) is recommended. You may try arm-eabi-4.3.1 or arm-eabi-4.4.0 instead of arm-eabi-4.2.1 .</p>

<table border="1">
<tr><td>
export ANDROID_HOME=$HOME/mydroid/<br>
export ANDROID_IMG=$ANDROID_HOME/image/<br>
export ANDROID_TOOLCHAIN=$ANDROID_HOME/prebuilt/linux-x86/toolchain/arm-eabi-4.2.1/bin/<br>
export PATH=$PATH:$ANDROID_HOME/out/host/linux-x86/bin/:$ANDROID_TOOLCHAIN
</td></tr>
</table>

<h2>Step 3: Build the Android environment.</h2>

<p>Download the source code and compile the emulator.</p>

<table border="1">
<tr><td>
mkdir -p $ANDROID_HOME<br>
cd $ANDROID_HOME<br>
wget http://android.git.kernel.org/repo<br>
chmod 755 repo<br>
./repo init -u git://android.git.kernel.org/platform/manifest.git -b froyo<br>
./repo sync<br>
make
</td></tr>
</table>

<h2>Step 4: Build the Android kernel.</h2>

<p>Compile the kernel. The proceedure is same as usual except applying TOMOYO Linux patches.</p>

<table border="1">
<tr><td>
mkdir -p $ANDROID_HOME/tmp<br>
cd $ANDROID_HOME/tmp/<br>
wget -O kernel-source.tar.gz 'http://android.git.kernel.org/?p=kernel/common.git;a=snapshot;h=b0d93fb0426911d0329f861f22c59f1c72cff815;sf=tgz'<br>
tar -zxf kernel-source.tar.gz<br>
cd common-b0d93fb/<br>
wget -O ccs-patch-1.8.5-20190305.tar.gz 'https://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/49684/ccs-patch-1.8.5-20190305.tar.gz'<br>
wget -O ccs-patch-1.8.5-20190305.tar.gz.asc 'https://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/49684/ccs-patch-1.8.5-20190305.tar.gz.asc'<br>
gpg ccs-patch-1.8.5-20190305.tar.gz.asc<br>
tar -zxf ccs-patch-1.8.5-20190305.tar.gz<br>
patch -p1 &lt; patches/ccs-patch-2.6.29-android-goldfish.diff<br>
sed -i -e 's:/sbin/modprobe /sbin/hotplug::' -e 's:/sbin/ccs-start:/init:' -- security/ccsecurity/Kconfig<br>
ARCH=arm CROSS_COMPILE=$ANDROID_TOOLCHAIN/arm-eabi- make goldfish_defconfig<br>
ARCH=arm CROSS_COMPILE=$ANDROID_TOOLCHAIN/arm-eabi- make -s<br>
mkdir -p $ANDROID_IMG/tmp<br>
cp -p arch/arm/boot/zImage $ANDROID_IMG/kernel.img
</td></tr>
</table>

<h2>Step 5: Copy Android's image files.</h2>

<p>Copy image file used by Android emulator.</p>

<table border="1">
<tr><td>
cd $ANDROID_HOME/out/target/product/generic/<br>
cp -p system.img ramdisk.img userdata.img $ANDROID_IMG
</td></tr>
</table>

<h2>Step 6: Compile tools for host environment.</h2>

<p>Install TOMOYO Linux's userland tools into host environment in order to manage Android emulator remotely.</p>

<table border="1">
<tr><td>
cd $ANDROID_HOME/tmp/<br>
wget -O ccs-tools-1.8.5-20170102.tar.gz 'https://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/49693/ccs-tools-1.8.5-20170102.tar.gz'<br>
wget -O ccs-tools-1.8.5-20170102.tar.gz.asc 'https://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/49693/ccs-tools-1.8.5-20170102.tar.gz.asc'<br>
gpg ccs-tools-1.8.5-20170102.tar.gz.asc<br>
tar -zxf ccs-tools-1.8.5-20170102.tar.gz<br>
cd ccstools<br>
make<br>
sudo make install
</td></tr>
</table>

<h2>Step 7: Compile tools for emulator environment.</h2>

<p>Install TOMOYO Linux's userland tools into Android emulator environment.</p>

<p>Since /init.rc in Android emulator's ramdisk creates /etc as a symlink to /system/etc/ directory, /sbin/ccs-init (TOMOYO Linux's policy loader which will be added at Step 13) can't reserve /etc/ccs/ directory for storing policy which is loaded upon boot. Thus, use /ccs/ directory rather than /etc/ccs/ directory.</p>

<table border="1">
<tr><td>
cd $ANDROID_HOME/tmp/<br>
wget -O agcc https://plausible.org/andy/agcc<br>
chmod 755 agcc<br>
./agcc -o init_policy $ANDROID_HOME/tmp/ccstools/usr_lib_ccs/init_policy.c<br>
./agcc -o ccs-editpolicy-agent $ANDROID_HOME/tmp/ccstools/usr_lib_ccs/ccs-editpolicy-agent.c<br>
sed -e 's:etc/ccs:ccs:g' $ANDROID_HOME/tmp/ccstools/sbin/ccs-init.c &gt; $ANDROID_HOME/tmp/ccstools/ccs-init2.c<br>
./agcc -o ccs-init $ANDROID_HOME/tmp/ccstools/ccs-init2.c<br>
chmod 700 init_policy ccs-editpolicy-agent ccs-init
</td></tr>
</table>

<h2>Step 8: Edit Android's ramdisk image.</h2>

<p>Copy the agent program into Android emulator's ramdisk and configure the agent to be automatically executed upon boot.</p>

<table border="1">
<tr><td>
cd $ANDROID_IMG/tmp/<br>
zcat ../ramdisk.img | cpio -id<br>
echo 'service ccs_agent /sbin/ccs-editpolicy-agent 0.0.0.0:7000' &gt;&gt; init.rc<br>
echo '&nbsp;&nbsp;&nbsp;&nbsp;oneshot' &gt;&gt; init.rc<br>
echo &gt;&gt; init.rc<br>
cp -p $ANDROID_HOME/tmp/init_policy $ANDROID_HOME/tmp/ccs-editpolicy-agent sbin/<br>
find . -print0 | cpio -o0 -H newc | gzip -9 &gt; ../ramdisk.img
</td></tr>
</table>

<h2>Step 9: Start the Android emulator.</h2>

<p>Start the Android emulator. Specify the kernel made at step 4 and the ramdisk made at step 8.</p>

<table border="1">
<tr><td>
emulator -kernel $ANDROID_IMG/kernel.img -ramdisk $ANDROID_IMG/ramdisk.img -sysdir $ANDROID_IMG -data $ANDROID_IMG/userdata.img -show-kernel
</td></tr>
</table>

<h2>Step 10: Pull files needed for policy loader.</h2>

<p>Copy files needed by /sbin/ccs-init . On Android environment, /system/bin/loader is used for loading dynamically linked library files. But /system/ partition is not yet mounted when /sbin/ccs-init is executed. Therefore, you need to copy /bin/loader in the /system/ partition to /system/bin/ directory in the ramdisk's image. Likewise, you need to copy /lib/libc.so and /lib/libm.so in the /system/ partition to /lib/ directory in the ramdisk's image.</p>

<table border="1">
<tr><td>
cd $ANDROID_IMG/tmp/<br>
mkdir -p system/bin lib<br>
adb pull /system/bin/linker system/bin/<br>
adb pull /system/lib/libc.so lib/<br>
adb pull /system/lib/libm.so lib/<br>
chmod 755 system/bin/linker lib/libc.so lib/libm.so<br>
</td></tr>
</table>

<h2>Step 11: Initialize policy and pull.</h2>

<p>Create initial policy used by TOMOYO Linux. Then, copy the initial policy to ramdisk's /ccs/ directory.</p>

<table border="1">
<tr><td>
mkdir -p $ANDROID_IMG/tmp/ccs/<br>
adb shell /sbin/init_policy policy_dir=/data/ccs/<br>
adb pull /data/ccs/ $ANDROID_IMG/tmp/ccs/<br>
rm -fR $ANDROID_IMG/tmp/ccs/tools/ $ANDROID_IMG/tmp/ccs/policy/ $ANDROID_IMG/tmp/ccs/ccs-load-module<br>
adb shell rm -R /data/ccs/<br>
adb emu kill
</td></tr>
</table>

<h2>Step 12: Edit initialized policy.</h2>

<p>Add missing entries (e.g. "acl_group 0 file read" ) to exception policy. Below is just an example. Domain policy is configured to use profile 1 (which is a profile for "learning mode"). Manager is configured to allow only agent program.</p>

<table border="1">
<tr><td>
cd $ANDROID_IMG/tmp/<br>
(<br>
echo 'initialize_domain /init'<br>
echo 'initialize_domain /system/bin/app_process'<br>
<br>
echo 'acl_group 0 file read /system/lib/\@.so'<br>
echo 'acl_group 0 file read /system/framework/\*.jar'<br>
echo 'acl_group 0 file read /system/media/audio/\*/\*'<br>
echo 'acl_group 0 file read /system/fonts/\*.ttf'<br>
<br>
echo 'path_group SYSTEM_APK /system/app/\@.apk'<br>
<br>
echo 'path_group SYS_FILES sysfs:/kernel/ipv4/tcp_wmem_min'<br>
echo 'path_group SYS_FILES sysfs:/kernel/ipv4/tcp_wmem_def'<br>
echo 'path_group SYS_FILES sysfs:/kernel/ipv4/tcp_wmem_max'<br>
echo 'path_group SYS_FILES sysfs:/kernel/ipv4/tcp_rmem_min'<br>
echo 'path_group SYS_FILES sysfs:/kernel/ipv4/tcp_rmem_def'<br>
echo 'path_group SYS_FILES sysfs:/kernel/ipv4/tcp_rmem_max'<br>
<br>
echo 'acl_group 0 file read sysfs:/devices/platform/\*battery\*/power_supply/ac/online'<br>
echo 'acl_group 0 file read sysfs:/devices/platform/\*battery\*/power_supply/battery/\@'<br>
<br>
#App. specific data files<br>
) &gt;&gt; ccs/exception_policy.conf<br>
(<br>
echo '&lt;kernel&gt;'<br>
echo 'use_profile 1'<br>
) &gt; ccs/domain_policy.conf<br>
echo /sbin/ccs-editpolicy-agent &gt; ccs/manager.conf
</td></tr>
</table>

<h2>Step 13: Add policy loader to Android's ramdisk image.</h2>

<p>Add ccs-init into ramdisk in order to enable TOMOYO Linux.</p>

<table border="1">
<tr><td>
cd $ANDROID_IMG/tmp/<br>
rm sbin/init_policy<br>
cp -p $ANDROID_HOME/tmp/ccs-init sbin/<br>
find . -print0 | cpio -o0 -H newc | gzip -9 &gt; ../ramdisk.img
</td></tr>
</table>

<h2>Step 14: Start the Android emulator.</h2>

<p>Start the Android emulator. Specify the kernel made at step 4 and the ramdisk made at step 13.</p>

<table border="1">
<tr><td>
emulator -kernel $ANDROID_IMG/kernel.img -ramdisk $ANDROID_IMG/ramdisk.img -sysdir $ANDROID_IMG -data $ANDROID_IMG/userdata.img -show-kernel
</td></tr>
</table>

<h2>Step 15: Enable TCP port forwarding.</h2>

<p>Configure port forwarding in order to communicate with the agent program running in the emulator. Below line makes TCP connection requests sent to host environment's port 10000 are forwarded to emulator environment's port 7000. As you have configures ccs-editpolicy-agent to listen at port 7000 at step 8, you can communicate with the agent program by connecting to host environment's port 10000.</p>

<table border="1">
<tr><td>
adb forward tcp:10000 tcp:7000
</td></tr>
</table>

<h2>Step 16: Operate via agent.</h2>

<p>You can browse/edit policy via agent program by starting ccs-editpolicy as shown below.</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-editpolicy 127.0.0.1:10000
</td></tr>
</table>

<p>You can save current policy into ramdisk's /ccs/ directory by executing ccs-savepolicy as shown below.</p>

<table border="1">
<tr><td>
cd $ANDROID_IMG/tmp/<br>
/usr/sbin/ccs-savepolicy -e 127.0.0.1:10000 &gt; ccs/exception_policy.conf<br>
/usr/sbin/ccs-savepolicy -d 127.0.0.1:10000 &gt; ccs/domain_policy.conf<br>
/usr/sbin/ccs-savepolicy -p 127.0.0.1:10000 &gt; ccs/profile.conf<br>
find . -print0 | cpio -o0 -H newc | gzip -9 &gt; ../ramdisk.img
</td></tr>
</table>

<p>You can save audit logs by starting ccs-auditd as shown below. Please be careful with disk's free space because a lot of logs are generated.</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-auditd 127.0.0.1:10000
</td></tr>
</table>

<p>You can interactively handle policy violation in enforcing mode by starting ccs-queryd as shown below. Press Ctrl-C to terminate ccs-queryd.</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-queryd 127.0.0.1:10000
</td></tr>
</table>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="https://osdn.jp/"><img src="https://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
