<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>シェルセッションのコマンドラインを記録する</title>
<link rel="stylesheet" href="http://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="ssh-recording-cmdline.html.en">English Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>シェルセッションのコマンドラインを記録する</h1>

<h2>概要</h2>

<p>このページでは、ＳＳＨのログインセッションで行われた操作内容を記録する手順について紹介します。</p>

<hr>

<h2>ステップ１：ソースコードのコンパイル</h2>

<p>以下のソースコードをコンパイルします。このページでは、コンパイルされたプログラムの名前を /bin/record_cmdline とします。また、ＳＳＨサーバのパス名を /usr/sbin/sshd とします。また、ログインシェルのパス名を /bin/bash とします。</p>

<table border="1">
<tr><td><pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;syslog.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/file.h&gt;
#include &lt;fcntl.h&gt;

static void encode(char *buffer, const char *string)
{
	while (1) {
		const unsigned char c = *(const unsigned char *) string++;
		if (!c)
			break;
		else if (c == '\\') {
			*buffer++ = '\\';
			*buffer++ = '\\';
		} else if (c &gt; 32 &amp;&amp; c &lt; 127)
			*buffer++ = c;
		else {
			*buffer++ = '\\';
			*buffer++ = '0' + (c &gt;&gt; 6);
			*buffer++ = '0' + ((c &gt;&gt; 3) &amp; 7);
			*buffer++ = '0' + (c &amp; 7);
		}
	}
}

int main(int raw_argc, char *raw_argv[])
{
	int i;
	int argc;
	int envc;
	char *filename;
	char **argv;
	char **envp;
	{ /* Check that I'm an execute handler process.  */
		int fd = open("/proc/ccs/.execute_handler", O_RDONLY);
		close(fd);
		if (fd == EOF) {
			fprintf(stderr, "FATAL: I'm not execute_handler.\n");
			return 1;
		}
	}
	if (raw_argc &lt; 7)
		return 1;
	filename = raw_argv[4];
	argc = atoi(raw_argv[5]);
	envc = atoi(raw_argv[6]);
	if (raw_argc != argc + envc + 7)
		return 1;
	for (i = 5; i &lt; argc + 5; i++)
		raw_argv[i] = raw_argv[i + 2];
	raw_argv[argc + 5] = NULL;
	for (i = argc + 6; i &lt; argc + envc + 6; i++)
		raw_argv[i] = raw_argv[i + 1];
	raw_argv[argc + envc + 6] = NULL;
	argv = raw_argv + 5;
	envp = raw_argv + argc + 6;

	{ /* Record parameters including argv[] and envp[]. */
		/* Get exlusive lock for serializing syslog(). */
		const int fd = open("/proc/self/exe", O_RDONLY);
		if (fd == EOF || flock(fd, LOCK_EX) == EOF)
			return 1;
		openlog(raw_argv[0], LOG_NDELAY, LOG_USER);
                syslog(LOG_INFO, "Domain = %s\n", raw_argv[1]);
                syslog(LOG_INFO, "Caller Program = %s\n", raw_argv[2]);
                syslog(LOG_INFO, "Process Status = %s\n", raw_argv[3]);
                syslog(LOG_INFO, "Requested Program = %s\n", filename);
                syslog(LOG_INFO, "argc=%d\n", argc);
                syslog(LOG_INFO, "envc=%d\n", envc);
		for (i = 0; i &lt; argc; i++) {
			int max_len = strlen(argv[i]) * 4 + 128;
			int len;
			char *buffer = calloc(max_len, 1);
			if (!buffer)
				return 1;
			len = snprintf(buffer, 100, "argv[%d] = \"", i);
			encode(buffer + len, argv[i]);
			len = strlen(buffer);
			snprintf(buffer + len, max_len - len - 1, "\"");
			syslog(LOG_INFO, "%s\n", buffer);
			free(buffer);
		}
		for (i = 0; i &lt; envc; i++) {
			int max_len = strlen(envp[i]) * 4 + 128;
			int len;
			char *buffer = calloc(max_len, 1);
			if (!buffer)
				return 1;
			len = snprintf(buffer, 100, "envp[%d] = \"", i);
			encode(buffer + len, envp[i]);
			len = strlen(buffer);
			snprintf(buffer + len, max_len - len - 1, "\"");
			syslog(LOG_INFO, "%s\n", buffer);
			free(buffer);
		}
		closelog();
		/* Release exclusive lock. */
		close(fd);
	}

	/* Execute requested program. */
	execve(filename, argv, envp);
	fprintf(stderr, "ERROR: Can't execute %s .\n", filename);
	return 1;
}
</pre></td></tr>
</table>

<h2>ステップ２： TOMOYO Linux のインストールと初期化</h2>

<p><a href="install.html.ja">TOMOYO Linux をインストール</a>してから、以下のコマンドを実行して初期設定を行ってください。</p>

<table border="1">
<tr><td>
/usr/lib/ccs/init_policy
</td></tr>
</table>

<p>その後、 TOMOYO Linux カーネルで再起動する前に以下の操作を行ってください。</p>

<p>/usr/sbin/sshd が実行された場合にはドメイン遷移が初期化されるようにするために、 /etc/ccs/exception_policy.conf に以下の内容を追加します。</p>

<table border="1">
<tr><td>
initialize_domain /usr/sbin/sshd from any
</td></tr>
</table>

<p>ＳＳＨサーバから起動されたログインシェル以降はドメイン遷移を行わないようにするために、 /etc/ccs/exception_policy.conf に以下の内容を追加します。</p>

<table border="1">
<tr><td>
keep_domain any from &lt;kernel&gt; /usr/sbin/sshd /bin/bash
</td></tr>
</table>

<p>ＳＳＨサーバから起動されたログインシェルからのプログラムの実行要求が /bin/record_cmdline に渡されるようにするために、 /etc/ccs/domain_policy.conf に以下の内容を追加します。</p>

<table border="1">
<tr><td>
&lt;kernel&gt; /usr/sbin/sshd /bin/bash<br>
task auto_execute_handler /bin/record_cmdline
</td></tr>
</table>

<h2>ステップ３：運用</h2>

<p>以上で設定は完了です。 TOMOYO Linux カーネルで再起動してください。</p>

<p>SSH ログインして、適当に操作を行ってください。コンソールからログインして、以下のコマンドを実行すると、コマンドラインが記録されていることを確認することができます。</p>

<table border="1">
<tr><td>
grep record_cmdline /var/log/messages
</td></tr>
</table>

<h2>説明</h2>

<p>TOMOYO Linux の execute_handler 機能が /usr/sbin/sshd から起動された /bin/bash からのプログラムの実行要求を横取りして、 /bin/record_cmdline に渡しています。 /bin/record_cmdline がプログラムの実行要求に渡されたパラメータを記録してから、要求されたプログラムを実行します。</p>

<h2>応用</h2>

<p>プログラム実行時のパラメータが渡されるので、その内容に基づいてプログラムの実行を許可するかどうか判断できます。</p>

<hr>

<p><a href="index.html.ja">目次へ戻る</a></p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
