<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux Install manual</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="install.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>Phase 1: Installing TOMOYO Linux kernels and tools.</h1>

<p>This page describes how to install TOMOYO Linux's kernel and userland tools.</p>

<hr>

<h2>Step 1: Installing kernel</h2>

<p>Install packages needed for compiling kernel and tools.</p>

<table border="1">
<tr><td>RedHat distributions</td><td>
[root@tomoyo ~]# yum -y install gcc ncurses-devel wget make
</td></tr>
<tr><td>Debian distributions</td><td>
[root@tomoyo ~]# apt-get -y install gcc libncurses-dev wget make
</td></tr>
</table>

<p>Install packages which should be available for compiling tools. (You can continue even if you can't install these packages.)</p>

<table border="1">
<tr><td>RedHat distributions</td><td>
[root@tomoyo ~]# yum -y install readline-devel help2man
</td></tr>
<tr><td>Debian distributions</td><td>
[root@tomoyo ~]# apt-get -y install libreadline-dev help2man
</td></tr>
</table>

<p>Download kernel's source code from <a href="http://www.kernel.org/pub/linux/kernel/v2.4/">linux-2.4</a> or <a href="http://www.kernel.org/pub/linux/kernel/v2.6/">linux-2.6</a> and extract it and goto the extracted directory.<br>
Regarding linux-2.4 , linux-2.4.30.tar.bz2 and later are supported. Regarding linux-2.6 , linux-2.6.11.12.tar.bz2 and later are supported. If you use kernel 2.6.36 , replace 2.$PATCHLEVEL.$SUBLEVEL with 2.6.36 in the below operations.</p>

<table border="1">
<tr><td>
[user@tomoyo ~]$ wget -O ccs-patch-1.8.0-20101111.tar.gz 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/49684/ccs-patch-1.8.0-20101111.tar.gz'<br>
[user@tomoyo ~]$ tar -zxf ccs-patch-1.8.0-20101111.tar.gz<br>
[user@tomoyo ~]$ patch -sp1 &lt; patches/ccs-patch-2.$PATCHLEVEL.$SUBLEVEL.diff<br>
[user@tomoyo ~]$ make -s menuconfig
</td></tr>
</table>

<p>Choose the following options in "Security options" section.</p>

<ul>
<li>[*] CCSecurity support</li>
<li>[ ]   Compile as loadable kernel module</li>
<li>[ ]   Disable by default</li>
<li>[ ]   Do not modify 'struct task_struct' in order to keep KABI</li>
<li>(2048) Default maximal count for learning mode</li>
<li>(/sbin/ccs-init) Default policy loader</li>
<li>(/sbin/ccs-start) Alternative activation trigger</li>
<li>(/sbin/modprobe /sbin/hotplug) Built-in domain initializer programs</li>
<li>(1024)&nbsp;&nbsp;Default maximal count for grant log</li>
<li>(1024)&nbsp;&nbsp;Default maximal count for reject log</li>
</ul>

<p>If you choose "Compile as loadable kernel module" option, you can minimize file size increment of vmlinux because most part of TOMOYO Linux is compiled as a loadable kernel module. You can choose this option when there is a file size limitation for vmlinux (e.g. embedded systems).</p>

<p>If you choose "Disable by default", TOMOYO Linux is enabled only when ccsecurity=on is passed to the kernel's command line options. If you don't choose this option, TOMOYO Linux is disabled only when ccsecurity=off is passed to the kernel's command line options.</p>

<p>If you choose "Do not modify 'struct task_struct' in order to keep KABI" (available for 2.6 kernels only), TOMOYO Linux will manage per "struct task_struct" variables outside "struct task_struct" in order to avoid Kernel ABI breakage due to changes in "struct task_struct". You can choose this option when you want to apply TOMOYO Linux patch against distributor's kernels without breaking Kernel ABI. But please tolerate that we can't prevent kernel build scripts from printing warning messages because we have to export "struct ccsecurity_operations" to loadable kernel modules in order to allow loadable kernel modules to call TOMOYO's functions.</p>

<p>After creating a kernel config, compile the kernel.</p>

<table border="1">
<tr><td>
[user@tomoyo ~]$ make -s dep<br>
[user@tomoyo ~]$ make -s<br>
[user@tomoyo ~]$ make -s modules<br>
[user@tomoyo ~]$ su<br>
[root@tomoyo ~]# make -s modules_install install
</td></tr>
</table>

<p>Create initrd if you need.</p>

<hr>

<h2>Step 2: Installing tools</h2>

<p>To compile tool, run the following commands.</p>

<table border="1">
<tr><td>
[user@tomoyo ~]$ wget -O ccs-tools-1.8.0-20101111.tar.gz 'http://sourceforge.jp/frs/redir.php?f=/tomoyo/49693/ccs-tools-1.8.0-20101111.tar.gz'<br>
[user@tomoyo ~]$ tar -zxf ccs-tools-1.8.0-20101111.tar.gz<br>
[user@tomoyo ~]$ cd ccstools/<br>
[user@tomoyo ~]$ sed -i -e 's/if (!strcmp(cp, "network")) {$/if (!strcmp(cp, "network")) { printf("network ");/' usr_sbin/ccs-patternize.c<br>
[user@tomoyo ~]$ make -s<br>
[user@tomoyo ~]$ su<br>
[root@tomoyo ~]# make -s install<br>
[root@tomoyo ~]# ldconfig
</td></tr>
</table>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
