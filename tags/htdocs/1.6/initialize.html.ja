<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux 導入手順書</title>
<link rel="stylesheet" href="https://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p>Info: Version <a href="../1.7/">1.7.x</a> is available.</p>
<p style="text-align:right;"><a href="initialize.html.en">English Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>第２章： TOMOYO Linux の初期化</h1>

<p>このページでは、 TOMOYO を使うために必要となる基本操作について説明します。</p>

<hr>

<h2>ステップ１：ポリシーの初期化</h2>

<p>ファイルに対するアクセス制御だけを有効にしたい場合には</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/lib/ccs/init_policy.sh --file-only-profile
</td></tr>
</table>

<p>を、全機能を有効にしたい場合には</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/lib/ccs/init_policy.sh
</td></tr>
</table>

<p>を実行することで、ポリシーを初期化してください。</p>

<p>この処理には数分かかります。</p>

<p>TOMOYO のポリシーファイルが /etc/ccs/ ディレクトリの中に作成されます。</p>

<hr>

<h2>ステップ２：ポリシーエディタの使い方を学習する</h2>

<p>/etc/ccs/ というオプションと一緒に、 TOMOYO のポリシーエディタである ccs-editpolicy を実行すると、以下のような画面が表示されます。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/ccs-editpolicy /etc/ccs/
</td></tr>
</table>

<p><img src="editpolicy-domain-list1.png" alt="editpolicy-domain-list1.png" width="720" height="400"></p>

<p>この画面には、ドメインツリーが表示されています。現時点では、 &lt;kernel&gt; ドメインだけが定義されています。しかし、システムが動作するにつれて、 TOMOYO は新しいドメインを作成してこのツリーに追加していきます。以下の画面ではたくさんのドメインが定義されています。</p>

<p><img src="editpolicy-domain-list2.png" alt="editpolicy-domain-list2.png" width="720" height="400"></p>

<p>TOMOYO における強制アクセス制御はドメインを単位として適用されます。全てのプロセスは１個のドメインに属しており、原則としてプログラムが実行される度に異なるドメインへと遷移します。ドメインの名前はプロセスの実行履歴として連結された文字列です。例えば、カーネルが属するドメインの名前は &lt;kernel&gt; 、カーネルから起動された /sbin/init が属するドメインの名前は &lt;kernel&gt; /sbin/init 、 /sbin/init から起動された /etc/rc.d/rc が属するドメインの名前は &lt;kernel&gt; /sbin/init /etc/rc.d/rc となります。この遷移規則の例外については後述します。</p>

<p>各行の２番目の数字に注目してください。</p>

<p><img src="editpolicy-domain-profile-number.png" alt="editpolicy-domain-profile-number.png" width="720" height="400"></p>

<p>この数字はプロファイル番号と呼ばれるものです。プロファイル番号は０～２５５の整数値をとります。</p>

<p>w キーを押すと、選択肢が表示されます。</p>

<p><img src="editpolicy-window-list.png" alt="editpolicy-window-list.png" width="720" height="400"></p>

<p>p キーを押すと、プロファイルの一覧が表示されます。</p>

<p>もし、 /usr/lib/ccs/init_policy.sh を実行する際に --file-only-profile というオプションを指定していた場合、以下のエントリが表示されます。</p>

<p><img src="editpolicy-profile-list-file-only.png" alt="editpolicy-profile-list-file-only.png" width="720" height="400"></p>

<p>もし、 /usr/lib/ccs/init_policy.sh を実行する際に --file-only-profile というオプションを指定しなかった場合、以下のエントリが表示されます。</p>

<p><img src="editpolicy-profile-list.png" alt="editpolicy-profile-list.png" width="720" height="400"></p>

<p>矢印キーや Home/End/PageUp/PageDown キーを使ってスクロールすることができます。</p>

<p>TOMOYO Linux では、ファイル以外にもいくつかの項目について強制アクセス制御を行うことができますが、ポリシー管理の負担を減らすために、必要の無い機能を無効化できるようになっています。</p>

<table border="1">
<tr><td>項目</td><td>内容</td><td>デフォルト値</td><td>自動学習対応</td></tr>
<tr>
<td>COMMENT</td>
<td>プロファイルの内容を説明するための１行コメント。</td>
<td></td>
<td>－</td>
</tr>
<tr>
<td>MAC_FOR_FILE</td>
<td>ファイルに対する強制アクセス制御を有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>MAC_FOR_ARGV0</td>
<td>プログラム実行時の argv[0] のチェックを有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>MAC_FOR_ENV</td>
<td>プログラム実行時の環境変数名のチェックを有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>MAC_FOR_CAPABILITY::</td>
<td>ケイパビリティに対する強制アクセス制御を有効にする。３１種類ある機能別に有効・無効を指定できる。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>MAC_FOR_NETWORK</td>
<td>ネットワークに対する強制アクセス制御を有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>MAC_FOR_SIGNAL</td>
<td>シグナルの送信に対する強制アクセス制御を有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>DENY_CONCEAL_MOUNT</td>
<td>既存のマウントを隠蔽するようなマウントを禁止する。</td>
<td>disabled</td>
<td>×</td>
</tr>
<tr>
<td>RESTRICT_CHROOT</td>
<td>chroot で移動可能なディレクトリの制限を有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>RESTRICT_MOUNT</td>
<td>mount で指定可能なパラメータの制限を有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>RESTRICT_UNMOUNT</td>
<td>指定されたディレクトリのアンマウントを禁止する。</td>
<td>disabled</td>
<td>×</td>
</tr>
<tr>
<td>RESTRICT_PIVOT_ROOT</td>
<td>pivot_root で交換可能なディレクトリの制限を有効にする。</td>
<td>disabled</td>
<td>○</td>
</tr>
<tr>
<td>RESTRICT_AUTOBIND</td>
<td>ローカルのポート番号を自動選択させる際に、特定のポート番号を選択させないようにする。</td>
<td>disabled</td>
<td>×</td>
</tr>
<tr>
<td>MAX_ACCEPT_ENTRY</td>
<td>学習モードで自動的に追加される「アクセス許可」の上限を指定する。</td>
<td>2048</td>
<td>－</td>
</tr>
<tr>
<td>MAX_GRANT_LOG</td>
<td>「ポリシーに違反しなかったアクセス要求のログ」の上限を指定する。</td>
<td>1024</td>
<td>－</td>
</tr>
<tr>
<td>MAX_REJECT_LOG</td>
<td>「ポリシーに違反したアクセス要求のログ」の上限を指定する。</td>
<td>1024</td>
<td>－</td>
</tr>
<tr>
<td>TOMOYO_VERBOSE</td>
<td>ドメイン別ポリシーに対する違反を syslog に表示する。</td>
<td>enabled</td>
<td>－</td>
</tr>
<tr>
<td>SLEEP_PERIOD</td>
<td>強制モードでポリシー違反が発生した場合に、ポリシー違反を生じさせたプロセスをスリープ状態にしておく時間を 0.1 秒単位で指定する。</td>
<td>0</td>
<td>－</td>
</tr>
</table>
<p>RESTRICT_AUTOBIND については以下の値を指定できます。</p>
<table border="1">
<tr>
<td>値</td>
<td>内容</td>
</tr>
<tr>
<td>disabled</td>
<td>無効。通常のカーネルと同様に動作する。</td>
</tr>
<tr>
<td>enabled</td>
<td>有効。</td>
</tr>
</table>
<p>MAX_ACCEPT_ENTRY および MAX_GRANT_LOG および MAX_REJECT_LOG および SLEEP_PERIOD については 0 以上の任意の整数を指定できます。</p>
<p>TOMOYO_VERBOSE については以下の値を指定できます。</p>
<table border="1">
<tr>
<td>値</td>
<td>内容</td>
</tr>
<tr>
<td>disabled</td>
<td>ドメイン別ポリシーに対する違反を表示しない。</td>
</tr>
<tr>
<td>enabled</td>
<td>ドメイン別ポリシーに対する違反を表示する。</td>
</tr>
</table>
<p>上記以外については以下の値を指定できます。</p>
<table border="1">
<tr>
<td>値</td>
<td>内容</td>
</tr>
<tr>
<td>disabled</td>
<td>無効。通常のカーネルと同様に動作する。</td>
</tr>
<tr>
<td>learning</td>
<td>学習モード。ポリシーに違反してもエラーにせず、ポリシーへの自動追加を行う。</td>
</tr>
<tr>
<td>permissive</td>
<td>確認モード。ポリシーに違反してもエラーにせず、ポリシーへの自動追加も行わない。</td>
</tr>
<tr>
<td>enforcing</td>
<td>強制モード。ポリシーに違反したらエラーとする。</td>
</tr>
</table>

<p>w キー、 e キーの順に押すことで、以下の画面が表示されます。</p>

<p><img src="editpolicy-exception-list1.png" alt="editpolicy-exception-list1.png" width="720" height="400"></p>

<p>この画面には以下の例外設定が表示されます。</p>

<table border="1">
<tr><td>
(1) パス名のパターン
</td><td>
<p>file_pattern というキーワードを使用して、パス名のパターンを登録します。アクセス許可を学習する際に、要求されたパス名が file_pattern というキーワードを使用して登録されたパス名のパターンと一致した場合、パターン化されたパス名でアクセス許可が学習されます。<br>
目安としては以下のものが挙げられます。</p>

<ul>
<li>/proc/PID/ ディレクトリ以下に存在するファイルのパス名 </li>
<li>/sys/ ディレクトリ以下に存在するファイルのパス名（カーネル 2.6 系の場合のみ）</li>
<li>/dev/ ディレクトリ以下の一部のパス名</li>
<li>/etc/ccs/ ディレクトリ以下のポリシーファイルのパス名</li>
<li>マニュアルページのパス名</li>
<li>スプールディレクトリのパス名</li>
<li>メールの送受信時に作成されるテンポラリファイルのパス名</li>
<li>man コマンドが作成するテンポラリファイルのパス名</li>
<li>mount コマンドが作成するテンポラリファイルのパス名</li>
</ul>

<p>システムにインストールされているアプリケーションやその設定により、上記以外にもパターン化されたパス名が必要になります。不足しているパターンは、実際にどのようなアクセスが行われるかを観察してから、適切にパターン化して追加します。</p>
</td></tr><tr><td>
(2) パス名のグループ
</td><td>
<p>path_group というキーワードを使用して、パス名のパターンを登録します。これは、複数のパス名を集約することでポリシーの記述量を減らすためのマクロです。使い方は後述します。</p>
</td></tr><tr><td>
(3) アドレスのグループ
</td><td>
<p>address_group というキーワードを使用して、 IPv4 または IPv6 アドレスのパターンを登録します。これは、複数の IP アドレスを集約することでポリシーの記述量を減らすためのマクロです。使い方は後述します。</p>
</td></tr><tr><td>
(4) 無条件に読み込みを許可するファイル
</td><td>
<p>allow_read というキーワードを使用して、全てのプログラムへの読み込みアクセスを許可するファイルのパス名を登録します。パターンも使用できます。読み込みモードで要求されたパス名が allow_read というキーワードを使用して登録されたパス名と一致した場合、ドメインポリシーで明示的に許可が与えられていなかった場合でも読み込みアクセスが許可されます。<br>
目安としては以下のものが挙げられます。</p>

<ul>
<li>ldconfig に登録されている共有ライブラリ</li>
<li>/proc/ ディレクトリ以下に存在するファイルの一部</li>
<li>/usr/share/locale/ ディレクトリ以下に存在するロケールデータの一部</li>
</ul>

<p>システムにインストールされているアプリケーションやその設定により、上記以外にも常に読み込みアクセスを許可したいファイルがあるかもしれません。不足しているファイルは、実際にどのようなファイルを読み込むかを観察してから、必要に応じてその都度追加していきます。</p>

</td></tr><tr><td>
(5) 無条件に受け取ってよい環境変数名
</td><td>
<p>allow_env というキーワードを使用して、全てのプログラムが受け取ってよい環境変数の名前を登録します。パターンも使用できます。プログラムの実行時に渡された環境変数の名前が allow_env というキーワードを使用して登録された名前と一致した場合、ドメインポリシーで明示的に許可が与えられていなかった場合でも受け取りが許可されます。<br>
目安としては以下のものが挙げられます。</p>

<ul>
<li>PATH や HOME のように、どのようなプログラムに渡されても構わないような環境変数名</li>
</ul>

<p>システムにインストールされているアプリケーションやその設定により、上記以外にも常に許可したい環境変数名があるかもしれません。不足している環境変数名は、実際にどのような環境変数名が使われているかを観察してから、必要に応じてその都度追加していきます。</p>

</td></tr><tr><td>
(6) 書き換えを禁止するファイル
</td><td>
<p>deny_rewrite というキーワードを使用して、既に記録されている部分の書き換えを禁止したいファイル（ログファイル等）のパス名を登録します。パターンが使用できます。 deny_rewrite というキーワードを使用して登録されたファイルは、後述するドメインポリシーの中で明示的に allow_rewrite というキーワードを用いて許可が与えられない限り、追記ではない書き込みモードでのオープンとファイルの切り詰めが禁止されます。<br>
目安としては以下のものが挙げられます。</p>

<ul>
<li>/var/log/ ディレクトリ以下のファイル</li>
</ul>

<p>システムにインストールされているアプリケーションやその設定により、上記以外にも書き換えを禁止したいファイルがあるかもしれません。不足しているファイルは、実際にどのようなファイルが追記専用で使われているかを観察してから、必要に応じてその都度追加していきます。</p>

</td></tr><tr><td>
(7) シンボリックリンクの名前で実行するプログラム
</td><td>
<p>TOMOYO Linux は、原則としてシンボリックリンクを解決したパス名で実行許可のチェックを行いますが、実行時の名前によって異なる振る舞いをするプログラムがシンボリックリンク経由で実行される場合に対処するために、シンボリックリンクの名前でドメインを遷移できるようにすることができます。<br>
シンボリックリンクの名前でドメインを遷移できるようにするには、 alias というキーワードを使用してシンボリックリンクを解決したパス名とシンボリックリンクを解決する前のパス名を指定します。パターンは使用できません。<br>
例えば /sbin/pidof は /sbin/killall5 へのシンボリックリンクであるため、通常は /sbin/pidof を実行すると /sbin/killall5 が実行されたものとしてドメインが定義されます。しかし、 alias /sbin/killall5 /sbin/pidof という指定をすることで、 /sbin/pidof を実行すると /sbin/pidof が実行されたものとしてドメインが定義されるようにできます。</p>
</td></tr><tr><td>
(8) プログラム名の集約
</td><td>
<p>複数のプログラムを単一のプログラム名で扱うには、 aggregator というキーワードに続けて集約前のプログラム名と集約後のプログラム名を指定します。集約前のプログラム名にはパターンを使用できます。<br>
例えば、 /usr/bin/tac と /bin/cat は似ているので、 aggregator /usr/bin/tac /bin/cat という指定をすることで /usr/bin/tac を /bin/cat のドメインで実行することができるようになります。</p>
</td></tr><tr><td>
(9) ドメイン遷移を初期化するプログラム
</td><td>
<p>initialize_domain というキーワードを使用して、ドメイン遷移履歴をリセットするプログラムのパス名を登録します。パターンは使用できません。 initialize_domain というキーワードを使用して登録されたパス名のプログラムが実行された場合、そのプログラムは &lt;kernel&gt; 直下のドメインで動作します。<br>
目安としては以下のものが挙げられます。</p>

<ul>
<li>/etc/init.d/ ディレクトリ以下にあるデーモンプログラム等を起動・終了させるためのスクリプト</li>
<li>上記スクリプトから起動されるデーモンプログラムの内、ドメイン名を短くしたいもの（httpd や sshd など）</li>
</ul>

<p>システムにインストールされているアプリケーションやその設定により、上記以外にもドメイン遷移履歴をリセットさせたいプログラムがあるかもしれません。最初にドメイン遷移履歴を作成して、実際にどのようなプログラムを指定したらよいかを考慮しながら、必要に応じてその都度追加していきます。その際、他のドメインへの影響に注意してください。例えば、ドメインポリシーとして</p>

<table border="1">
<tr><td>
&lt;kernel&gt; ... /bin/bash<br>
use_profile 3<br>
allow_execute /bin/tcsh<br>
<br>
&lt;kernel&gt; ... /bin/bash /bin/tcsh<br>
use_profile 3<br>
allow_execute /bin/cat<br>
<br>
&lt;kernel&gt; ... /bin/bash /bin/tcsh /bin/cat<br>
use_profile 3<br>
allow_read /etc/fstab
</td></tr>
</table>

<p>というポリシーが既に存在している状態で /bin/tcsh を initialize_domain として追加した場合、 /bin/tcsh は &lt;kernel&gt; /bin/tcsh というドメインへ遷移することになるため、 &lt;kernel&gt; ・・・ /bin/bash /bin/tcsh というドメインへは遷移できなくなってしまいます。そのような場合は、以下のように、 &lt;kernel&gt; ・・・ /bin/bash /bin/tcsh で始まる部分を &lt;kernel&gt; /bin/tcsh で始まるようにドメインポリシーを変更してやる必要があります。</p>

<table border="1">
<tr><td>
&lt;kernel&gt; ... /bin/bash<br>
use_profile 3<br>
allow_execute /bin/tcsh<br>
<br>
&lt;kernel&gt; /bin/tcsh<br>
use_profile 3<br>
allow_execute /bin/cat<br>
<br>
&lt;kernel&gt; /bin/tcsh /bin/cat<br>
use_profile 3<br>
allow_read /etc/fstab
</td></tr>
</table>
</td></tr><tr><td>
(10) ドメイン遷移を初期化させないプログラム
</td><td>
<p>no_initialize_domain というキーワードを使うことで、 initialize_domain キーワードの効果を打ち消すことができます。特定の条件下ではドメイン遷移を初期化させたくない場合に使用します。</p>
</td></tr><tr><td>
(11) ドメイン遷移を行わないドメイン
</td><td>
<p>keep_domain というキーワードを使用して、ドメイン遷移を行わないドメインを指定することができます。<br>
例えば、 keep_domain &lt;kernel&gt; /usr/sbin/sshd /bin/tcsh という行が含まれている場合、 &lt;kernel&gt; /usr/sbin/sshd /bin/tcsh というドメインに属しているプロセスは、 initialize_domain というキーワードで指定されたプログラムが実行されない限り、そのドメインに留まります。</p>
</td></tr><tr><td>
(12) ドメイン遷移を行うドメイン
</td><td>
<p>no_keep_domain というキーワードを使うことで、 keep_domain キーワードの効果を打ち消すことができます。特定の条件下でドメイン遷移を行わせたい場合に使用します。</p>
</td></tr>
</table>

<p>q キーを押してポリシーエディタを終了してください。</p>

<p>以後、必要に応じてポリシーエディタのチュートリアルページである<a href="tool-editpolicy.html.ja">ポリシーエディタの使い方</a>を参照してください。</p>

<hr>

<h2><a name="configure_audit_daemon">ステップ３：アクセスログ取得の設定（省略可）</a></h2>

<p>TOMOYO Linux は、「アクセス許可ログ」（ポリシーに違反しなかったアクセス要求のログ）と「アクセス拒否ログ」（ポリシーに違反したアクセス要求のログ）を記録することができます。<br>
アクセスログはドメインポリシーの形式と同じであり、そのままドメインポリシーへと追加することができます。「アクセス拒否ログ」に記録された要求の中で、許可すべきものと判断したものをドメインポリシーに追加してください。</p>

<p>アクセス許可ログ /proc/ccs/grant_log とアクセス拒否ログ /proc/ccs/reject_log をカーネルから読み出してファイルに保存する為に、 ccs-auditd というデーモンプログラムを利用できます。以下のコマンドを /etc/rc.local 等から実行するようにしてください。</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-auditd アクセス許可ログの保存場所 アクセス拒否ログの保存場所
</td></tr>
</table>

<p>アクセス許可ログを保存する必要が無い場合は、プロファイルで MAX_GRANT_LOG=0 という指定をして、アクセス許可ログの保存場所として /dev/null を指定することができます。 ccs-auditd にはフィルタリング機能がありませんので、アクセス許可ログを保存する場合はディスク容量に注意してください。</p>

<p>アクセス拒否ログを保存する必要が無い場合は、プロファイルで MAX_REJECT_LOG=0 という指定をして、アクセス拒否ログの保存場所として /dev/null を指定することができます。アクセス拒否ログは保存しておくことを推奨します。この手順書では、アクセス拒否ログを /var/log/tomoyo/reject_log.conf に保存するものとします。</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-auditd /dev/null /var/log/tomoyo/reject_log.conf
</td></tr>
</table>

<p>アクセスログを保存するディレクトリは予め作成しておいてください。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# mkdir -p /var/log/tomoyo
</td></tr>
</table>

<p>logrotate によるローテーションを行わせたい場合は、以下のような内容のファイルを /etc/logrotate.d/tomoyo に作成してください。なお、 nocreate オプションを必ず指定してください。 nocreate オプションを忘れると、最初のローテーションが実行されて以降のログが保存されなくなってしまいます。</p>

<table border="1">
<tr><td>
/var/log/tomoyo/reject_log.conf {<br>
&nbsp;&nbsp;weekly<br>
&nbsp;&nbsp;rotate 9<br>
&nbsp;&nbsp;missingok<br>
&nbsp;&nbsp;notifempty<br>
&nbsp;&nbsp;nocreate<br>
}
</td></tr>
</table>

<p>アクセス許可ログ・アクセス拒否ログのどちらも保存しない場合には ccs-auditd を実行する必要はありません。また、プロファイルで MAX_GRANT_LOG=0 および MAX_REJECT_LOG=0 を指定しておくことで、消費メモリの節約と応答速度の向上が期待できます。</p>

<hr>

<h2><a name="configure_notify_daemon">ステップ４：ポリシー違反の発生をメールで通知するよう設定（省略可）</a></h2>

<p>TOMOYO Linux では、メールなどの通知手段を予め設定しておくことにより、強制モードにおけるポリシー違反の発生を報告することができます。</p>

<p>通知のために cron デーモンを使うことができます。例えば、１時間に１回まで root@example.com 宛のメールで通知するには</p>

<table border="1">
<tr><td>
00 * * * * root /usr/lib/ccs/misc/ccs-notifyd 0 'mail root@example.com'
</td></tr>
</table>

<p>という行を /etc/crontab に追加してください。</p>

<hr>

<h2>ステップ５：システムの再起動</h2>

<p>システムを再起動して、起動時に TOMOYO Linux 対応カーネルを選択してください。</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# reboot
</td></tr>
</table>

<hr>

<p><a href="index.html.ja">目次へ戻る</a></p>
<p><a href="https://osdn.jp/"><img src="https://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
