[PATCH] TOMOYO 2.4 backport patch for Linux 2.6.33

Apply this patch after overwriting security/tomoyo/ directory by doing

 $ wget -O linux-3.1-rc6.tar.gz https://github.com/torvalds/linux/tarball/v3.1-rc6
 $ tar -zxf linux-3.1-rc6.tar.gz --strip 1 torvalds-linux-8ff0291/security/tomoyo/

.

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/common.h        |    4 -
 security/tomoyo/realpath.c      |   87 ++++++++++++++++++++++++++++++----------
 security/tomoyo/securityfs_if.c |    1 
 security/tomoyo/tomoyo.c        |    3 -
 4 files changed, 70 insertions(+), 25 deletions(-)

--- linux-2.6.33.18.orig/security/tomoyo/common.h
+++ linux-2.6.33.18/security/tomoyo/common.h
@@ -1158,7 +1158,7 @@ static inline int tomoyo_round2(size_t s
  */
 #define list_for_each_cookie(pos, head)					\
 	if (!pos)							\
-		pos =  srcu_dereference((head)->next, &tomoyo_ss);	\
-	for ( ; pos != (head); pos = srcu_dereference(pos->next, &tomoyo_ss))
+		pos =  rcu_dereference((head)->next);	\
+	for ( ; pos != (head); pos = rcu_dereference(pos->next))
 
 #endif /* !defined(_SECURITY_TOMOYO_COMMON_H) */
--- linux-2.6.33.18.orig/security/tomoyo/realpath.c
+++ linux-2.6.33.18/security/tomoyo/realpath.c
@@ -76,25 +76,55 @@ char *tomoyo_encode(const char *str)
  *
  * Returns the buffer on success, an error code otherwise.
  *
+ * Caller holds the dcache_lock and vfsmount_lock.
+ * Based on __d_path() in fs/dcache.c
+ *
  * If dentry is a directory, trailing '/' is appended.
  */
 static char *tomoyo_get_absolute_path(struct path *path, char * const buffer,
 				      const int buflen)
 {
-	char *pos = ERR_PTR(-ENOMEM);
-	if (buflen >= 256) {
-		struct path ns_root = { };
-		/* go to whatever namespace root we are under */
-		pos = __d_path(path, &ns_root, buffer, buflen - 1);
-		if (!IS_ERR(pos) && *pos == '/' && pos[1]) {
-			struct inode *inode = path->dentry->d_inode;
-			if (inode && S_ISDIR(inode->i_mode)) {
-				buffer[buflen - 2] = '/';
-				buffer[buflen - 1] = '\0';
-			}
+	char *pos = buffer + buflen - 1;
+	struct dentry *dentry = path->dentry;
+	struct vfsmount *vfsmnt = path->mnt;
+	const char *name;
+	int len;
+
+	if (buflen < 256)
+		goto out;
+
+	*pos = '\0';
+	if (dentry->d_inode && S_ISDIR(dentry->d_inode->i_mode))
+		*--pos = '/';
+	for (;;) {
+		struct dentry *parent;
+		if (dentry == vfsmnt->mnt_root || IS_ROOT(dentry)) {
+			if (vfsmnt->mnt_parent == vfsmnt)
+				break;
+			dentry = vfsmnt->mnt_mountpoint;
+			vfsmnt = vfsmnt->mnt_parent;
+			continue;
 		}
+		parent = dentry->d_parent;
+		name = dentry->d_name.name;
+		len = dentry->d_name.len;
+		pos -= len;
+		if (pos <= buffer)
+			goto out;
+		memmove(pos, name, len);
+		*--pos = '/';
+		dentry = parent;
 	}
+	if (*pos == '/')
+		pos++;
+	len = dentry->d_name.len;
+	pos -= len;
+	if (pos < buffer)
+		goto out;
+	memmove(pos, dentry->d_name.name, len);
 	return pos;
+out:
+	return ERR_PTR(-ENOMEM);
 }
 
 /**
@@ -111,17 +141,27 @@ static char *tomoyo_get_absolute_path(st
 static char *tomoyo_get_dentry_path(struct dentry *dentry, char * const buffer,
 				    const int buflen)
 {
-	char *pos = ERR_PTR(-ENOMEM);
-	if (buflen >= 256) {
-		pos = dentry_path_raw(dentry, buffer, buflen - 1);
-		if (!IS_ERR(pos) && *pos == '/' && pos[1]) {
-			struct inode *inode = dentry->d_inode;
-			if (inode && S_ISDIR(inode->i_mode)) {
-				buffer[buflen - 2] = '/';
-				buffer[buflen - 1] = '\0';
-			}
+	char *pos = buffer + buflen - 1;
+	if (buflen < 256)
+		return ERR_PTR(-ENOMEM);
+	*pos = '\0';
+	if (dentry->d_inode && S_ISDIR(dentry->d_inode->i_mode))
+		*--pos = '/';
+	spin_lock(&dcache_lock);
+	while (!IS_ROOT(dentry)) {
+		struct dentry *parent = dentry->d_parent;
+		const char *name = dentry->d_name.name;
+		const int len = dentry->d_name.len;
+		pos -= len;
+		if (pos <= buffer) {
+			pos = ERR_PTR(-ENOMEM);
+			break;
 		}
+		memmove(pos, name, len);
+		*--pos = '/';
+		dentry = parent;
 	}
+	spin_unlock(&dcache_lock);
 	return pos;
 }
 
@@ -276,8 +316,13 @@ char *tomoyo_realpath_from_path(struct p
 			pos = tomoyo_get_local_path(path->dentry, buf,
 						    buf_len - 1);
 		/* Get absolute name for the rest. */
-		else
+		else {
+			spin_lock(&dcache_lock);
+			spin_lock(&vfsmount_lock);
 			pos = tomoyo_get_absolute_path(path, buf, buf_len - 1);
+			spin_unlock(&vfsmount_lock);
+			spin_unlock(&dcache_lock);
+		}
 encode:
 		if (IS_ERR(pos))
 			continue;
--- linux-2.6.33.18.orig/security/tomoyo/securityfs_if.c
+++ linux-2.6.33.18/security/tomoyo/securityfs_if.c
@@ -93,7 +93,6 @@ static const struct file_operations tomo
 	.poll    = tomoyo_poll,
 	.read    = tomoyo_read,
 	.write   = tomoyo_write,
-	.llseek  = noop_llseek,
 };
 
 /**
--- linux-2.6.33.18.orig/security/tomoyo/tomoyo.c
+++ linux-2.6.33.18/security/tomoyo/tomoyo.c
@@ -157,7 +157,8 @@ static int tomoyo_inode_getattr(struct v
  *
  * Returns 0 on success, negative value otherwise.
  */
-static int tomoyo_path_truncate(struct path *path)
+static int tomoyo_path_truncate(struct path *path, loff_t length,
+				unsigned int time_attrs)
 {
 	return tomoyo_path_perm(TOMOYO_TYPE_TRUNCATE, path, NULL);
 }
