<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux の世界　第１２回：「【最終回】」</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<!--
<p style="text-align:right;"><a href="tutorial-12.html.en">English Page</a></p>
-->
<p style="text-align:right;">Last modified: $Date$</p>

<h1>TOMOYO Linux の世界<br>第１２回：「【最終回】」</h1>

<h2>今回の内容</h2>

<p>今回は読み物です．</p>

<h2>パス名に基づくアクセス制御の注意点</h2>

<p>TOMOYO Linux はパス名に基づきアクセスを制御します．ポリシーファイルの中でもパス名を用いて記述しますから，パス名の正しさが保たれていなければ，期待された効果をあげられません．ファイルシステムが意図したとおりにマウントされていることも不可欠です．</p>

<p>今回例として紹介する操作はファイルシステムに関する操作であるため，一歩間違えるとファイルにアクセスできなくなったりシステムが動作しなくなったりする危険があります．記事を読みながら実際に動作を確認される際にはご注意ください．万一起動できなくなってしまった場合には，本記事末尾のレスキュー手順を参照してください．</p>

<h3>パス名は便利だけど曖昧</h3>

<p>ユーザにはそれぞれホームディレクトリという領域が割り当てられており，そこに個人が管理するデータを保存しています．そのため，たとえば mount -t tmpfs none /home/ というマウントが行われてしまうと，一般ユーザのホームディレクトリが見えなくなってしまいます（図１）．</p>

<table border="1" summary="fig">
<tr><td>
■図１　一般ユーザのホームディレクトリが見えない
<pre>
# ls -l /home/
total 8
drwx------3 user1 user1 4096 Feb 21 10:16 user1
drwx------3 user2 user2 4096 Feb 21 10:17 user2
# mount -t tmpfs none /home/
# ls -l /home/
total 0
# umount /home/
# ls -l /home/
total 8
drwx------3 user1 user1 4096 Feb 21 10:16 user1
drwx------3 user2 user2 4096 Feb 21 10:17 user2
</pre>
</td></tr>
</table>

<p>また， Linux では，あるディレクトリの内容を別のディレクトリからも見えるようにする bind mount という機能（ハードリンク機能のディレクトリ版に相当）を備えているので， mount --bind / /var/www/html/ というマウントが行われてしまうと，Ｗｅｂサーバを通じて / ディレクトリ以下の全内容が丸見えになってしまいます（図２）．</p>

<table border="1" summary="fig">
<tr><td>
■図２　Ｗｅｂサーバを通じて / ディレクトリ以下が丸見えに
<pre>
# ls /var/www/html/
en index.html.en index.html.ja index.var ja tomoyo-links.html tomoyo.css
# mount --bind / /var/www/html/
# ls /var/www/html/
bin boot dev etc home initrd lib lost+found media misc mnt opt proc root sbin selinux srv sys tmp usr var
# umount /var/www/html/
# ls /var/www/html/
en index.html.en index.html.ja index.var ja tomoyo-links.html tomoyo.css
</pre>
</td></tr>
</table>

<p>これまでの例で，パス名というものはマウントの内容１つでがらりと変わってしまうということをご理解いただけたと思います．もちろん，このような異常なマウントは正規の管理者であれば行わないはずですが，管理者権限で動作しているプロセスの欠陥を攻撃して侵入してきたクラッカーが行わないとは限りません． TOMOYO Linux ではそうした脅威を防ぐための機能を備えています．</p>

<h3>曖昧さを減らすために</h3>

<p>TOMOYO Linux では， allow_mount というキーワードを用いて，マウント可能なデバイスファイルとマウントポイントの組み合わせを制限できます．これにより，システム管理者が許可したいマウントだけを許可できるようになります．</p>

<h3>それだけで充分？</h3>

<p>allow_mount キーワードでマウントを制限するだけで充分なのでしょうか？次のようなケースを考えてみましょう．</p>

<p>まず，マウントポイントとして /mnt/dir/ を作成します．次に， /mnt/dir/ の上に tmpfs をマウントし， /mnt/dir/file という名前のファイルを作成します（図３）．</p>

<table border="1" summary="fig">
<tr><td>
■図３　/mnt/dir/ に tmpfs をマウントし， /mnt/dir/file を作成
<pre>
# mkdir -p /mnt/dir
# mount -t tmpfs none /mnt/dir/
# touch /mnt/dir/file
# ls /mnt/dir/file
/mnt/dir/file
</pre>
</td></tr>
</table>

<p>この状態で，再度 /mnt/dir/ の上に tmpfs をマウントすると， /mnt/dir/file が見えなくなってしまいました（図４）．</p>

<table border="1" summary="fig">
<tr><td>
■図４　再度 tmpfs をマウントすると， /mnt/dir/file が見えない
<pre>
# mount -t tmpfs none /mnt/dir/
# ls /mnt/dir/file
ls: /mnt/dir/file: No such file or directory
# umount /mnt/dir/
# ls /mnt/dir/file
/mnt/dir/file
# umount /mnt/dir/
</pre>
</td></tr>
</table>

<p>アンマウントすれば元に戻るわけですが，前述した allow_mount キーワードによるマウント制限だけでは，マウント可能なデバイスファイルとマウントポイントの組み合わせを制限できても，許可されている組み合わせで複数回マウントすることは防げないことがわかります．</p>

<p>でも，ちょっと待ってください．普通は，マウントは / ディレクトリに近い順に行いますよね．たとえば， /usr/ と /usr/local/ が別パーティションになっている場合， /usr/ → /usr/local/ の順にマウントするでしょう． /usr/local/ → /usr/ の順番にしてしまうと /usr/local/ の内容が見えなくなってしまい，システムの動作に支障が発生するので，そのような順番にはしません．つまり，既存のマウントを隠蔽するようなマウントは禁止してしまっても大丈夫ということです．</p>

<p>TOMOYO Linux では，既存のマウントを隠蔽するようなマウントを行う場合， conceal_mount という（ TOMOYO Linux 独自の）ケイパビリティがチェックされます（図５）．</p>

<table border="1" summary="fig">
<tr><td>
■図５　既存のマウントを隠蔽するようなマウントを行うためのアクセス許可
<pre>
allow_capability conceal_mount
</pre>
</td></tr>
</table>

<h3>アンマウントは？</h3>

<p>マウントを制限するだけでは，まだ不十分です．たとえば， /proc/ ディレクトリにマウントされている proc ファイルシステムがアンマウントされてしまうと，多くのプログラムが正常に動作できなくなってしまう可能性があります．</p>

<p>TOMOYO Linux では， allow_unmount というキーワードを用いて，アンマウント可能なマウントポイントを制限できます．</p>

<p>以上でマウントおよびアンマウントの制御の説明を終わります．</p>

<h3>chroot は？</h3>

<p>Linux では， chroot という，ルートディレクトリを変更する機能を備えています．アプリケーションが chroot を用いて /tmp/ のように書き込み可能なディレクトリへルートディレクトリを変更できてしまうと，悪意あるプログラム一式を展開して実行されてしまう危険性があります．</p>

<p>TOMOYO Linux は chroot 前のルートディレクトリから見たパス名を記憶しており， chroot する前のパス名でアクセス制御をするため，どこに chroot しても問題ありませんが， allow_chroot というキーワードを用いて移動可能なディレクトリを制限できます．</p>

<h3>デバイスファイルの作成は？</h3>

<p>Linux では，マウントするときもデバイス名を使います（ LABEL= や UUID= という指定方法も使えますが，ここでは侵入者が前述したマウント制限の突破を試みる場合を想定します）．たとえば，ＳＣＳＩ接続された最初のＨＤＤの最初のパーティションをマウントするときには mount -dev=0801 /mnt/ のようにデバイスの属性ではなく， mount /dev/sda1 /mnt/ のようにデバイス名を使います．これが正しく動作するためには，デバイスファイルが指すデバイスが，管理者が期待したとおりの属性を持っていることが不可欠です．いくらマウントできるデバイス名とマウントポイントの組み合わせを制限しても，デバイスファイルが改竄されていたら何の役にも立ちません． root 権限があれば，ファイルを削除して同名のファイルを作り直すことで改竄できてしまいます．</p>

<p>パス名が指すデバイスが期待していたものとは違っていたら何が起こるでしょう？たとえば， /dev/null が通常ファイルになっていたら……．消えたはずだと思っていた情報が蓄積されていき，情報漏洩や誤動作の原因になる場合もあります．たとえば， /dev/sda1 が /dev/sda2 の属性を持っていたら・・・． /home/ ディレクトリにマウントされるべき内容が /var/ ディレクトリにマウントされてしまい，ユーザがログインできなくなってしまったという事態も起こり得ます．そのような不安を解消するために， TOMOYO Linux では allow_unlink （ファイルの削除を許可）や allow_mkblock （ブロック型デバイスファイルの作成を許可）のように書き込み権限を細分化することでリスクを減らしています．</p>

<h2>レスキュー手順</h2>

<p>もし， TOMOYO Linux のアクセス制御が原因でシステムが起動できなくなった場合には，カーネル起動時のコマンドラインに ccsecurity=off というパラメータを追加することにより， TOMOYO Linux のアクセス制御を無効化して起動することができます．</p>

<h2>TOMOYO プロジェクト便り</h2>

<p>２００６年１２月に CE Linux Forum のイベント，「 Japan Technical Jamboree12 」で，組込み Linux フォーラムの関係の方々に TOMOYO Linux をご紹介させていただきました．そのときの説明資料と様子は，<a href="http://tree.celinuxforum.org/CelfPubWiki/JapanTechnicalJamboree12"> Wiki ページ</a>で参照することができます．</p>

<p>Linux はデジタルテレビや携帯電話など組込み機器の分野でも急速に利用が広まっています．ハードディスクレコーダーが掲示板への書き込みの踏み台にされたり，携帯電話を対象にしたウィルスが問題になるなど，セキュリティに対する関心は，むしろ通常のサーバ用途以上に高まっています．</p>

<p>イベントでは多数の貴重なご意見をいただきましたが，その中に「ぜひ TOMOYO Linux をメインラインに含めることを目指してほしい」という声がありました．このイベントの関係の方々から，２００７年４月に米サンノゼで開催される組込み Linux の国際会議，「<a href="http://www.celinux.org/elc2007/"> CELF Embedded Linux Conference </a>」をご紹介いただき，投稿したところプレゼンテーションとチュートリアルを行えることになりました． TOMOYO Linux としての世界デビューとなります．</p>

<p>また、２００７年２月に YLUG のイベント，「第 72 回カーネル読書会」でも TOMOYO Linux をご紹介させていただきました．そのイベントでもメインラインへ向けて頑張るよう激励され，このイベントの参加者の方々から２００７年６月にカナダのオタワで開催される Linux の国際会議「<a href="http://www.linuxsymposium.org/2007/"> Linux Symposium 2007 </a>」をご紹介いただき，投稿したところ BoF セッションを行えることになりました．</p>

<p>今年はメインストリームを目標に一気に活動が広がるかもしれません． TOMOYO プロジェクトでは，社外からも開発者やテスターなどを募集しています．みんなの力で盛り上げていきたいと思います．</p>

<p>このコラムは２００７年３月２８日に執筆していますが，読者の皆さんがこの号を手にとられるときには CELF の発表が終了しているはずです．今後連載の中で組込み向けの機能や会議の様子についてご紹介していきたいと思います．</p>

<h2>今回の内容</h2>

<p>今回は４月に発表を行った ELC2007 の様子を紹介します．リリースの詳細については，<a href="http://sourceforge.jp/projects/tomoyo/news/">プロジェクトのニュース</a>や<a href="http://lists.sourceforge.jp/mailman/archives/tomoyo-users/">メーリングリストのアーカイブ</a>にてご確認ください．</p>

<h2>ELC2007 レポート</h2>

<h3>ELC2007 について</h3>

<p>４月１７～１９日までサンノゼで開催された CE Linux Forum Worldwide Embedded Linux Conference 2007 に参加し， TOMOYO Linux のプレゼンテーションとチュートリアルを行ってきました．</p>

<ul>
<li><a href="http://www.celinux.org/elc2007/">イベントＷｅｂページ</a></li>
<li><a href="http://tree.celinuxforum.org/CelfPubWiki/ELC2007Presentations">プレゼンテーション資料</a></li>
<li><a href="http://tree.celinuxforum.org/CelfPubWiki/JapanTechnicalJamboree12">CELinux Forum Japan Technical Jamboree12</a></li>
</ul>

<p>CE Linux の CE は Consumer Electronics の略です．本会議については，２００６年１２月８日に Japan Technical Jamboree12 で TOMOYO Linux について紹介させていただいた際に，「ぜひ国内だけでなく海外のイベントでも発表してみては」とお勧めいただいたことが応募のきっかけとなり実現しました．</p>

<h3>会議の模様</h3>

<p>会議は，３つの部屋でプログラムが同時進行するという形式で行われ，参加者は興味のあるセッションを自由に選択します．参加者名簿がないので正確な人数はわかりませんが，会場の規模から判断して少なくとも 200 名以上が参加していたと思います．</p>

<p>発表の内容はハードウェアからソフトウェアまで多岐にわたり，組込み Linux の領域の広さをあらためて感じました．キーノートセッションは， Thomas Gleixner 氏によるしゃれっ気に満ちた Embedded Linux - An Increasing Nightmare? （「組込み Linux は増殖する悪夢か？」）と， LinuxDevice Drivers の著者で有名な Jonathan Corbet 氏による The State of the Linux Kernel （「 Linux カーネルの状態」）の２本で（資料はいずれも上記のプレゼンテーション資料のリンクより参照，ダウンロードできます）， BOF も含めると 56 ものセッションがありました．</p>

<p>セキュリティに関するものは残念ながらあまり多くはなく，日立ソフトウェアエンジニアリング（株）中村雄一氏の Comparison of Secure OSes and Embedded SELinux Activity in Japan と， TOMOYO Linux のプレゼンテーション TOMOYOLinux - A Lightweight and Manageable Security System for PC and Embedded Linux ，およびチュートリアル TOMOYO Linux - Tutorial の３本でした．</p>

<p>プログラムでは予定されていなかったのですが，「日本セキュアＯＳ連合チーム」はデモにも参加しました．</p>

<p>TOMOYO Linux 関連のセッションについての反響ですが，残念ながら参加者はあまり多くありませんでした．ただ， Jonathan Corbet 氏が足を運んでくれて，発表を聞いてもらうことができ，「（ TOMOYO Linux と同じくパス名ベースのアクセス制御を行っている） AppArmor のチームと話をしてみると良い」「できるだけ早く Linux カーネルに対するパッチを投稿してみるべきだ」などのコメントをいただくことができました．これらのアドバイスについては，帰国後さっそく対応を行っています．</p>

<p>余談ですが，氏は大変長身で，話をすると見上げるような形になります．発言は静かですが深みがあり，「達人」という言葉を連想しました．</p>

<h3>サンノゼ，会場の様子</h3>

<p>サンノゼを訪れたのは今回が初めてでしたが，とにかくお店が少なく，人が歩いていないところという印象でした．宿泊したホテルから会場まで徒歩約３０分の距離を毎日往復しましたが，基本的に他の人とすれ違うことはありません（歩いている人はほとんどいないのです）．空はまさに「カリフォルニアの青い空！」という感じで，ＣＧで描いたような色をしています．</p>

<p>会場は会議用の施設で，無線ＬＡＮの設備が提供されていましたが，セキュリティはかかっておらず（笑），誰でも自由につなげられます．２日目の夜にはレセプションがあり，チャーターバスで何故か博物館に連れて行かれ，そこで立食パーティが開催されました．</p>

<h3>ゲーム</h3>

<p>最終日，すべてのセッションが終了後， ELC 恒例（？）のゲームが始まるというので呼び出されました．</p>

<p>ゲームの内容は，人物，契約などテーマ毎に分類されたクイズを参加者の出身地区３つを代表するメンバー３人が回答するというもので，どうやらアメリカの有名なクイズ番組のパロディのようです．</p>

<p>問題はテーマごとに難易度の異なるものが配置されていて，当然ながら難しいものほど得点が高くなっています．司会は， CE Linux Forum の Wiki の管理者でもある Tim Bird 氏が行いましたが，設問が茶目っ気たっぷりで大変楽しいものでした．たとえば，「人物」では Linus 氏のアップの写真が投影されて，「これは誰でしょう？」という感じです．</p>

<h3>そして OLS へ！</h3>

<p>ELC2007 への参加はもちろん，世界の組込み Linux の関係者に対して TOMOYO Linux を知ってもらうことが目的でしたが，それは同時にメインライン化（ Linux カーネル本体への取り込み）提案を行うための最初のステップでもありました．</p>

<p>本誌が店頭に並ぶのは６月１８日ですが，６月２７～２９日までオタワで開催される Ottawa Linux Symposium （通称 OLS ）では， TOMOYO Linux の BOF セッションを持ちます．国産セキュアＯＳである TOMOYO Linux の開発を通じて得られたものを Linux の世界とコミュニティにフィードバックすることができればと願っています．</p>

<h2>まとめ</h2>

<p>セキュアＯＳというと「なんだか難しそう」「特殊な技術」「使えない」というイメージがありますが， TOMOYO Linux に関しては決してそんなことがないことをご理解いただけたのではないかと思います．セキュアＯＳは，バッファオーバーフローによる侵入を防ぐための保険としてだけではなく，抜け道を心配しながらのアプリケーションレベルでの複雑な設定をも一掃してくれる，便利な機能を備えています．この連載が，セキュアＯＳによるセキュリティ強化推進の役に立つことを願っています．ぜひ連載の原稿を手元に置きながら， TOMOYO Linux を皆さまのサーバのセキュリティ強化にご活用ください．</p>

<h2>本連載のまとめ</h2>

<p>２００７年１月号から始まった本連載は，１２回目となる今回で終了することとなりました．連載に先立ち特集を掲載いただいた『ネットワークセキュリティ Expert 5』（技術評論社）ともども， TOMOYO Linux としては初の活字メディアであり，執筆者としても思い入れの深いものとなりました．執筆にあたっては，リファレンス的な使い方を意識し，Ｗｅｂの情報を補完するものとして活用いただくことを心がけました．行き届かない面も多々あったと思いますが，皆さんのおかげで１年の連載を無事完了できました．ここに深く感謝致します．連載は終っても TOMOYO Linux の活動はまだ続きます．また，皆さんとお会いできることを楽しみにしています．</p>

<p><a href="tutorial-11.html.ja">第１１回へ戻る</a></p>

<hr>

<p><a href="tutorial.html.ja">目次へ戻る</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
