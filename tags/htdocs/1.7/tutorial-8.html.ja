<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linuxの世界　第８回：「blogのポリシーを作成してみよう（前編）」</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<!--
<p style="text-align:right;"><a href="tutorial-8.html.en">English Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
-->
<h1>TOMOYO Linuxの世界<br>第８回：「blogのポリシーを作成してみよう（前編）」</h1>

<p>今回からは，より実践的なTOMOYO Linuxの設定方法について紹介していきます．blogソフトウェアとして広く利用されているMovableTypeを題材に，ポリシー設定方法を解説します．</p>

<h2>今回の内容</h2>

<p>連載の第1回～6回まででTOMOYO Linuxの基本的な使い方について紹介しました．そこで，今回から数回にわたり，実際のシステムに近い形でTOMOYO Linuxを用いたシステム構築手順について紹介しようと思います．環境としては，CentOS 5.3上でMovableType 3.3を動作させることにします．</p>

<h3>MovableTypeのインストール</h3>

<p>CentOS 5.5にMovableTypeをインストールするところから始めます．TOMOYO Linuxの設定は含まれませんので，すでにMovableTypeを導入済みの方は次の項目へ飛んでください．なお，MovableTypeのインストールについて，本稿では最低限の内容しか触れません．詳細については，<a href="http://www.sixapart.jp/movabletype/manual/3.3/">オンラインドキュメントの「システム管理者ガイド」</a>などを参照してください．</p>

<h3>Apache のインストール</h3>

<p>まず，Apacheをインストールします．rootユーザとしてログインし，図1のコマンドを実行してください．</p>

<table border="1" summary="fig">
<tr><td>
■図1 Apacheのインストール
<pre>
# yum install httpd
</pre>
</td></tr>
</table>

<p>iptablesを有効にしている場合，設定が不適切だとApacheに接続できなくなります．図2のコマンドを実行して， ［Firewall Configuration］→［Customize］から［WWW (HTTP)］にチェックがされていることを確認してください．</p>

<table border="1" summary="fig">
<tr><td>
■図2 firstbootコマンドの実行
<pre>
# /usr/sbin/firstboot --reconfig
</pre>
</td></tr>
</table>

<h3>MovableType のインストール</h3>

<p>本稿では図3のディレクトリ構成で使用します．データベースにはBERKELEYDBを使用します．</p>

<table border="1" summary="fig">
<tr><td>
■図3 本稿で使用するディレクトリ構成<br>
<table border="1" summary="fig">
<tr><td>用途</td><td>ディレクトリ</td></tr>
<tr><td>アプリケーションディレクトリ</td><td>/var/www/cgi-bin/mt/</td></tr>
<tr><td>スタティックディレクトリ</td><td>/var/www/html/mt-static/</td></tr>
<tr><td>blogディレクトリ</td><td>/var/www/html/blog/</td></tr>
<tr><td>データベースディレクトリ</td><td>/var/www/mt-db/</td></tr>
<tr><td>テンポラリディレクトリ</td><td>/var/www/mt-tmp/</td></tr>
</table>
</td></tr>
</table>

<p>MovableType 3.3をダウンロードしてインストールします．本稿ではMT-3_36-ja.zipを使用します．図4の内容を実行します．</p>

<table border="1" summary="fig">
<tr><td>
■図4 MovableType 3.3のインストール
<pre>
# cd /var/www/cgi-bin/
# unzip MT-3_36-ja.zip
# mv MT-3.36-ja mt
# cd mt/
# mv mt-static /var/www/html/
# mkdir /var/www/html/blog /var/www/mt-db /var/www/mt-tmp
# chown apache:apache /var/www/html/blog/ /var/www/mt-db/ /var/www/mt-tmp/
# cp -p mt-config.cgi-original mt-config.cgi
</pre>
</td></tr>
</table>

<p>次に，mt-config.cgiを編集します．/var/www/cgi-bin/mt/mt-config.cgiをエディタで開き，www.example.comとなっている箇所（2ヵ所）を実際のサーバ名（本稿ではyourserverと表記します）に置き換えてください（図5） ．</p>

<table border="1" summary="fig">
<tr><td>
■図5 /var/www/cgi-bin/mt/mt-config.cgiの変更箇所
<pre>
[修正前]
CGIPath http://www.example.com/cgi-bin/mt/
StaticWebPath http://www.example.com/mt-static
[修正後]
CGIPath http://yourserver/cgi-bin/mt/
StaticWebPath http://yourserver/mt-static
</pre>
</td></tr>
</table>

<p>「##### MYSQL #####」 「##### POSTGRESQL#####」 「##### SQLITE #####」のセクションは不要なので削除します． 「##### BERKELEYDB #####」セクションではDataSourceという箇所を実際のパス名（/var/www/mt-db）に置き換えてください（図6） ．</p>

<table border="1" summary="fig">
<tr><td>
■図6 DataSourceを変更（/var/www/cgi-bin/mt/mt-config.cgi）
<pre>
[修正前]
DataSource /path/to/database/directory
[修正後]
DataSource /var/www/mt-db
</pre>
</td></tr>
</table>

<p>また，図7の内容を追加します．</p>

<table border="1" summary="fig">
<tr><td>
■図7 /var/www/cgi-bin/mt/mt-config.cgiに追加する内容
<pre>
DBUmask 0077
HTMLUmask 0077
UploadUmask 0077
DirUmask 0077
TempDir /var/www/mt-tmp
</pre>
</td></tr>
</table>

<p>apacheユーザの権限で実行するのでファイル作成時には所有者のみがアクセスできるようにしておくことができます．テンポラリディレクトリは TempDirキーワードを用いて指示します．</p>

<h3>MovableType の初期化</h3>

<p>Apacheをスタートさせます（図8） ．</p>

<table border="1" summary="fig">
<tr><td>
■図8 Apacheの起動
<pre>
# service httpd start
</pre>
</td></tr>
</table>

<p>Webブラウザを使って http://yourserver/cgi-bin/mt/mt-check.cgi を表示し，MovableTypeの実行に必要なプログラムが揃っていることを確認します．</p>

<p>「MovableTypeのシステム・チェックは，無事に完了しました． 」という表示を確認したら， http://yourserver/cgi-bin/mt/mt.cgi にアクセスしてmt.cgiを実行します．</p>

<p>この画面でMovableTypeのシステム管理者を登録してから，ログインしてください．ログイン後は， ［First Weblog］→［設定］→［サイトＵＲＬ／パス］の順に選択して，サイトURLとサイトパスを図9のように設定してください．</p>

<table border="1" summary="fig">
<tr><td>
■図9 サイトURLとサイトパスの設定<br>
<table border="1" summary="fig">
<tr><td>設定項目</td><td>設定内容</td></tr>
<tr><td>サイトURL</td><td>http://yourserver/blog/</td></tr>
<tr><td>サイトパス</td><td>/var/www/html/blog</td></tr>
</table>
</td></tr>
</table>

<p>その後， ［変更を保存］を選択し， ［サイトを再構築］→［再構築］の順に選択してください．以上でMovableTypeのインストールは完了です．</p>

<h2>TOMOYO Linuxのインストール</h2>

<p>では，いよいよTOMOYO Linuxをインストールしてみることにしましょう．この連載では，2010年4月1日にリリースされたバージョン1.7.2を用います．</p>


<h3>プログラムのインストール</h3>

<p>CentOS 5.5用のコンパイル済みパッケージをダウンロードしインストールします（図10） ．</p>

<table border="1" summary="fig">
<tr><td>
■図10 TOMOYO Linux 1.7.2のインストール
<pre>
# wget -O /tmp/key 'http://pgp.nic.ad.jp/pks/lookup?op=get&amp;search=0x4B975A98'
# rpm --import /tmp/key
# wget -O /etc/yum.repos.d/ccs.repo http://tomoyo.sourceforge.jp/repos-1.7/CentOS5/ccs.repo
# yum install ccs-kernel
</pre>
</td></tr>
</table>

<p>利用可能な最新のカーネルは<a href="http://tomoyo.sourceforge.jp/1.7/install.html#install_from_repository">バイナリパッケージをインストール</a>を参照ください．</p>

<p>次にツールをインストールします．（図11） ．</p>

<table border="1" summary="fig">
<tr><td>
■図11 ツールをインストール
<pre>
# yum install ccs-tools
</pre>
</td></tr>
</table>

<p>TOMOYO Linuxのユーティリティを保存してある場所を環境変数PATHに追加しておきます．bashを使っている場合は~/.bashrcに図12の行を追加します．</p>

<table border="1" summary="fig">
<tr><td>
■図12 環境変数PATHの設定
<pre>
export PATH=$PATH:/usr/sbin
</pre>
</td></tr>
</table>

<h3>ポリシーの初期化</h3>

<p>init_policyによりポリシーファイルを初期化します（図13） ．</p>

<table border="1" summary="fig">
<tr><td>
■図13 ポリシーファイルを初期化
<pre>
# /usr/lib/ccs/init_policy
</pre>
</td></tr>
</table>

<p>このプログラムはポリシーファイルが存在する場合は何もしないので，すでに/etc/ccs/ディレクトリが存在する場合には/etc/ccs/ディレクトリをどこかに移動してから実行してください． init_policyの実行により，/etc/ccs/ディレクトリに図14の5つのファイルが作成されます．</p>

<table border="1" summary="fig">
<tr><td>
■図14 init_policyによって作成されるファイル<br>
<table border="1" summary="fig">
<tr><td>ファイル名</td><td>役割</td></tr>
<tr><td>exception_policy.conf</td><td>例外ポリシー</td></tr>
<tr><td>domain_policy.conf</td><td>ドメインポリシー</td></tr>
<tr><td>manager.conf</td><td>マネージャーポリシー</td></tr>
<tr><td>profile.conf</td><td>プロファイル</td></tr>
<tr><td>meminfo.conf</td><td>メモリ使用量制限</td></tr>
</table>
</td></tr>
</table>

<p>exception_policy.confは「例外ポリシー」と呼ばれ，パス名のグループを定義したりドメイン遷移を制御したりするために使われます． domain_policy.confは「ドメインポリシー」と呼ばれ，ドメイン単位でアクセスを制御するために使われます． manager.confは「マネージャーポリシー」と呼ばれ，/proc/ccs/ディレクトリ経由でポリシーの更新を許可するプログラムやドメインを指定するために使われます． profile.confは「プロファイル」と呼ばれ，アクセス制御の方法(どの機能を有効にするか)を指定するために使われます．行頭の数字はプロファイル番号で， 「0-」で始まる行は要求された内容をチェックしないで許可する「無効モード」 ， 「1-」で始まる行は要求された内容を記録に残してから許可する「学習モード」 ， 「2-」で始まる行は要求された内容をチェックするが拒否はしない「確認モード」 ， 「3-」で始まる行は要求された内容をチェックして許可されていない場合には拒否する「強制モード」用として使います．この連載では，すべてのアクセス制御を有効にしたプロファイルを用いますが，難しいと感じたらファイルに関するアクセス制御以外は無効（CONFIG= という部分を CONFIG::file= に書き換える）にしてもかまいません．</p>

<h2>学習の開始</h2>

<h3>システムの再起動</h3>

<p>ここまで準備ができたら，システムをリブートします．GRUBのメニューではTOMOYO Linuxカーネルを選択してください．</p>

<h3>学習モードに切り替える</h3>

<p>Apache をスタートさせます（図15） ．</p>

<table border="1" summary="fig">
<tr><td>
■図15 Apacheの起動
<pre>
# service httpd start
</pre>
</td></tr>
</table>

<p>ポリシーエディタを起動してください（図16） ．</p>

<table border="1" summary="fig">
<tr><td>
■図16 ポリシーエディタの起動
<pre>
# /usr/sbin/ccs-editpolicy
</pre>
</td></tr>
</table>

<p>すると「&lt;&lt;&lt; Domain Transition Editor &gt;&gt;&gt;」という画面が表示され，ドメイン遷移の一覧が表示されます．行番号の右には各ドメインのモード（プロファイル番号）が表示されています．「&lt;kernel&gt; /usr/sbin/httpd」というドメインにカーソルを合わせて，「S」を押してから学習モードに対応するプロファイルの番号「1」を入力して「ENTER」を押します（図17） ．</p>

<table border="1" summary="fig">
<tr><td>
■図17 &lt;kernel&gt; /usr/sbin/httpdドメインを学習モードにする<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig12.png" alt="sd200708-fig12.png">
</td></tr>
</table>

<p>これにより，&lt;kernel&gt; /usr/sbin/httpdドメインが学習モードになり，今後&lt;kernel&gt; /usr/sbin/httpdによって新規作成されるドメインも学習モードになります．</p>

<h3>アクセス許可を学習させる</h3>

<p>Apacheを再起動させます（図18） ．</p>

<table border="1" summary="fig">
<tr><td>
■図18 Apacheの再起動
<pre>
# service httpd restart
</pre>
</td></tr>
</table>

<p>これにより，Apacheの起動と終了に必要なアクセス許可が学習されます．その後， http://yourserver/cgi-bin/mt/mt.cgi にアクセスしてmt.cgiを実行します．</p>

<p>MovableTypeにログインし，エントリを投稿したりページを再構築したりトラックバックを受け付けるなどの操作を行います．TOMOYO Linuxは操作に対する要求に応えながら，それに必要なアクセス許可内容を学習します．ポリシーは後から確認，追加できますが，初期の自動学習で多くの機能を実行させておくと全体の作業がスムーズに進みます．MovableTypeのように複雑なものでは少し難しいですが，あらかじめ試験項目を作成しておくと良いでしょう．</p>

<h3>アクセス許可を確認する </h3>

<p>ひととおり学習したら，ccs-editpolicyで学習結果を確認してみましょう．図19のようなドメインが作成されているはずです（操作内容や設定内容により異なる場合があります．）．ApacheからMovable TypeのCGIが呼ばれ，そこからいくつかの外部プログラムが呼ばれていることがわかります．</p>

<table border="1" summary="fig">
<tr><td>
■図19 ドメインの学習結果<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig14.png" alt="sd200708-fig14.png">
</td></tr>
</table>

<h3>パス名のグループ化</h3>

<p>「&lt;kernel&gt; /usr/sbin/httpd /var/www/cgi-bin/mt.cgi」ドメインにカーソルを合わせて「ENTER」を押すと，&lt;&lt;&lt; Domain Policy Editor &gt;&gt;&gt;という画面に移動します．その画面をスクロールしてみると，図20のようなエントリが見つかるはずです．</p>

<table border="1" summary="fig">
<tr><td>
■図20 作成されたポリシーの内容（一部）
<pre>
allow_read /var/www/cgi-bin/mt/extlib/CGI.pm
allow_read /var/www/cgi-bin/mt/extlib/CGI/Cookie.pm
allow_read /var/www/cgi-bin/mt/extlib/CGI/Util.pm
（中略）
allow_read /var/www/cgi-bin/mt/lib/MT/Trackback.pm
allow_read /var/www/cgi-bin/mt/lib/MT/Util.pm
allow_read /var/www/cgi-bin/mt/lib/MT/WeblogPublisher.pm
</pre>
</td></tr>
</table>

<p>もちろん，ここまでの内容で作成したポリシーでも運用は可能ですが，実際のシステム運用ではポリシーを整理してから行います．今度はその手順を紹介します．さきほど確認したmt.cgiドメインの学習結果を見ると，多数のPerlモジュールにアクセスしていることがわかります．そこでまず，これらの Perlモジュールへのパス名を“MT-LIB”という名前でグループ化することにします．グループ化をすると，対象となるパス名をまとめて扱えるのでポリシーがコンパクトで見通しやすくなります．</p>

<p>ccs-editpolicyで，「TAB」を押して&lt;&lt;&lt; ExceptionPolicy Editor &gt;&gt;&gt;という画面に移動してから図21の内容の指定を追加してください．</p>

<table border="1" summary="fig">
<tr><td>
■図21 パス名をグループ化するための設定内容
<pre>
path_group MT-LIB /var/www/cgi-bin/mt/\{\*\}/\@.pm
</pre>
</td></tr>
</table>

<p>その後，「TAB」を押すと&lt;&lt;&lt; Domain Transition Editor &gt;&gt;&gt;という画面に戻り，さらに「ENTER」を押すと&lt;&lt;&lt; Domain Policy Editor &gt;&gt;&gt;という画面に移動することができます．登録したばかりのMT-LIBを使ってグループ化してみましょう．まずccs-editpolicyで，mt.cgiのドメインを選択し，図22の行を追加します．図22の行を追加後に，図22の行にカーソルを合わせてから「O」キーを押すと，カーソル行のアクセス許可に包含されているアクセス許可に対して&amp;マークが付与されるので，「D」キーを押すことで学習結果から図22の行のアクセス許可に包含されているエントリを削除できます．</p>

<table border="1" summary="fig">
<tr><td>
■図22 図21でグループ化したパス名を指定
<pre>
allow_read @MT-LIB
</pre>
</td></tr>
</table>

<p>これは， 「グループ名がMT-LIBであるpath_groupに割り当てられているパス名」に対して読み込みを許可するという意味です．</p>

<p>mt.cgiドメインにはMT-LIBで定義した以外にもグループ化するほうが良さそうなエントリがありそうです（図23） ．</p>

<table border="1" summary="fig">
<tr><td>
■図23 グループ化できそうなパス名のエントリ
<pre>
allow_read/write /var/www/mt-db/__db.notification.blog_id.idx
allow_read/write /var/www/mt-db/__db.notification.db
（中略）
allow_read/write /var/www/mt-db/trackback.entry_id.idx
allow_read/write /var/www/mt-db/trackback.entry_id.idx.lock
allow_create /var/www/mt-db/__db.notification.blog_id.idx
allow_create /var/www/mt-db/__db.notification.db
（中略）
allow_create /var/www/mt-db/objecttag.db.lock
allow_create /var/www/mt-db/plugindata.blog_id.idx.lock
allow_rename /var/www/mt-db/__db.notification.blog_id.idx /var/www/mt-db/notification.blog_id.idx
allow_rename /var/www/mt-db/__db.notification.db /var/www/mt-db/notification.db
（略）
</pre>
</td></tr>
</table>

<p>データベースディレクトリ内のファイルは読み書き／新規作成／名称変更が行われることがわかります．これらのパス名もグループ化することにします．ここでは，/var/www/mt-db/\*をMT-DBという名前で登録することにします．</p>

<p>&lt;&lt;&lt; Exception Policy Editor &gt;&gt;&gt;という画面において図24の指定を登録し，&lt;&lt;&lt; Domain Policy Editor &gt;&gt;&gt;という画面に戻ってから，さきほどと同様に登録済みエントリの削除を行い，新たに図25の3行を追加します．</p>

<table border="1" summary="fig">
<tr><td>
■図24 /var/www/mt-db/\*をグループ化
<pre>
path_group MT-DB /var/www/mt-db/\*
</pre>
</td></tr>
</table>

<table border="1" summary="fig">
<tr><td>
■図25 図24でグループ化したパス名を指定
<pre>
allow_read/write @MT-DB
allow_create @MT-DB
allow_rename @MT-DB @MT-DB
</pre>
</td></tr>
</table>

<p>これは， 「グループ名がMT-DBであるpath_groupに割り当てられているパス名」に対して読み書きと新規作成と名称変更を許可するという意味です． MT-LIB, MT-DBの登録を行った後でmt.cgiを実行すると登録したパターンに一致する個別のファイルは学習結果に現れなくなります．パス名のグループ化はどこまで行わなければならないという決まりはありません．学習結果を見ながら，まとめられそうな部分があれば同様に処理を行います．ここで示した以外には，Perlのライブラリ（/usr/lib/perl5/5.8.8/ディレクトリ以下のファイル）やblogディレクトリのファイル（/var/www/html/blog/ディレクトリ以下のファイル）などが対象になるでしょう．mt.cgi以外のCGIについても同様にグループ化を行ってください．</p>

<h3>ポリシーを保存する</h3>

<p>ポリシーエディタで表示されるポリシーはカーネル内にのみ存在しており，再起動すると失われてしまいます．ポリシーをディスク上のファイルに保存するにはccs-savepolicyというコマンドを実行してください（図26） ．</p>

<table border="1" summary="fig">
<tr><td>
■図26 ccs-savepolicyコマンドの実行
<pre>
# /usr/sbin/ccs-savepolicy
</pre>
</td></tr>
</table>

<h3>ドメインの集約</h3>

<p>パス名のグループ化を行っているときに，個々のCGIに必要なアクセス許可が似ていることに気が付いたと思います．MovableTypeは機能ごとに別々のCGIプログラムに分かれているので，TOMOYO Linuxでは個々のCGIごとにドメインが分かれます．もちろん，個々のCGIごとにアクセス許可を設定するほうが安全ですが，数が多くて手間がかかります．そこで，個々のCGI用のドメインを1個に集約してしまうという選択肢もあります．ここでは例として，MovableTypeのCGIプログラムを，/./MovableTypeCGIという名前で集約してみることにします．ドメインを集約するには，&lt;&lt;&lt; Exception Policy Editor &gt;&gt;&gt;という画面に移動してから図27の指定を追加してください．</p>

<table border="1" summary="fig">
<tr><td>
■図27 ドメインを集約するための設定
<pre>
aggregator /var/www/cgi-bin/mt/\@.cgi /./MovableTypeCGI
aggregator /var/www/cgi-bin/mt/extras/examples/plugins/\*/\@.cgi /./MovableTypeCGI
aggregator /var/www/cgi-bin/mt/plugins/\*/\@.cgi /./MovableTypeCGI
</pre>
</td></tr>
</table>

<p>このように指定すると，/var/www/cgi-bin/mt/\@.cgiまたは/var/www/cgi-bin/mt/extras /examples/plugins/\*/\@.cgiまたは/var/www/cgi-bin/mt/plugins/\*/\@.cgiというパターンに一致するプログラムが実行された場合には/./MovableTypeCGIというプログラムが実行されたのかのように振舞うようになり，結果としてドメインが集約されます．その後，「TAB」を押して&lt;&lt;&lt; Domain Transition Editor &gt;&gt;&gt;という画面に戻り，図28のドメインを削除してください．</p>

<table border="1" summary="fig">
<tr><td>
■図28 ドメインを削除する<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig17.png" alt="sd200708-fig17.png">
</td></tr>
</table>

<p>また，&lt;kernel&gt; /usr/sbin/httpdドメインのアクセス許可からこれらのCGIの実行許可を削除してください（図29） ．</p>

<table border="1" summary="fig">
<tr><td>
■図29 CGIの実行許可を削除する<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig18.png" alt="sd200708-fig18.png">
</td></tr>
</table>

<p>この状態で先ほどと同様に操作すると，図30のようなドメインが作成されるはずです．</p>

<table border="1" summary="fig">
<tr><td>
■図30 集約したドメインが作成される<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig19.jpg" alt="sd200708-fig19.jpg">
</td></tr>
</table>

<h3>ドメイン遷移を抑制する</h3>

<p>環境や設定によっては，perlのCwdモジュールによりカレントディレクトリを取得するために/bin/pwdコマンドが実行される場合があります．そのような場合には，図31のように/bin/pwdコマンド用のドメインが作成されます．</p>

<table border="1" summary="fig">
<tr><td>
■図31 /bin/pwdコマンド用のドメインが作成される<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig20.jpg" alt="sd200708-fig20.jpg">
</td></tr>
</table>

<p>しかし，この/bin/pwdについてはわざわざドメイン遷移させる必要はなさそうです．そこで，/./MovableTypeCGIから/bin /pwdが実行される場合にはドメイン遷移させないようにするという選択肢もあります．ドメイン遷移を抑制するには，&lt;&lt;&lt; Exception Policy Editor &gt;&gt;&gt;という画面に移動してから図32の指定を追加してください．その後，&lt;&lt;&lt; Domain Transition Editor &gt;&gt;&gt;という画面に戻ると，/bin/pwdドメインに対して( keep_domain /bin/pwdfrom /./MovableTypeCGI )という理由と共に「!」という表示により「このドメインには到達不能である」ことを示すようになるので，そのドメインを削除します（図33） ．</p>

<table border="1" summary="fig">
<tr><td>
■図32 ドメインを集約するための設定
<pre>
keep_domain /bin/pwd from /./MovableTypeCGI
</pre>
</td></tr>
</table>

<table border="1" summary="fig">
<tr><td>
■図33 到達不能なドメインを削除する<br>
<img src="http://tomoyo.sourceforge.jp/wiki/?plugin=ref&amp;page=WorldOfTomoyoLinux-8&amp;src=sd200708-fig21.jpg" alt="sd200708-fig21.jpg">
</td></tr>
</table>

<p>なお，ドメイン遷移を抑制しているのは/bin/pwdプログラムだからであって，たとえば/bin/catプログラムの場合にはドメイン遷移を抑制すべきではありません．/bin/catを呼び出し元のドメイン（この例では/./MovableTypeCGI）で実行することは，呼び出し元のドメインで読み込みが許可されているすべての資源（たとえばCGIプログラムやデータベース）の内容をそっくり漏洩させてしまう危険性を高めることにつながります．</p>

<h2>次回予告</h2>

<p>今回は，MovableTypeの導入からポリシーの自動学習までの手順について紹介し，併せて応用的な使い方であるパス名のグループ化，ドメイン遷移の集約と抑制について解説しました．パス名のグループ化やドメイン遷移の調整については，最初のうちは難しいかもしれませんが，本稿を参考に少しずつ挑戦していただければと思います．次回は，確認モードを用いて必要なアクセス許可が与えられているかどうかを確認する方法と，チューニングの続きについて説明します．</p>

<p><a href="tutorial-7.html.ja">第７回へ戻る</a>　<a href="tutorial-9.html.ja">第９回へ進む</a></p>

<hr>

<p><a href="index.html.ja">目次へ戻る</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
