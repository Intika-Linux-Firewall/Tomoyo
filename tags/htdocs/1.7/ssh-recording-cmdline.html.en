<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>Recording commandline for shell sessions.</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="ssh-recording-cmdline.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>Recording commandline for shell sessions.</h1>

<h2>About this page</h2>

<p>This page explains you how to record commandline for SSH login sessions using TOMOYO Linux's execute_handler functionality.</p>

<hr>

<h2>Step 1: Compiling the program</h2>

<p>Compile the below program.</p>

<table border="1">
<tr><td><pre>
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;unistd.h&gt;
#include &lt;syslog.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;sys/file.h&gt;
#include &lt;fcntl.h&gt;

static void fprintf_encoded(FILE *fp, const char *string)
{
	while (1) {
		const unsigned char c = *(const unsigned char *) string++;
		if (!c)
			break;
		else if (c == '\\')
			fprintf(fp, "\\\\");
		else if (c &gt; 32 &amp;&amp; c < 127)
			fputc(c, fp);
		else
			fprintf(fp, "\\%03o", c);
	}
}

int main(int raw_argc, char *raw_argv[])
{
	int i;
	int argc;
	int envc;
	char *filename;
	char **argv;
	char **envp;
	{ /* Check that I'm an execute handler process.  */
		int fd = open("/proc/ccs/.execute_handler", 0);
		close(fd);
		if (fd == EOF) {
			fprintf(stderr, "FATAL: I'm not execute_handler.\n");
			return 1;
		}
	}
	if (raw_argc &lt; 7)
		return 1;
	filename = raw_argv[4];
	argc = atoi(raw_argv[5]);
	envc = atoi(raw_argv[6]);
	if (raw_argc != argc + envc + 7)
		return 1;
	for (i = 5; i &lt; argc + 5; i++)
		raw_argv[i] = raw_argv[i + 2];
	raw_argv[argc + 5] = NULL;
	for (i = argc + 6; i &lt; argc + envc + 6; i++)
		raw_argv[i] = raw_argv[i + 1];
	raw_argv[argc + envc + 6] = NULL;
	argv = raw_argv + 5;
	envp = raw_argv + argc + 6;

	{
		FILE *fp = fopen("/var/log/commandline.log", "a");
		if (!fp || flock(fileno(fp), LOCK_EX) == EOF)
			return 1;
		fprintf(fp, "Domain = %s\n", raw_argv[1]);
		fprintf(fp, "Caller Program = %s\n", raw_argv[2]);
		fprintf(fp, "Process Status = %s\n", raw_argv[3]);
		fprintf(fp, "Requested Program = %s\n", filename);
		fprintf(fp, "argc=%d\n", argc);
		fprintf(fp, "envc=%d\n", envc);
		for (i = 0; i &lt; argc; i++) {
			fprintf(fp, "argv[%d] = \"", i);
			fprintf_encoded(fp, argv[i]);
			fprintf(fp, "\"\n");
		}
		for (i = 0; i &lt; envc; i++) {
			fprintf(fp, "envp[%d] = \"", i);
			fprintf_encoded(fp, envp[i]);
			fprintf(fp, "\"\n");
		}
		fclose(fp);
	}

	execve(filename, argv, envp);
	fprintf(stderr, "ERROR: Can't execute %s .\n", filename);
	return 1;
}
</pre></td></tr>
</table>

<p>In this page, we assume the location of compiled program as /bin/record_cmdline . Also, we assume the location of SSH server program as /usr/sbin/sshd . Also, we assume the location of login shell program as /bin/bash .</p>

<h2>Step 2: Install and initialize TOMOYO Linux</h2>

<p><a href="install.html.en">Install TOMOYO Linux</a> and run below commandline in order to initialize TOMOYO Linux.</p>

<table border="1">
<tr><td>
/usr/lib/ccs/init_policy
</td></tr>
</table>

<p>Then, please do below operations before you reboot using TOMOYO Linux kernel.</p>

<p>Append below line to /etc/ccs/exception_policy.conf in order to initialize domain transition when /usr/sbin/sshd is executed.</p>

<table border="1">
<tr><td>
initialize_domain /usr/sbin/sshd
</td></tr>
</table>

<p>Append below line to /etc/ccs/exception_policy.conf in order to suppress domain transition after login shell which is executed by SSH server.</p>

<table border="1">
<tr><td>
keep_domain &lt;kernel&gt; /usr/sbin/sshd /bin/bash
</td></tr>
</table>

<p>Add below lines to /etc/ccs/domain_policy.conf so that program execution requests from login shell which is executed by SSH server are passed to /bin/record_cmdline .</p>

<table border="1">
<tr><td>
&lt;kernel&gt; /usr/sbin/sshd /bin/bash<br>
execute_handler /bin/record_cmdline
</td></tr>
</table>

<h2>Step 3: Operation</h2>

<p>Now, you are ready to start operation. Please reboot using TOMOYO Linux kernel.</p>

<p>Login via SSH and do some operations. You can confirm that commandline parameters are recorded by doing below commandline.</p>

<table border="1">
<tr><td>
tail -f /var/log/commandline.log
</td></tr>
</table>

<h2>Explanation</h2>

<p>TOMOYO Linux's execute_handler functionality intercepts program execution requests from login shell which in executed by SSH server and passes the program execution requests to /bin/record_cmdline . Then, /bin/record_cmdline records parameters passed to program execution requests and actually executes the requested programs.</p>

<h2>Application idea</h2>

<p>You can customize /bin/record_cmdline to accept or deny program execution requests based on commandline arguments because parameters passed to execution requests are passed to /bin/record_cmdline .</p>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
