<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>TOMOYO Linux ccs-patch 1.8.x ChangeLog</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../media/tomoyotitle.png" alt="tomoyotitle.png" width="320" height="40" border="0" align="left" title="TOMOYO Linux"></a>
</div>

<div id="navbar" class="tomoyo-changelogs">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.en" title="TOMOYO Linux Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../about.html.en" title="About TOMOYO Linux">About</a></li>
<li id="tomoyo-download"><a href="../download.html.en" title="Get TOMOYO Linux">Download</a></li>
<li id="tomoyo-changelogs"><a href="../changelogs.html.en" title="TOMOYO Linux ChangeLogs">ChangeLogs</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../links.html.en" title="Links">Links</a></li>
</ul>
</div>

<div id="content">

<div id="changelogs">

<h4>ChangeLog for ccs-patch 1.8.2</h4>

<pre>
Fix 2011/09/03

    @ Avoid race when retrying "file execute" permission check.

      There was a race window that the pathname which is subjected to
      "file execute" permission check when retrying via supervisor's decision
      because the pathname was recalculated upon retry. Though, there is an
      inevitable race window even without supervisor, for we have to calculate
      the symbolic link's pathname from "struct linux_binprm"-&gt;filename rather
      than from "struct linux_binprm"-&gt;file because we cannot back calculate
      the symbolic link's pathname from the dereferenced pathname.

    @ Remove unneeded daemonize().

      Garbage collector thread is created using kthread_create() since 2.6.7.
      Kernel threads created by kthread_create() does not need to call
      daemonize().

Fix 2011/07/13

    @ Accept "::" notation for IPv6 address.

      In order to add network access restriction to TOMOYO 2.4, I backported
      routines for parsing/printing IPv4/IPv6 address from kernel 3.0 into
      TOMOYO 1.8.2.
      Now, IPv6 address accepts "::1" instead of "0:0:0:0:0:0:0:1".

Fix 2011/07/07

    @ Remove /proc/ccs/.domain_status interface.

      Writing to /proc/ccs/.domain_status can be emulated by

        ( echo "select " $domainname; echo "use_profile " $profile ) |
        /usr/sbin/ccs-loadpolicy -d

      and reading from /proc/ccs/.domain_status can be emulated by

        grep -A 1 '^&lt;' /proc/ccs/domain_policy |
        awk ' { if ( domainname == "" ) { if ( substr($1, 1, 1) == "&lt;" )
        domainname = $0; } else if ( $1 == "use_profile" ) {
        print $2 " " domainname; domainname = ""; } } ; '

      . Since this interface is used by only /usr/sbin/ccs-setprofile ,
      remove this interface by updating /usr/sbin/ccs-setprofile .

Fix 2011/06/14

    @ Remove unused "struct inode *" parameter from ccs-patch-\*.diff .

      To follow changes I made on 2011/04/20, I removed "struct inode *" from
      ccs_mknod_permission(), ccs_mkdir_permission(), ccs_rmdir_permission(),
      ccs_unlink_permission(), ccs_symlink_permission(), ccs_link_permission(),
      ccs_rename_permission() that are called from fs/namei.c
      net/unix/af_unix.c include/linux/security.c security/security.c .
      If you have your own ccs-patch-*.diff , please update accordingly.

Fix 2011/06/10

    @ Allow specifying trigger for activation.

      To be able to use TOMOYO under systemd environments where init= parameter
      is used, I changed to allow overriding the trigger for calling external
      policy loader and activating MAC via kernel command line options.

Fix 2011/06/06

    @ Add policy namespace support.

      To be able to use TOMOYO in LXC environments, I introduced policy
      namespace. Each policy namespace has its own set of domain policy,
      exception policy and profiles, which are all independent of other
      namespaces.

    @ Remove CONFIG_CCSECURITY_BUILTIN_INITIALIZERS option.

      From now on, exception policy and manager need to be able to handle
      policy namespace (which is a &lt;$namespace&gt; prefix added to each line).
      Thus, space-separated list for CONFIG_CCSECURITY_BUILTIN_INITIALIZERS is
      no longer suitable for handling policy namespace.
</pre>

<h4>ChangeLog for ccs-patch 1.8.1</h4>

<pre>
Fix 2011/05/11

    @ Fix wrong domainname validation.

      "&lt;kernel&gt;" + "/foo/\" + "/bar" was by error checked when
      "&lt;kernel&gt; /foo/\* /bar" was given. As a result, legal domainnames like
      "&lt;kernel&gt; /foo/\* /bar" are rejected.

Fix 2011/05/05

    @ Fix wrong profile number in audit logs for "misc env" permission.

      Profile number used for "file execute" permission was by error reused
      when generating audit logs for "misc env" permission.

Fix 2011/04/20

    @ Remove unused "struct inode *" parameter from hooks.

      Since pre-vfs functions were removed on 2010/09/18, "struct inode *"
      parameter which was used for checking parent directory's DAC permission
      is no longer used.

      Note that "struct ccsecurity_operations ccsecurity_ops" has changed.
      Loadable kernel modules that depends on it need to be rebuilt.

Fix 2011/04/03

    @ Fix fcntl(F_SETFL, O_APPEND) handling.

      Since 1.8.0, TOMOYO was by error checking "file write" permission rather
      than "file append" permission when changing file's writing mode from
      "overwriting" to "append".

      This error should impact little (except CentOS 6.0 kernels) because once
      a file was opened for "overwriting" mode, changing that file to "append"
      mode cannot undo overwriting the file. Regarding CentOS 6.0 kernels,
      due to different ACC_MODE definition, TOMOYO was by error needlessly
      checking "file read" permission when fcntl() was requested.

Fix 2011/03/31

    @ Fix conditional policy parsing.

      Since exec.realpath= and symlink.target= accept path_group,
      symlink.target="@foo" was by error parsed as symlink.target=@foo .

    @ Serialize updating profile's comment line.

      We need to serialize when updating COMMENT= line in /proc/ccs/profile .

Fix 2011/03/15

    @ Pack policy when printing via /proc/ccs/ interface.

      The kernel side is ready for accepting packed input like

        file read/write/execute /path/to/file

      but was using unpacked output like

        file read /path/to/file
        file write /path/to/file
        file execute /path/to/file

      because most of userland tools were not ready for accepting packed input.

      The advantages of using packed policy are that it makes policy files
      smaller and it speeds up loading/saving policy files.

      Since most of userland tools are ready for accepting packed input by now,
      I changed to use packed policy for both input and output.

Fix 2011/03/10

    @ Remove /proc/ccs/meminfo interface.

      Please use /proc/ccs/stat interface instead.

Fix 2011/03/05

    @ Support built-in policy configuration.

      To be able to start using enforcing mode from the early stage of boot
      sequence, I added support for built-in policy configuration and
      activating access control without calling external policy loader program.

      This will be useful for systems where operations which can lead to the
      hijacking of the boot sequence are needed before loading the policy.
      For example, you can activate immediately after loading the fixed part of
      policy which will allow only operations needed for mounting a partition
      which contains the variant part of policy and verifying (e.g. running GPG
      check) and loading the variant part of policy. Since you can start using
      enforcing mode from the beginning, you can reduce the possibility of
      hijacking the boot sequence.

Fix 2011/03/01

    @ Run garbage collector without waiting for /proc/ccs/ users.

      Currently TOMOYO holds SRCU lock upon open() and releases it upon close()
      because list elements stored in the "struct ccs_io_buffer" instances are
      accessed until close() is called. However, such SRCU usage causes lockdep
      to complain about leaving the kernel with SRCU lock held. Therefore,
      I changed to hold/release SRCU upon each read()/write() by selectively
      deferring kfree() by keeping track of the "struct ccs_io_buffer"
      instances.
</pre>

<h4>ChangeLog for ccs-patch 1.8.0</h4>

<pre>
Fix 2011/02/07

    @ Fix infinite loop bug when reading /proc/ccs/audit or /proc/ccs/query .

      In ccs_flush(), head-&gt;r.w[0] holds pointer to string data to be printed.
      But head-&gt;r.w[0] was updated only when the string data was partially
      printed (because head-&gt;r.w[0] will be updated by head-&gt;r.w[1] later if
      completely printed). However, regarding /proc/ccs/audit and
      /proc/ccs/query , an additional '\0' is printed after the string data was
      completely printed. But if free space for read buffer became 0 before
      printing the additional '\0', ccs_flush() was returning without updating
      head-&gt;r.w[0]. As a result, ccs_flush() forever reprints already printed
      string data.

Fix 2011/01/11

   @ Use filesystem name for unnamed devices when vfsmount is missing.

     "Change pathname for non-rename()able filesystems." changed to use
     "$fsname:" if the filesystem does not support rename() operation and
     "dev($major,$minor):" otherwise when vfsmount is missing. But it turned
     out that it is useless to use "dev($major,$minor):" for unnamed devices
     (filesystems with $major == 0). Thus, I changed to use "$fsname:" rather
     than "dev($major,$minor):" for filesystems with $major == 0 when vfsmount
     is missing.

Fix 2010/12/17

    @ Split ccs_null_security into ccs_default_security and ccs_oom_security.

      ccs_null_security is used by preserve KABI compatibility option and is
      used for providing default values against threads which have not yet
      allocated memory for their security contexts.

      If current thread failed to allocate memory for current thread's security
      context, current thread uses ccs_null_security. Since current thread is
      allowed to modify current thread's security context, current thread might
      modify ccs_null_security which should not be modified for any reason.

      Therefore, I split ccs_null_security into ccs_default_security and
      ccs_oom_security and use ccs_oom_security when current thread failed to
      allocate memory for current thread's security context.

      Threads which do not share ccs_oom_security are not affected by threads
      which share ccs_oom_security. Threads which share ccs_oom_security will
      experience temporary inconsistency, but such threads are about to be
      killed by SIGKILL signal.

Fix 2010/12/01

    @ Use same interface for audit logs.

      To be able to perform fine grained filtering by /usr/sbin/ccs-auditd ,
      I merged /proc/ccs/grant_log and /proc/ccs/reject_log as
      /proc/ccs/audit and added granted=yes or granted=no to audit logs.
</pre>

</div><!-- changelog -->

</div><!-- content -->

<div id="footer">
<p class="timestamp">Last modified: $Date$</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
</div>

</body>
</html>
