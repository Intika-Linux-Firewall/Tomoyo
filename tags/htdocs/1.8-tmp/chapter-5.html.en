<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>The world of TOMOYO Linux</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="tutorial-3.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>

<h1>Chapter 5: How do I manage domains?</h1>

<p style="text-align:center;">Aim: to become familiar with "Learning Mode" and use it to analyze the behaviour of a domain.</p>

<hr>

<h2><a name="5.1">5.1. Domain creation</a></h2>

<p>Each domain will behave differently and require a unique set of permissions. Their behaviour must therefore be analyzed to determine which actions you wish to permit in domain policy. TOMOYO Linux can be used to restrict only a subset of the domains in a system, but the most secure system would restrict every domain in order to make sure there are no points of vulnerability.</p>

<p>First, choose an application that you wish to analyze/protect. To demonstrate the procedure, this tutorial will use Apache in CentOS 5.5.</p>

<p>Start the target application:</p>

<pre class="command">
# service httpd start
</pre>

<p>Run the policy editor again <b>without</b> the "/etc/ccs/" option so that the policy loaded by the kernel can be edited directly. If you are already running the policy editor, switch to the "Domain Transition" screen.</p>

<p>In CentOS 5.5, the location of Apache is "/usr/sbin/httpd".</p>

<p>Scroll the cursor using arrow-keys and/or Home/End/PageUp/PageDown keys to find the line "/usr/sbin/httpd". In this picture, it is line 386:</p>

<p><img src="editpolicy-httpd-profile0.png" alt="editpolicy-httpd-profile0.png" width="720" height="400"></p>

<p>If "/usr/sbin/httpd" is invoked by "&lt;kernel&gt; /usr/sbin/mingetty /bin/login /bin/bash", then the domain name is <b>"&lt;kernel&gt; /usr/sbin/mingetty /bin/login /bin/bash /usr/sbin/httpd"</b>.</p>

<p>You will notice that the picture above may look a little different to what you can see on your own screen. This is because the domain "/usr/sbin/httpd" has been registered with the "initialize_domain" directive. Let's spend some time exploring the management of domains before we continue.</p>

<hr>

<h2><a name="5.2">5.2. Management of domain transitions</a></h2>

<p>Advanced control of domain transition is possible with TOMOYO Linux, and involves changes to exception policy. The instructions in this section require use of the policy editor tool. To edit exception policy, run the policy editor and <a href="tutorial-3.html.en#3.4">switch to the exception policy editor screen</a>. To add an entry, press the "a" key, type out the new entry you wish to add and press "Enter". To see what other commands are available, press the "?" key.</p>

<h3>initialize_domain</h3>

<p>When a unique execution occurs for application, a new domain is created. This allows for an application to receive different permissions depending on how it was executed (e.g. from an Xterm). However, it may be desirable to give the same permissions to an application without regard to how it was executed. This can simplify policy and make it easier to manage.</p>

<p>To do this, we need to enter a new entry into the exception policy. For example, you might add the following to exception policy:</p>

<pre>
initialize_domain /usr/sbin/sshd from any
</pre>

<p>Of course, "/usr/sbin/sshd" can be the full pathname of any application you wish to control domain transitions for. Having added this to exception policy, the application will now not create a new domain every time a unique execution occurs. Instead, it will reinitialize the domain to <b>"&lt;kernel&gt; /usr/sbin/sshd"</b>:</p>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-4.png" alt="fig-3-4.png" width="800" height="420">
</td></tr>
</table>

<p>The text "from any" included in the above command signifies that the application domain should be reinitialized when invoked by <b>any domain</b>. It is possible to cause reinitialization to happen only when the application domain is invoked by <b>a single specified domain</b>. This is achieved by adding the following to exception policy:</p>

<pre>
initialize_domain /usr/sbin/sshd from &lt;kernel&gt; /etc/rc.d/init.d/sshd
</pre>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-5.png" alt="fig-3-5.png" width="800" height="480">
</td></tr>
</table>

<p>It is also allowable to specify only the last part of the domain name instead of the whole domain name. For example, just <b>"from /etc/rc.d/init.d/sshd"</b> instead of <b>"from &lt;kernel&gt; /etc/rc.d/init.d/sshd"</b>. This would of course be less specific a rule, and would for example still apply to the sshd daemon being run from a terminal.</p>

<p>If you switch back to the "Domain Transition Editor" screen, you may see domains with a "!" mark in the third column. This means that the domain is unreachable and can safely be deleted. The domain you have chosen to initialize to will appear with a "*" mark.</p>

<p>Note that any policy specified in the unreachable domains will not automatically carry over into the initialized domain. For now, we have not developed any policy yet so this is not a problem. If you use this directive later on for domains that you have already developed policy for, you will need to either re-learn policy or copy over policy to the initialized domain.</p>

<h3>no_initialize_domain</h3>

<p>After using the initialize_domain rule, a situation may arise where you do not want an application to be reinitialized from a particular domain. For example, the application "/bin/mail" executes "/usr/sbin/sendmail.sendmail" in order to send mails. Consider that the following has been added to exception policy:</p>

<pre>
initialize_domain /usr/sbin/sendmail.sendmail from any
</pre>

<p>For example, if you wish to have separate permissions for sending mail and receiving mail, you can add the following to exception policy:</p>

<pre>
no_initialize_domain /usr/sbin/sendmail.sendmail from /bin/mail
</pre>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-6.png" alt="fig-3-6.png" width="800" height="500">
</td></tr>
</table>

<h3>keep_domain</h3>

<p>It may be preferable that any executed applications from a particular domain are <b>suppressed from undergoing a domain transition</b>. They therefore act within the permissions of the domain that has invoked it. For example, suppose you wish apply the same policy to all applications run within an ssh shell, you would add the following to exception policy:</p>

<pre>
keep_domain any from &lt;kernel&gt; /usr/sbin/sshd /bin/bash
</pre>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-9.png" alt="fig-3-9.png" width="800" height="350">
</td></tr>
</table>

<p>Now the execution of any application, such as "/bin/ls" or "/bin/cat" will not result in the creation of a new domain. It will instead remain in the domain specified above and thus act within the permissions of that domain.</p>

<p>This could also be done for any shell instance by adding the following to exception policy:</p>

<pre>
keep_domain any from /bin/bash
</pre>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-8.png" alt="fig-3-8.png" width="800" height="420">
</td></tr>
</table>

<p>This can be made even more specific, causing the suppression of domain transition only to occur when a specific application is executed from a specific domain. To do this, you could add the following to exception policy:</p>

<pre>
keep_domain /usr/bin/xargs from &lt;kernel&gt; /usr/sbin/sshd /bin/bash
</pre>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-10.png" alt="fig-3-10.png" width="800" height="430">
</td></tr>
</table>

<p>The "keep_domain" directive does not take precedence over the "initialize_domain" directive. If the "initialize_domain" directive has been specified for a particular application, that application will leave any domain with the "keep_domain" directive and reinitialize into its own domain.</p>

<p>If you switch back to the "Domain Transition Editor" screen, you may see domains with a "!" mark in the third column. This means that the domain is unreachable and can safely be deleted. The domain that you have chosen to suppress domain transition from will appear with a "#*" mark.</p>

<p>Note that any policy specified in the unreachable domains will not automatically be added to the parent domain (from which domain transition has been suppressed). For now, we have not developed any policy yet so this is not a problem. If you use this directive later on for domains that you have already developed policy for, you will need to either re-learn policy or copy over policy to the parent domain.</p>

<h3>no_keep_domain</h3>

<p>The "keep_domain" directive is useful in managing ssh login sessions as you cannot predict the commands the user will run and the order in which they will do so. However, there may be cases where you wish to resume domain transition, such as allowing access to password files when changing passwords or for restarting daemon services.</p>

<p>For example, if you wish to resume domain transition only for "/bin/cat", you could add the following to exception policy:</p>

<pre>
keep_domain any from &lt;kernel&gt; /usr/sbin/sshd /bin/bash
no_keep_domain /bin/cat from &lt;kernel&gt; /usr/sbin/sshd /bin/bash
</pre>

<table border="1" summary="fig">
<tr><td>
<img src="tutorial/fig-3-11.png" alt="fig-3-11.png" width="800" height="400">
</td></tr>
</table>

<br>

<hr>

<h2><a name="5.3">5.3. Switch to learning mode</a></h2>

<p>To continue with our target application, Apache, let's register it with the "initialize_domain directive:</p>

<pre>
initialize_domain /usr/sbin/httpd from any
</pre>

<p>Now we can manage all instances of Apache from the "&lt;kernel&gt; /usr/sbin/httpd" domain. Any domains that appear with a "!" mark can be safely deleted as they are unreachable. To start developing policy for this domain, we need to switch it to "Learning Mode".</p>

<p>Press the "s" key, enter '1' and press the "Enter" key:</p>

<p><img src="editpolicy-httpd-set-profile1.png" alt="editpolicy-httpd-set-profile1.png" width="720" height="400"></p>

<br>

<p>Now the profile number of the "/usr/sbin/httpd" domain has changed to 1:</p>

<p><img src="editpolicy-httpd-profile1.png" alt="editpolicy-httpd-profile1.png" width="720" height="400"></p>

<br>

<p>Press the "@" key to switch to the process list. Verify that "/usr/sbin/httpd" processes are assigned profile number 1:</p>

<p><img src="editpolicy-httpd-process1.png" alt="editpolicy-httpd-process1.png" width="720" height="400"></p>

<br>

<hr>

<h2><a name="5.4">5.4. Gathering necessary permissions</a></h2>

<p>Restart the Apache in order to learn what permissions are required for starting/finishing the Apache:</p>

<pre class="command">
# service httpd restart
</pre>

<p>Run the policy editor again and go to the "/usr/sbin/httpd" line. The line number may have changed due to the creation of new domains from executed programs.</p>

<p>Press the "Enter" key to browse the permissions that have been gathered:</p>

<p><a href="editpolicy-httpd-full.png">(Click to view complete screen.)<br><img src="editpolicy-httpd-acl1.png" alt="editpolicy-httpd-acl1.png" width="720" height="400"></a></p>

<p>This list was previously empty, but because the domain is in "Learning Mode", any new actions that occurred were appended to domain policy. This will continue until the domain is no longer placed in "Learning Mode". You can press the "r" key to refresh the screen.</p>

<p>Quit the editor and use Apache to generate necessary permissions for normal usage. All actions should be performed that you wish to allow:</p>

<p><img src="operation-learning.png" alt="operation-learning.png" width="689" height="907"></p>

<br>

<hr>

<h2><a name="5.5">5.5. Saving permissions to disk</a></h2>

<p>Remember to save policy, as permissions are accumulated only in kernel memory. <b>If the system is rebooted, the gathered permissions will be lost.</b></p>

<p>To save policy to disk, use the following command:</p>

<pre class="command">
# /usr/sbin/ccs-savepolicy
</pre>

<p>By executing "ccs-savepolicy", four files ("exception_policy.conf", "domain_policy.conf", "profile.conf", "manager.conf") are created in the "/etc/ccs/" directory. More precisely, they are symbolic links to files whose pathnames contain the creation time.</p>

<p>To load the policy currently on the disk into the kernel, use the "ccs-loadpolicy" command:</p>

<pre class="command">
# /usr/sbin/ccs-loadpolicy -df &lt; /etc/ccs/domain_policy.conf
# /usr/sbin/ccs-loadpolicy -ef &lt; /etc/ccs/exception_policy.conf
# /usr/sbin/ccs-loadpolicy -p &lt; /etc/ccs/profile.conf
# /usr/sbin/ccs-loadpolicy -m &lt; /etc/ccs/manager.conf
</pre>

<p>The <b>"-df"</b> option means overwrite "/proc/ccs/domain_policy".<br>
The <b>"-ef"</b> option means overwrite "/proc/ccs/exception_policy".<br>
The <b>"-p"</b> option means append to "/proc/ccs/profile".<br>
The <b>"-m"</b> option means append to "/proc/ccs/manager".</p>

<p>To make it harder for fatal mistakes to happen, "-pf" and "-mf" are not supported.</p>

<p>You might see warning messages like below printed on the console:</p>

<pre class="command">
WARNING: Domain '&lt;kernel&gt; /usr/sbin/httpd' has too many ACLs to hold. Stopped learning mode.
</pre>

<p>This is a safeguard to prevent TOMOYO Linux from consuming all the memory available on the system. If "Learning Mode" did not have a limit, the system may become unusably slow due to comparison with already learned permissions.</p>

<p>This limit can be increased with the "max_learning_entry" values in each of the profiles. However, care should be taken when increasing this value as this will require more memory. It is recommended to tune policy before increasing this value. Steps for tuning policy are described in the next chapter, and doing so can reduce the size of domain policy to become more manageable. You would then no longer need to increase the "max_learning_entry" value.</p>

<p>You may also see the entry <b>"quota_exceeded"</b> in domain policy. This indicates that no new entries will be learnt until domain policy is shortened or the "max_learning_entry" value is increased.</p>

<br>

<p>Proceed to the <a href="tutorial-6.html.en">Chapter 6</a> where we talk about how to develop policy!</p>

<div class=navfooter>
<hr align="left" width="100%">
<table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0">
<tr>
<td width="33%" align="left" valign="top">
<a href="tutorial-4.html.en">Prev</a>
</td>
<td width="34%" align="center" valign="top">
<a href="tutorial-index.html.en">Index</a>
</td>
<td width="33%" align="right" valign="top">
<a href="tutorial-6.html.en">Next</a>
</td></tr>
<tr><td width="33%" align="left" valign="top">
Chapter 4: How does TOMOYO Linux work?
</td>
<td width="34%" align="center" valign="top">
<a href="http://tomoyo.sourceforge.jp/">Home</a>
</td>
<td width="33%" align="right" valign="top">
Chapter 6: How do I develop policy?
</td>
</tr>
</table>
</div>

<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
