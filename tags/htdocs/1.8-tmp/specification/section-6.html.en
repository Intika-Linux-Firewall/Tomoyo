<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../../media/tomoyolinux.css" media="all" type="text/css">
<title>TOMOYO Linux 1.8.x : Specification : C6. Domain policy syntax</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../../media/tomoyotitle.png" alt="tomoyotitle.png" width="320" height="40" border="0" align="left"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../../index.html.en" title="TOMOYO Linux Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../../about.html.en" title="About TOMOYO Linux">About</a></li>
<li id="tomoyo-download"><a href="../../download.html.en" title="Get TOMOYO Linux">Download</a></li>
<li id="tomoyo-changelogs"><a href="../../changelogs.html.en" title="TOMOYO Linux ChangeLogs">ChangeLogs</a></li>
<li id="tomoyo-documentation"><a href="../../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../../links.html.en" title="Links">Links</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="index.html.ja" title="Go to Japanese page">Japanese page</a></li>
</ul>
</div>

<div id="content">

<div id="documentation">

<h2>C6: Domain policy syntax</h2>

<h3><a name="file_execute">file execute</a></h3>

<p>This directive allows execution of the specified pathname.</p>

<p>This example allows the domain to execute "/bin/ls":</p>

<pre>
file execute /bin/ls
</pre>

<h3><a name="file_read">file read</a></h3>

<p>This directive allows the domain to open the specified pathname for reading.</p>

<p>This example allows the domain to read "/proc/meminfo":</p>

<pre>
file read /proc/meminfo
</pre>

<h3><a name="file_write">file write</a></h3>

<p>This directive allows the domain to open the specified pathname for writing.</p>

<p>This example allows the domain to write to "/dev/null":</p>

<pre>
file write /dev/null
</pre>

<h3><a name="file_append">file append</a></h3>

<p>This directive allows the domain to append to the specified pathname.</p>

<p>This example allows the domain to append to "/var/log/auth.log":</p>

<pre>
file append /var/log/auth.log
</pre>

<h3><a name="file_create">file create</a></h3>

<p>This directive allows the domain to create the specified pathname.</p>

<p>This example allows the domain to create "/var/lock/subsys/crond":</p>

<pre>
file create /var/lock/subsys/crond
</pre>

<h3><a name="file_unlink">file unlink</a></h3>

<p>This directive allows the domain to delete the specified pathname.</p>

<p>This example allows the domain to delete "/var/lock/subsys/crond":</p>

<pre>
file unlink /var/lock/subsys/crond
</pre>

<h3><a name="file_mkdir">file mkdir</a></h3>

<p>This directive allows the domain to create the specified directory.</p>

<p>This example allows the domain to create directories that match "/tmp/logwatch.\*/":</p>

<pre>
file mkdir /tmp/logwatch.\*/"
</pre>

<h3><a name="file_rmdir">file rmdir</a></h3>

<p>This directive allows the domain to delete the specified directory.</p>

<p>This example allows the domain to delete directories that match "/tmp/logwatch.\*/":</p>

<pre>
file rmdir /tmp/logwatch.\*/"
</pre>

<h3><a name="file_mkfifo">file mkfifo</a></h3>

<p>This directive allows the domain to create a FIFO with the specified pathname.</p>

<p>This example allows the domain to create the FIFO "/dev/initctl":</p>

<pre>
file mkfifo /dev/initctl
</pre>

<h3><a name="file_mksock">file mksock</a></h3>

<p>This directive allows the domain to create a socket with the specified pathname.</p>

<p>This example allows the domain to create the socket "/dev/log":</p>

<pre>
file mksock /dev/log
</pre>

<h3><a name="file_mkblock">file mkblock</a></h3>

<p>This directive allows the domain to create a block device with the specified pathname.</p>

<p>This example allows the domain to create block devices whose pathname matches "/dev/\*":</p>

<pre>
file mkblock /dev/\*
</pre>

<h3><a name="file_mkchar">file mkchar</a></h3>

<p>This directive allows the domain to create a character device with the specified pathname.</p>

<p>This example allows the domain to create character devices whose pathname matches "/dev/\*":</p>

<pre>
file mkchar /dev/\*
</pre>

<h3><a name="file_truncate">file truncate</a></h3>

<p>This directive allows the domain to truncate or extend the specified pathname.</p>

<p>This example allows the domain to truncate "/etc/mtab":</p>

<pre>
file truncate /etc/mtab
</pre>

<h3><a name="file_symlink">file symlink</a></h3>

<p>This directive allows the domain to symlink the specified pathname.</p>

<p>This example allows the domain to symlink "/dev/cdrom":</p>

<pre>
file symlink /dev/cdrom
</pre>

<h3><a name="file_link">file link</a></h3>

<p>This directive allows the domain to create hard linkÂ between the first and second specified pathnames.</p>

<p>This example allows a hard link to be created between pathnames that match "/etc/mtab~\$" and "/etc/mtab~":</p>

<pre>
file link /etc/mtab~\$ /etc/mtab~
</pre>

<h3><a name="file_rename">file rename</a></h3>

<p>This directive allows the domain to rename the first specified pathname to the second specified pathname.</p>

<p>This example allows /etc/mtab.tmp to be rename /etc/mtab:</p>

<pre>
file rename /etc/mtab.tmp /etc/mtab
</pre>

<h3><a name="file_ioctl">file ioctl</a></h3>

<p>This directive allows the domain to make an ioctl request with the specified options. For information on the ioctl command numbers, refer to manuals provided by each module with ioctl functionality.</p>

<p>This example allows sockets that match the family, type and protocol to make an ioctl request with command number 35093:</p>

<pre>
file ioctl socket:[family=2:type=2:protocol=17]
</pre>

<p>This example allows "/dev/null" to make an ioctl request with a command number within the range:</p>

<pre>
file ioctl /dev/null 10000-20000
</pre>

<h3><a name="file_mount">file mount</a></h3>

<p>This directive allows the domain to mount a filesystem with the specified devices, pathnames and options.</p>

<p>The syntax is: "<strong>file mount $DEVICE $MOUNTPOINT $FILESYSTEM $OPTIONS</strong>". If $FILESYSTEM requires a device file, then the $DEVICE pathname must start with "/" and must not contain symbolic links, "//", "/./" or /../". The $OPTIONS must be a hexadecimal integer expression. The following options can also be specified:</p>

<ul>
<li>--bind</li>
<li>--move</li>
<li>--remount</li>
<li>--make-unbindable</li>
<li>--make-private</li>
<li>--make-slave</li>
<li>--make-shared</li>
</ul>

<p>This example allows the domain to remount the root directory:</p>

<pre>
file mount any / --remount 0x0
</pre>

<p>This example allows the domain to mount "/dev/hdc" at "/var/www/":</p>

<pre>
file mount /dev/hdc /var/www/ ext3 0xF
</pre>

<p>This example allows the domain to mount "/dev/shm/" as a temporary filesystem:</p>

<pre>
file mount none /dev/shm/ tmpfs 0xE
</pre>

<h3><a name="file_unmount">file unmount</a></h3>

<p>This directive allows the domain to unmount a filesystem from the specified pathname. This pathname must start with "/" and must not contain symbolic links, "//", "/./" or "/../".</p>

<p>This example allows the domain to umount the filesystem mounted at "/mnt/cdrom":</p>

<pre>
file unmount /mnt/cdrom
</pre>

<h3><a name="file_chroot">file chroot</a></h3>

<p>This directive allows the domain to chroot into the specified pathname.</p>

<p>This example allows the domain to chroot into /var/empty/sshd:</p>

<pre>
file chroot /var/empty/sshd
</pre>

<h3><a name="file_pivot_root">file pivot_root</a></h3>

<p>This directive allows the domain to pivot_root to the first directory from the second directory. The directory pathname must start and end with "/" and must not contain symbolic links, "//", "/./" or "/../".</p>

<p>pivot_root() is only called once for switching the root directory from initrd/initramfs to the hard drive, which occurs before TOMOYO Linux has been activated. It is therefore unlikely that you will need this directive.</p>

<p>This example will grant "pivot_root()("/proc/","/proc/ccs/");":</p>

<pre>
file pivot_root proc:/ proc:/ccs/
</pre>

<h3><a name="misc_env">misc env</a></h3>

<p>This directive allows the domain to read the specified environment variable. Many programs behave differently depending on the environment variables.</p>

<p>This example allows the domain to read the environment variable "LD_PRELOAD":</p>

<pre>
misc env LD_PRELOAD
</pre>

<h3><a name="capability">capability</a></h3>

<p>This directive allows the domain to make use of the specified POSIX Capability.</p>

<p>The syntax is summarised in this table:</p>

<div class="simple-table">
<table>
<tr>
<th><p>Directive</p></th>
<th><p>Function</p></th>
</tr>
<tr>
<td><p>capability use_kernel_module</p></td>
<td><p>Use of the create_module(2), init_module(2) and delete_module(2) syscalls</p></td>
</tr>
<tr>
<td><p>capability use_packet</p></td>
<td><p>Use of PACKET sockets</p></td>
</tr>
<tr>
<td><p>capability use_route</p></td>
<td><p>Use of ROUTE sockets</p></td>
</tr>
<tr>
<td><p>capability SYS_KEXEC_LOAD</p></td>
<td><p>Use of kexec_load(2) syscall</p></td>
</tr>
<tr>
<td><p>capability SYS_NICE</p></td>
<td><p>Use of nice(2) and setpriority(2) syscalls</p></td>
</tr>
<tr>
<td><p>capability SYS_PTRACE</p></td>
<td><p>Use of ptrace(2) syscall</p></td>
</tr>
<tr>
<td><p>capability SYS_REBOOT</p></td>
<td><p>Use of reboot(2) syscall</p></td>
</tr>
<tr>
<td><p>capability SYS_SETHOSTNAME</p></td>
<td><p>Use of sethostname(2) and setdomainname(2) syscalls</p></td>
</tr>
<tr>
<td><p>capability SYS_TIME</p></td>
<td><p>Use of stime(2), settimeofday(2) and adjtimex(2) syscalls</p></td>
</tr>
<tr>
<td><p>capability SYS_VHANGUP</p></td>
<td><p>Use of vhangup(2) syscall</p></td>
</tr>
</table>
</div>

<p>This example allows the domain to use the SYS_REBOOT capability:</p>

<pre>
capability SYS_REBOOT
</pre>

<h3><a name="ipc_signal">ipc signal</a></h3>

<p>This directive allows the domain to use the inter-process communication signal number specified and the target domain specified.</p>

<p>All domains that start with the target domain are matched. Thus, a target domain of "&lt;kernel&gt;" will match all domains. A signal number of 0 is always granted, and if the source and target destination are the same it is always granted.</p>

<h3><a name="network_inet">network inet</a></h3>

<p>This directive allows the domain to perform network socket operations.</p>

<p>The syntax is summarised in the following table:</p>

<div class="simple-table">
<table>
<tr>
<th><p>Directive</p></th>
<th><p>Function</p></th>
</tr>
<tr>
<td><p>network inet stream bind $ADDRESS $PORT</p></td>
<td><p>Bind to specified local TCP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet stream listen $ADDRESS $PORT</p></td>
<td><p>Listen to specified local TCP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet stream accept $ADDRESS $PORT</p></td>
<td><p>Accept communication from specified local TCP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet stream connect $ADDRESS $PORT</p></td>
<td><p>Initiate communication with specified local TCP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet dgram bind $ADDRESS $PORT</p></td>
<td><p>Bind to specified local UDP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet dgram recv $ADDRESS $PORT</p></td>
<td><p>Receive UDP packets from specified UDP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet dgram send $ADDRESS $PORT</p></td>
<td><p>Send UDP packets to specified UDP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet raw bind $ADDRESS $PORT</p></td>
<td><p>Bind to specified local IP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet raw recv $ADDRESS $PORT</p></td>
<td><p>Receive IP packets from specified IP address at specified port</p></td>
</tr>
<tr>
<td><p>network inet raw send $ADDRESS $PORT</p></td>
<td><p>Send IP packets to specified IP address at specified port</p></td>
</tr>
</table>
</div>

<p>This example allows the domain to connect via http to the specified IP address:</p>

<pre>
network inet stream connect 202.221.179.21 80
</pre>

<h3><a name="network_unix">network unix</a></h3>

<p>This directive allows the domain to perform unix domain socket operations.</p>

<h3><a name="use_group">use_group</a></h3>

<p>This directive allows the domain to inherit permissions defined for the specified group. These permissions are defined in exception policy.</p>

<p>This example allows the domain to read "/dev/null":</p>

</p>In exception policy:</p>
<pre>
acl_group 2 file read /dev/null
</pre>

<p>In domain policy:</p>
<pre>
use_group 2
</pre>

<h3><a name="use_profile">use_profile</a></h3>

<p>This directive is changes the profile number of the domain.</p>

<p>This example changes the profile number of the domain to 3:</p>

<pre>
use_profile 3
</pre>

<h3><a name="task_auto_execute_handler">task auto_execute_handler</a></h3>

<p>This directive causes executions from the domain to be handled by an external program, as specified by the directive. When an execute request is made within this domain, the specified external program is executed instead. This then decides whether it is appropriate to continue.</p>

<p>This example causes the program "/usr/sbin/check-and-exec" to be launched whenever the domain makes an execute request:</p>

<pre>
task auto_execute_handler /usr/sbin/check-and-exec
</pre>

<h3><a name="task_denied_execute_handler">task denied_execute_handler</a></h3>

<p>This directive causes an external program, as specified by the directive, to be launched when executions within the domain have been rejected by policy.</p>

<p>This example causes the program "/bin/true" to be launched whenever an execution request from the domain is rejected by policy:</p>

<pre>
task denied_execute_handler /bin/true
</pre>

<h3><a name="task_auto_domain_transition">task auto_domain_transition</a></h3>

<p>This directive causes a domain transition to occur when the specified conditions have been met. This can be used to split permissions without requiring an execution.</p>

<h3><a name="task_manual_domain_transition">task manual_domain_transition</a></h3>

<p>This directive causes a domain transition to occur when the application writes a domain name to the "/proc/ccs/self_domain" interface. This can be used to split permissions without requiring an execution, but the application must be modified to write to the interface at the appropriate time.</p>

<h3><a name="quota_exceeded">quota_exceeded</a></h3>

<p>This directive indicates that the domain has failed to append an entry while in "Learning Mode" due to the <a href="section-4.html.en#4.2">max_learning_entry</a> value being reached.</p>

<h3><a name="transition_failed">transition_failed</a></h3>

<p>This directive indicates that a process within this domain was not able to undergo a domain transition following an execute request.</p>

<p>This occurs due to either the name of the domain being too long, or the kernel being unable to allocate memory. To fix this, either suppress domain transitions or increase the memory quota.</p>

</div><!-- documentation -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
<a href="section-5.html.en">Prev</a>
</td>
<td class="docs-index">
<a href="index.html.en">Index</a>
</td>
<td class="docs-next">
<a href="section-7.html.en">Next</a>
</td>
</tr>
<tr>
<td class="docs-previous-description">
<p>C5: Exception policy syntax</p>
</td>
<td class="docs-home">
<a href="../index.html.en">Main Index</a>
</td>
<td class="docs-next-description">
<p>C7: Domain transition procedure</p>
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="index.html.ja">Japanese page</a>.</p>
<p class="timestamp">Last modified: $Date: 2011-02-02 00:15:57 +0000 (Wed, 02 Feb 2011) $</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</div>

</body>
</html>
