<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>Policy Specifications of TOMOYO Linux</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p style="text-align:right;"><a href="policy-reference.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date: 2010-07-10 17:47:19 +0900 (Sat, 10 Jul 2010) $</p>
<h1 style="text-align:center;">Policy Specifications of TOMOYO Linux</h1>
<h1><a name="index">Index</a></h1>
<h2>1. <a href="#Keyword_Index">Keywords Index</a></h2>
<h2>2. <a href="#Common_Rules">Introduction</a></h2>
<p>2.1 <a href="#word_expression_rules">Word Expression Rules</a></p>
<p>2.2 <a href="#wildcard_expression_rules">Wildcard Expression Rules</a></p>
<p>2.3 <a href="#memory_usage_infomation">Memory Usage Information</a></p>
<h2>3. <a href="#Policy_Files">Policy Files</a></h2>
<p>3.1 <a href="#policy_file_locations">Policy File's Location</a></p>
<p>3.2 <a href="#policy_file_modifiers">Policy File's Modification</a></p>
<h2>4. <a href="#Domain_Rules">Domain Rules</a></h2>
<p>4.1 <a href="#domain_definition">Domain Definition</a></p>
<p>4.2 <a href="#domain_transition">Domain Transition</a></p>
<h2>5. <a href="#Syntax_Details">Syntax Details</a></h2>
<h2>6. <a href="#Advanced_Features">Advanced Features</a></h2>
<p>6.1 <a href="#non_root_policy_update">Allowing policy modification by non root user.</a></p>
<hr>

<h1>1. <a name="Keyword_Index">Keywords Index</a></h1>

<p>Used by /sys/kernel/security/tomoyo/profile and /etc/tomoyo/profile.conf</p>

<ul>
<li><a href="#profile_CONFIG::file::execute">CONFIG::file::execute</a></li>
<li><a href="#profile_CONFIG::file::open">CONFIG::file::open</a></li>
<li><a href="#profile_CONFIG::file::create">CONFIG::file::create</a></li>
<li><a href="#profile_CONFIG::file::unlink">CONFIG::file::unlink</a></li>
<li><a href="#profile_CONFIG::file::mkdir">CONFIG::file::mkdir</a></li>
<li><a href="#profile_CONFIG::file::rmdir">CONFIG::file::rmdir</a></li>
<li><a href="#profile_CONFIG::file::mkfifo">CONFIG::file::mkfifo</a></li>
<li><a href="#profile_CONFIG::file::mksock">CONFIG::file::mksock</a></li>
<li><a href="#profile_CONFIG::file::truncate">CONFIG::file::truncate</a></li>
<li><a href="#profile_CONFIG::file::symlink">CONFIG::file::symlink</a></li>
<li><a href="#profile_CONFIG::file::rewrite">CONFIG::file::rewrite</a></li>
<li><a href="#profile_CONFIG::file::mkblock">CONFIG::file::mkblock</a></li>
<li><a href="#profile_CONFIG::file::mkchar">CONFIG::file::mkchar</a></li>
<li><a href="#profile_CONFIG::file::link">CONFIG::file::link</a></li>
<li><a href="#profile_CONFIG::file::rename">CONFIG::file::rename</a></li>
<li><a href="#profile_CONFIG::file::chmod">CONFIG::file::chmod</a></li>
<li><a href="#profile_CONFIG::file::chown">CONFIG::file::chown</a></li>
<li><a href="#profile_CONFIG::file::chgrp">CONFIG::file::chgrp</a></li>
<li><a href="#profile_CONFIG::file::ioctl">CONFIG::file::ioctl</a></li>
<li><a href="#profile_CONFIG::file::chroot">CONFIG::file::chroot</a></li>
<li><a href="#profile_CONFIG::file::mount">CONFIG::file::mount</a></li>
<li><a href="#profile_CONFIG::file::umount">CONFIG::file::umount</a></li>
<li><a href="#profile_CONFIG::file::pivot_root">CONFIG::file::pivot_root</a></li>
<li><a href="#profile_PREFERENCE::learning">PREFERENCE::learning</a></li>
<li><a href="#profile_PREFERENCE::permissive">PREFERENCE::permissive</a></li>
<li><a href="#profile_PREFERENCE::enforcing">PREFERENCE::enforcing</a></li>
</ul>

<p>Used by /sys/kernel/security/tomoyo/exception_policy and /etc/tomoyo/exception_policy.conf</p>

<ul>
<li><a href="#exception_policy_aggregator">aggregator</a></li>
<li><a href="#exception_policy_initialize_domain">initialize_domain</a></li>
<li><a href="#exception_policy_no_initialize_domain">no_initialize_domain</a></li>
<li><a href="#exception_policy_keep_domain">keep_domain</a></li>
<li><a href="#exception_policy_no_keep_domain">no_keep_domain</a></li>
<li><a href="#exception_policy_file_pattern">file_pattern</a></li>
<li><a href="#exception_policy_path_group">path_group</a></li>
<li><a href="#exception_policy_number_group">number_group</a></li>
<li><a href="#exception_policy_allow_read">allow_read</a></li>
<li><a href="#exception_policy_deny_rewrite">deny_rewrite</a></li>
</ul>

<p>Used by /sys/kernel/security/tomoyo/domain_policy and /etc/tomoyo/domain_policy.conf</p>

<ul>
<li><a href="#domain_policy_allow_execute">allow_execute</a></li>
<li><a href="#domain_policy_allow_read">allow_read</a></li>
<li><a href="#domain_policy_allow_write">allow_write</a></li>
<li><a href="#domain_policy_allow_read/write">allow_read/write</a></li>
<li><a href="#domain_policy_allow_create">allow_create</a></li>
<li><a href="#domain_policy_allow_unlink">allow_unlink</a></li>
<li><a href="#domain_policy_allow_mkdir">allow_mkdir</a></li>
<li><a href="#domain_policy_allow_rmdir">allow_rmdir</a></li>
<li><a href="#domain_policy_allow_mkfifo">allow_mkfifo</a></li>
<li><a href="#domain_policy_allow_mksock">allow_mksock</a></li>
<li><a href="#domain_policy_allow_mkblock">allow_mkblock</a></li>
<li><a href="#domain_policy_allow_mkchar">allow_mkchar</a></li>
<li><a href="#domain_policy_allow_truncate">allow_truncate</a></li>
<li><a href="#domain_policy_allow_symlink">allow_symlink</a></li>
<li><a href="#domain_policy_allow_link">allow_link</a></li>
<li><a href="#domain_policy_allow_rename">allow_rename</a></li>
<li><a href="#domain_policy_allow_rewrite">allow_rewrite</a></li>
<li><a href="#domain_policy_allow_ioctl">allow_ioctl</a></li>
<li><a href="#domain_policy_allow_mount">allow_mount</a></li>
<li><a href="#domain_policy_allow_unmount">allow_unmount</a></li>
<li><a href="#domain_policy_allow_chroot">allow_chroot</a></li>
<li><a href="#domain_policy_allow_pivot_root">allow_pivot_root</a></li>
<li><a href="#domain_policy_use_profile">use_profile</a></li>
<li><a href="#domain_policy_ignore_global_allow_read">ignore_global_allow_read</a></li>
<li><a href="#domain_policy_quota_exceeded">quota_exceeded</a></li>
<li><a href="#domain_policy_transition_failed">transition_failed</a></li>
</ul>

<p>Used by /sys/kernel/security/tomoyo/manager and /etc/tomoyo/manager.conf</p>

<ul>
<li><a href="#manager_manage_by_non_root">manage_by_non_root</a></li>
</ul>

<h1>2. <a name="Common_Rules">Introduction</a></h1>

<h2>2.1 <a name="word_expression_rules">Word Expression Rules</a></h2>

<p>TOMOYO Linux performs pathname based access control. A pathname may contain not only alphabet and number but also space and carriage return and multibyte  (e.g. kanji) characters. Thus, to be able to handle any characters correctly,
TOMOYO Linux follows the rules shown below to represent a word.</p>

<ul>
<li>NUL character (0x00) is used for indicating end of string. Thus you cannot include \000 in a word.</li>
<li>\ character (0x5C) is used for indicating octal expression. Thus, you need to use \\ to represent a \.</li>
<li>Characters 0x01 - 0x20 and 0x7F - 0xFF are represented using octal expression \ooo .</li>
<li>The rest characters (i.e. 0x21 - 0x5B and 0x5D - 0x7E) are represented as is.</li>
</ul>

<table border="1">
<tr><td><table><tr><td></td><td>Lower 4 bits</td></tr><tr><td>Higher 4 bits</td><td></td></tr></table></td><td>0x0</td><td>0x1</td><td>0x2</td><td>0x3</td><td>0x4</td><td>0x5</td><td>0x6</td><td>0x7</td><td>0x8</td><td>0x9</td><td>0xA</td><td>0xB</td><td>0xC</td><td>0xD</td><td>0xE</td><td>0xF</td></tr>
<tr><td>0x0</td><td></td><td>\001</td><td>\002</td><td>\003</td><td>\004</td><td>\005</td><td>\006</td><td>\007</td><td>\010</td><td>\011</td><td>\012</td><td>\013</td><td>\014</td><td>\015</td><td>\016</td><td>\017</td></tr>
<tr><td>0x1</td><td>\020</td><td>\021</td><td>\022</td><td>\023</td><td>\024</td><td>\025</td><td>\026</td><td>\027</td><td>\030</td><td>\031</td><td>\032</td><td>\033</td><td>\034</td><td>\035</td><td>\036</td><td>\037</td></tr>
<tr><td>0x2</td><td>\040</td><td>!</td><td>"</td><td>#</td><td>$</td><td>%</td><td>&amp;</td><td>'</td><td>(</td><td>)</td><td>*</td><td>+</td><td>,</td><td>-</td><td>.</td><td>/</td></tr>
<tr><td>0x3</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>9</td><td>:</td><td>;</td><td>&lt;</td><td>=</td><td>&gt;</td><td>?</td></tr>
<tr><td>0x4</td><td>@</td><td>A</td><td>B</td><td>C</td><td>D</td><td>E</td><td>F</td><td>G</td><td>H</td><td>I</td><td>J</td><td>K</td><td>L</td><td>M</td><td>N</td><td>O</td></tr>
<tr><td>0x5</td><td>P</td><td>Q</td><td>R</td><td>S</td><td>T</td><td>U</td><td>V</td><td>W</td><td>X</td><td>Y</td><td>Z</td><td>[</td><td>\\</td><td>]</td><td>^</td><td>_</td></tr>
<tr><td>0x6</td><td>`</td><td>a</td><td>b</td><td>c</td><td>d</td><td>e</td><td>f</td><td>g</td><td>h</td><td>i</td><td>j</td><td>k</td><td>l</td><td>m</td><td>n</td><td>o</td></tr>
<tr><td>0x7</td><td>p</td><td>q</td><td>r</td><td>s</td><td>t</td><td>u</td><td>v</td><td>w</td><td>x</td><td>y</td><td>z</td><td>{</td><td>|</td><td>}</td><td>~</td><td>\177</td></tr>
<tr><td>0x8</td><td>\200</td><td>\201</td><td>\202</td><td>\203</td><td>\204</td><td>\205</td><td>\206</td><td>\207</td><td>\210</td><td>\211</td><td>\212</td><td>\213</td><td>\214</td><td>\215</td><td>\216</td><td>\217</td></tr>
<tr><td>0x9</td><td>\220</td><td>\221</td><td>\222</td><td>\223</td><td>\224</td><td>\225</td><td>\226</td><td>\227</td><td>\230</td><td>\231</td><td>\232</td><td>\233</td><td>\234</td><td>\235</td><td>\236</td><td>\237</td></tr>
<tr><td>0xA</td><td>\240</td><td>\241</td><td>\242</td><td>\243</td><td>\244</td><td>\245</td><td>\246</td><td>\247</td><td>\250</td><td>\251</td><td>\252</td><td>\253</td><td>\254</td><td>\255</td><td>\256</td><td>\257</td></tr>
<tr><td>0xB</td><td>\260</td><td>\261</td><td>\262</td><td>\263</td><td>\264</td><td>\265</td><td>\266</td><td>\267</td><td>\270</td><td>\271</td><td>\272</td><td>\273</td><td>\274</td><td>\275</td><td>\276</td><td>\277</td></tr>
<tr><td>0xC</td><td>\300</td><td>\301</td><td>\302</td><td>\303</td><td>\304</td><td>\305</td><td>\306</td><td>\307</td><td>\310</td><td>\311</td><td>\312</td><td>\313</td><td>\314</td><td>\315</td><td>\316</td><td>\317</td></tr>
<tr><td>0xD</td><td>\320</td><td>\321</td><td>\322</td><td>\323</td><td>\324</td><td>\325</td><td>\326</td><td>\327</td><td>\330</td><td>\331</td><td>\332</td><td>\333</td><td>\334</td><td>\335</td><td>\336</td><td>\337</td></tr>
<tr><td>0xE</td><td>\340</td><td>\341</td><td>\342</td><td>\343</td><td>\344</td><td>\345</td><td>\346</td><td>\347</td><td>\350</td><td>\351</td><td>\352</td><td>\353</td><td>\354</td><td>\355</td><td>\356</td><td>\357</td></tr>
<tr><td>0xF</td><td>\360</td><td>\361</td><td>\362</td><td>\363</td><td>\364</td><td>\365</td><td>\366</td><td>\367</td><td>\370</td><td>\371</td><td>\372</td><td>\373</td><td>\374</td><td>\375</td><td>\376</td><td>\377</td></tr>
</table>

<ul>
<li>Space character (0x20) is used as a delimiter that separates words. Line feed character (0x0A) is used as a delimiter that separates lines.</li>
<li>Only words that follow the rule above and the delimiters (i.e. space character and line feed characters) are valid. All other characters are regarded as space character. Multiple spaces are automatically compressed into one space. Leading and trailing spaces are automatically deleted.</li>
</ul>

<p>Some examples are shown below.</p>

<table border="1">
<tr><td>Word</td><td>Correct expression</td><td>Wrong expression</td></tr>
<tr><td>Hello world!</td><td>Hello\040world!</td><td>"Hello world!"</td></tr>
<tr><td>/home/user/Documents and Settings/</td><td>/home/user/Documents\040and\040Settings/</td><td>/home/user/Documents and Settings/</td></tr>
</table>

<p>Pathname must start with / character. Pathnames that end with / character are interpreted as directories, and that don't end with / character are interpreted as non-directories.</p>

<table border="1">
<tr><td>Pathname</td><td>Interpretation</td></tr>
<tr><td>/</td><td>A directory</td></tr>
<tr><td>/tmp/</td><td>A directory</td></tr>
<tr><td>/tmp</td><td>Not a directory</td></tr>
<tr><td>tmp/</td><td>Invalid pathname</td></tr>
</table>

<p>Exceptions are pipes and sockets. Pipes begin with "pipe:" and sockets begin with "socket:" when these pathnames are accessed via /proc/PID/fd/ directory.</p>

<h2>2.2 <a name="wildcard_expression_rules">Wildcard Expression Rules</a></h2>

<p>Like temporary files, pathnames may contain randomly selected characters. Thus, you often need to define pathnames using wildcards. TOMOYO Linux supports wildcards shown below.</p>

<table border="1">
<tr><td>Wildcard</td><td>Meaning</td><td>Example</td></tr>
<tr><td>\*</td><td>Zero or more repetitions of characters other than '/'.</td><td>/var/log/samba/\*</td></tr>
<tr><td>\@</td><td>Zero or more repetitions of characters other than '/' or '.'.</td><td>/var/www/html/\@.html</td></tr>
<tr><td>\?</td><td>1 byte character other than '/'.</td><td>/tmp/mail.\?\?\?\?\?\?</td></tr>
<tr><td>\$</td><td>One or more repetitions of decimal digits.</td><td>/proc/\$/cmdline</td></tr>
<tr><td>\+</td><td>1 decimal digit.</td><td>/var/tmp/my_work.\+</td></tr>
<tr><td>\X</td><td>One or more repetitions of hexadecimal digits.</td><td>/var/tmp/my-work.\X</td></tr>
<tr><td>\x</td><td>1 hexadecimal digit.</td><td>/tmp/my-work.\x</td></tr>
<tr><td>\A</td><td>One or more repetitions of alphabet characters.</td><td>/var/log/my-work/\$-\A-\$.log</td></tr>
<tr><td>\a</td><td>1 alphabet character.</td><td>/home/users/\a/\*/public_html/\*.html</td></tr>
<tr><td>\-</td><td>Pathname subtraction operator.</td><td>
 <ul>
 <li>/etc/\* for all files in /etc/ directory.</li>
 <li>/etc/\*\-\*shadow\* for /etc/\* other than /etc/\*shadow\*</li>
 <li>/\*\-proc\-sys/ for /\*/ other than /proc/ /sys/</li>
 </ul>
</td></tr>
<tr><td>/\{dir\}/</td><td>Recursive directory matching operator which matches '/' + one or more repetitions of 'dir/'.</td><td>
 <ul>
  <li>/var/www/html/\{\*\}/\*.html for /var/www/html/\*/\*.html /var/www/html/\*/\*/\*.html /var/www/html/\*/\*/\*/\*.html etc.</li>
  <li>/home/\*/\{\*\-.\*\}/\* for /home/\*/\*\-.\*/\* /home/\*/\*\-.\*/\*\-.\*/\* /home/\*/\*\-.\*/\*\-.\*/\*\-.\*/\* etc.</li>
 </ul>
</td></tr>
</table>

<h2>2.3 <a name="memory_usage_infomation">Memory Usage Information</a></h2>

<p>The memory used by TOMOYO Linux can be obtained via /sys/kernel/security/tomoyo/meminfo . The unit is byte.</p>

<table border="1">
<tr><td>
# cat /sys/kernel/security/tomoyo/meminfo<br>
Policy:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;377376<br>
Query&nbsp;lists:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0<br>
Total:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;377376
</td></tr>
</table>

<ul>
<li>Policy:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Memory used for holding access permissions.</li>
<li>Query lists:&nbsp;&nbsp;Memory used for handling policy violation in enforcing mode.</li>
</ul>

<p>TOMOYO Linux supports memory quota for limiting maximum memory used by TOMOYO Linux.</p>

<p>You can set memory quota by writing to /etc/tomoyo/meminfo.conf .</p>

<table border="1">
<tr><td>
# cat /etc/tomoyo/meminfo.conf<br>
Policy:     16777216<br>
Query lists: 1048576
</td></tr>
</table>

<h1>3. <a name="Policy_Files">Policy Files</a></h1>

<h2>3.1 <a name="policy_file_locations">Policy File's Location</a></h2>

<p>Policy files are files that contain access permissions. These files are automatically loaded into the kernel upon boot.</p>

<p>When a system boots, /sbin/init is executed. When the execution of /sbin/init is requested and if /sbin/tomoyo-init exists, /sbin/tomoyo-init is executed, and /sbin/init is executed after /sbin/tomoyo-init terminates.</p>

<p> /sbin/tomoyo-init loads policy files in /etc/tomoyo/ directory via the kernel's /sys/kernel/security/tomoyo/ interface.</p>

<table border="1">
<tr><td>The kernel's interface</td><td>Policy file</td><td>Contents</td></tr>
<tr><td><a href="#profile">/sys/kernel/security/tomoyo/profile</a></td><td>/etc/tomoyo/profile.conf</td><td>Profiles (Collection of access control levels)</td></tr>
<tr><td><a href="#manager">/sys/kernel/security/tomoyo/manager</a></td><td>/etc/tomoyo/manager.conf</td><td>Managers (Programs that can modify policy via /sys/kernel/security/tomoyo/ interface)</td></tr>
<tr><td><a href="#exception_policy">/sys/kernel/security/tomoyo/exception_policy</a></td><td>/etc/tomoyo/exception_policy.conf</td><td>Exception policy (Collection of exceptions for domain policy)</td></tr>
<tr><td><a href="#domain_policy">/sys/kernel/security/tomoyo/domain_policy</a></td><td>/etc/tomoyo/domain_policy.conf</td><td>Domain policy (Access permissions given to individual domains)</td></tr>
<tr><td><a href="#meminfo">/sys/kernel/security/tomoyo/meminfo</a></td><td>/etc/tomoyo/meminfo.conf</td><td>Memory usage and quota.</td></tr>
</table>

<p>There are more interfaces for obtaining information. These interfaces don't have corresponding policy files.</p>

<table border="1">
<tr><td>The kernel's interface</td><td>Meaning</td></tr>
<tr><td><a href="#query">/sys/kernel/security/tomoyo/query</a></td><td>Access requests that are waiting for administrator's decision.</td></tr>
<tr><td><a href="#.domain_status">/sys/kernel/security/tomoyo/.domain_status</a></td><td>The list of domainnames and profile numbers currently defined in domain policy.</td></tr>
<tr><td><a href="#self_domain">/sys/kernel/security/tomoyo/self_domain</a></td><td>The name of domain the current process belongs to.</td></tr>
<tr><td><a href="#.process_status">/sys/kernel/security/tomoyo/.process_status</a></td><td>The list of domainnames and profile numbers currently running processes belongs to.</td></tr>
<tr><td><a href="#version">/sys/kernel/security/tomoyo/version</a></td><td>Version of TOMOYO Linux.</td></tr>
</table>

<h2>3.2 <a name="policy_file_modifiers">Policy File's Modification</a></h2>

<p>Register the name of programs or domains that can modify policy via the kernel's /sys/kernel/security/tomoyo/ interface. Only</p>

<ul>
<li>Processes with programs listed in /sys/kernel/security/tomoyo/manager</li>
<li>Processes with domainnames listed in /sys/kernel/security/tomoyo/manager</li>
</ul>

<p>can modify policy via the kernel's /sys/kernel/security/tomoyo/ interface. Some examples are show below.</p>

<table border="1">
<tr><td>
# cat /sys/kernel/security/tomoyo/manager<br>
/usr/sbin/tomoyo-loadpolicy<br>
/usr/sbin/tomoyo-editpolicy<br>
/usr/sbin/tomoyo-setlevel<br>
/usr/sbin/tomoyo-setprofile<br>
/usr/sbin/tomoyo-ld-watch<br>
/usr/sbin/tomoyo-queryd<br>
&lt;kernel&gt; /sbin/mingetty /bin/login /bin/bash
</td></tr>
</table>

<p>By default, only processes with UID = 0 and EUID = 0 can modify policy via this interface. But by doing configurations described in <a href="#non_root_policy_update">Allowing policy modification by non root user.</a>, non root user can modify policy via this interface.</p>

<p>Exception is, processes that belong to domains with profiles for learning mode can append access permissions to <a href="#domain_policy">/sys/kernel/security/tomoyo/domain_policy</a> by simply requesting the access.</p>

<h1>4. <a name="Domain_Rules">Domain Rules</a></h1>

<h2>4.1 <a name="domain_definition">Domain Definition</a></h2>

<p>TOMOYO Linux gives access permissions as per a domain. It is managed via <a href="#domain_policy">/sys/kernel/security/tomoyo/domain_policy</a>.</p>

<p>In TOMOYO Linux, every process belongs to a single domain, and all programs belong to different domain. Even the two processes are executing the same program, if their previous domains differ, they belong to different domain.</p>

<p>All domains are defined originating from "&lt;kernel&gt;" domain, which the kernel process belongs to. Since /sbin/init is invoked by the "&lt;kernel&gt;" domain, the domain for /sbin/init is defined as "&lt;kernel&gt; /sbin/init". Since /etc/rc.d/rc is invoked by /sbin/init invoked by the kernel, the domain for /etc/rc.d/rc is defined as "&lt;kernel&gt; /sbin/init /etc/rc.d/rc".</p>

<h2>4.2 <a name="domain_transition">Domain Transition</a></h2>

<p>When a process tries to execute a program, the steps shown below are performed.</p>

<table border="1">
<tr><td>Step</td><td>Procedure</td></tr>
<tr><td>Getting program's name</td><td>
<p>Get the name of program that the process is going to execute and keep it as "Candidate". This procedure does not solve symbolic link if the program is a symbolic link.</p>
</td></tr>
<tr><td>Aggregating similar programs</td><td>
<p>Search exception policy for</p>

<ul>
<li>aggregator "Candidate" "aggregated name"
</ul>

<p>and if found one, replace "Candidate" with "aggregated name".</p>
</td></tr>
<tr><td><a name="exec_stage_check_execute">Checking permission</a></td><td>
<p>Search domain policy for</p>

<ul>
<li>allow_execute "Candidate"
<li>allow_execute @"a pathname group containing Candidate"
</ul>

<p>and deny the execute request if not found one.</p>
</td></tr>
<tr><td><a name="exec_stage_check_destination">Deciding destination domain</a></td><td>

<p>(1) Search exception policy for</p>

<ul>
<li>no_initialize_domain "Candidate" from "the name of the domain the current process belongs to"
<li>no_initialize_domain "Candidate" from "the last part of the name of the domain the current process belongs to"
<li>no_initialize_domain "Candidate"
</ul>

<p>and if found one, jump to (3).</p>

<p>(2) Search exception policy for</p>

<ul>
<li>initialize_domain "Candidate" from "the name of the domain the current process belongs to"
<li>initialize_domain "Candidate" from "the last part of the name of the domain the current process belongs to"
<li>initialize_domain "Candidate"
</ul>

<p>and if found one, concatenate "the name of the domain that the kernel belongs to (i.e. &lt;kernel&gt;)" and "Candidate" and keep the result as destination domain, then jump to (6).</p>

<p>(3) Search exception policy for</p>

<ul>
<li>no_keep_domain "Candidate" from "the name of the domain the current process belongs to"
<li>no_keep_domain "Candidate" from "the last part of the name of the domain the current process belongs to"
<li>no_keep_domain "the name of the domain the current process belongs to"
<li>no_keep_domain "the last part of the name of the domain the current process belongs to"
</ul>

<p>and if found one, jump to (5).</p>

<p>(4) Search exception policy for</p>

<ul>
<li>keep_domain "Candidate" from "the name of the domain the current process belongs to"
<li>keep_domain "Candidate" from "the last part of the name of the domain the current process belongs to"
<li>keep_domain "the name of the domain the current process belongs to"
<li>keep_domain "the last part of the name of the domain the current process belongs to"
</ul>

<p>and if found one, set "the name of the domain the current process belongs to" as destination domain, then jump to (6).</p>

<p>(5) Concatenate "the name of the domain the current process belongs to" and "Candidate" and keep the result as destination domain.</p>

<p>(6) Check whether the destination domain is defined, and deny the execute request if not.</p>

</td></tr>
<tr><td>Execute program</td><td>

<p>Perform regular steps for executing program. If successfully completed, the process transits to destination domain.</p>

</td></tr>
</table>

<h1>5. <a name="Syntax_Details">Syntax Details</a></h1>

<h2><a name="profile">/sys/kernel/security/tomoyo/profile</a></h2>

<p>TOMOYO Linux can perform several MACs besides MAC for files, but to reduce the load of policy managements, you can disable MACs you think unnecessary.</p>

<p>List up functions and their modes in "$number-$variable=$value" format. The $number is profile number between 0 and 255. To modify profile, use "tomoyo-setlevel" or "tomoyo-loadpolicy" commands.</p>

<p>Each domain is assigned one profile. To assign profile to domains, use "setprofile" or "tomoyo-editpolicy" or "tomoyo-loadpolicy" commands.</p>

<p>You can see profiles currently assigned to domains using "tomoyo-editpolicy" command.<br>
You can see profiles currently assigned to processes using "tomoyo-pstree" command.<br>
If you saved current policy using "tomoyo-savepolicy" command, the currently assigned profile number is saved as <a href="#domain_policy_use_profile">use_profile</a> line of domain policy.</p>

<p>To read or modify current profiles, operate like below.</p>

<p>(Example)<br>
cat /sys/kernel/security/tomoyo/profile<br>
tomoyo-savepolicy -p<br>
tomoyo-setlevel 1-CONFIG::file::execute=learning<br>
echo 1-CONFIG::file::execute=learning | tomoyo-loadpolicy -p</p>

<p>See also: <a href="#policy_file_modifiers">Policy File's Modification</a></p>

<p>You can specify one of modes shown below for functionalities that start with "CONFIG".</p>

<table border="1">
<tr><td>Configuration</td><td>Meaning</td></tr>
<tr><td>mode=disabled</td><td>Disabled. Works as if regular kernel.</td></tr>
<tr><td>mode=learning</td><td>Learning mode. An access request is not rejected even if the request violates policy. Also, the permission to allow the request is automatically added to policy so that the same request no longer violates policy.</td></tr>
<tr><td>mode=permissive</td><td>Permissive mode. An access request is not rejected even if the request violates policy. But, the permission to allow the request is not added to policy.</td></tr>
<tr><td>mode=enforcing</td><td>Enforcing mode. An access request is rejected if the request violates policy.</td></tr>
</table>

<h3><a name="profile_CONFIG::file::execute">CONFIG::file::execute</a></h3>

<p>Specifies access control level regarding program execution and domain transition.</p>

<h3><a name="profile_CONFIG::file::open">CONFIG::file::open</a></h3>

<p>Specifies access control level regarding file open for reading and/or writing.</p>

<h3><a name="profile_CONFIG::file::create">CONFIG::file::create</a></h3>

<p>Specifies access control level regarding file create.</p>

<h3><a name="profile_CONFIG::file::unlink">CONFIG::file::unlink</a></h3>

<p>Specifies access control level regarding file delete.</p>

<h3><a name="profile_CONFIG::file::mkdir">CONFIG::file::mkdir</a></h3>

<p>Specifies access control level regarding directory create.</p>

<h3><a name="profile_CONFIG::file::rmdir">CONFIG::file::rmdir</a></h3>

<p>Specifies access control level regarding directory delete.</p>

<h3><a name="profile_CONFIG::file::mkfifo">CONFIG::file::mkfifo</a></h3>

<p>Specifies access control level regarding fifo create.</p>

<h3><a name="profile_CONFIG::file::mksock">CONFIG::file::mksock</a></h3>

<p>Specifies access control level regarding UNIX domain socket create.</p>

<h3><a name="profile_CONFIG::file::truncate">CONFIG::file::truncate</a></h3>

<p>Specifies access control level regarding file truncate.</p>

<h3><a name="profile_CONFIG::file::symlink">CONFIG::file::symlink</a></h3>

<p>Specifies access control level regarding symlink create.</p>

<h3><a name="profile_CONFIG::file::rewrite">CONFIG::file::rewrite</a></h3>

<p>Specifies access control level regarding file overwrite.</p>

<h3><a name="profile_CONFIG::file::mkblock">CONFIG::file::mkblock</a></h3>

<p>Specifies access control level regarding block device file create.</p>

<h3><a name="profile_CONFIG::file::mkchar">CONFIG::file::mkchar</a></h3>

<p>Specifies access control level regarding character device file create.</p>

<h3><a name="profile_CONFIG::file::link">CONFIG::file::link</a></h3>

<p>Specifies access control level regarding link create.</p>

<h3><a name="profile_CONFIG::file::rename">CONFIG::file::rename</a></h3>

<p>Specifies access control level regarding rename.</p>

<h3><a name="profile_CONFIG::file::chmod">CONFIG::file::chmod</a></h3>

<p>Specifies access control level regarding chmod.</p>

<h3><a name="profile_CONFIG::file::chown">CONFIG::file::chown</a></h3>

<p>Specifies access control level regarding chown.</p>

<h3><a name="profile_CONFIG::file::chgrp">CONFIG::file::chgrp</a></h3>

<p>Specifies access control level regarding chgrp.</p>

<h3><a name="profile_CONFIG::file::ioctl">CONFIG::file::ioctl</a></h3>

<p>Specifies access control level regarding ioctl.</p>

<h3><a name="profile_CONFIG::file::chroot">CONFIG::file::chroot</a></h3>

<p>Specifies access control level regarding chroot.</p>

<h3><a name="profile_CONFIG::file::mount">CONFIG::file::mount</a></h3>

<p>Specifies access control level regarding mount.</p>

<h3><a name="profile_CONFIG::file::umount">CONFIG::file::umount</a></h3>

<p>Specifies access control level regarding umount.</p>

<h3><a name="profile_CONFIG::file::pivot_root">CONFIG::file::pivot_root</a></h3>

<p>Specifies access control level regarding pivot_root.</p>

<h3><a name="profile_PREFERENCE::learning">PREFERENCE::learning</a></h3>

<p>Specifies preference on learning mode.</p>

<p>"verbose=" controls whether to print policy violation messages or not.</p>

<p>"max_entry=" controls the max number of ACL entries that are automatically appended.</p>

<h3><a name="profile_PREFERENCE::permissive">PREFERENCE::permissive</a></h3>

<p>Specifies preference on permissive mode.</p>

<p>"verbose=" controls whether to print policy violation messages or not.</p>

<h3><a name="profile_PREFERENCE::enforcing">PREFERENCE::enforcing</a></h3>

<p>Specifies preference on enforcing mode.</p>

<p>"verbose=" controls whether to print policy violation messages or not.</p>

<h2><a name="domain_policy">/sys/kernel/security/tomoyo/domain_policy</a></h2>

<p>This file contains definition of all domains and permissions that are granted to each domain.</p>

<p>Lines from the next line to a domain definition ( any lines starting with "&lt;kernel&gt;") to the previous line to the next domain definitions are interpreted as access permissions for that domain.</p>

<p>To read or modify current domain policy, operate like below.</p>
<p>(Example) Selecting specific domain and appending ACLs. The domain will be created if nonexistent.<br>
printf "&lt;kernel&gt; /sbin/init\nallow_read /etc/passwd\n" | tomoyo-loadpolicy -d</p>
<p>(Example) Selecting specific domain and appending ACLs. The domain won't be created if nonexistent.<br>
printf "select &lt;kernel&gt; /sbin/init\nallow_read /etc/passwd\n" | tomoyo-loadpolicy -d</p>
<p>(Example) Selecting specific domain and removing ACLs.<br>
printf "select &lt;kernel&gt; /sbin/init\ndelete allow_read /etc/passwd\ndelete allow_read /etc/shadow\n" | tomoyo-loadpolicy -d</p>
<p>(Example) Deleting specific domain.<br>
printf "delete &lt;kernel&gt; /sbin/init\n" | tomoyo-loadpolicy -d</p>
<p>(Example) Reading current domain policy.<br>
cat /sys/kernel/security/tomoyo/domain_policy</p>

<p>See also: <a href="#policy_file_modifiers">Policy File's Modification</a></p>

<h3><a name="domain_policy_allow_execute">allow_execute</a></h3>
<p>This keyword grants execution of the specified pathname. No wildcards are permitted for the pathname. If you have to use wildcards, use <a href="#exception_policy_aggregator">aggregator</a> keyword before granting execute permission using this keyword.</p>
<p>(Example) allow_execute /bin/ls</p>
<p>See also: <a href="#domain_transition">Domain Transition</a> <a href="#exception_policy_aggregator">aggregator</a></p>

<h3><a name="domain_policy_allow_write">allow_write</a></h3>
<p>This keyword grants the specified pathname to be opened for writing.</p>
<p>(Example) allow_write /dev/null</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_read">allow_read</a></h3>
<p>This keyword grants the specified pathname to be opened for reading.</p>
<p>(Example) allow_read /proc/meminfo</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_read/write">allow_read/write</a></h3>
<p>This keyword grants the specified pathname to be opened for reading and writing.</p>
<p>(Example) allow_read/write /dev/null</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_create">allow_create</a></h3>
<p>This keyword grants the specified pathname to be created.</p>
<p>(Example) allow_create /var/lock/subsys/crond</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_unlink">allow_unlink</a></h3>
<p>This keyword grants the specified pathname to be deleted.</p>
<p>(Example) allow_unlink /var/lock/subsys/crond</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_mkdir">allow_mkdir</a></h3>
<p>This keyword grants the specified pathname to be created. The pathname must be a directory.</p>
<p>(Example) allow_mkdir /tmp/logwatch.\*/</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_rmdir">allow_rmdir</a></h3>
<p>This keyword grants the specified pathname to be deleted. The pathname must be a directory.</p>
<p>(Example) allow_rmdir /tmp/logwatch.\*/</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_mkfifo">allow_mkfifo</a></h3>
<p>This keyword grants creation of FIFO by the specified pathname.</p>
<p>(Example) allow_mkfifo /dev/initctl</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_mksock">allow_mksock</a></h3>
<p>This keyword grants creation of UNIX domain socket by the specified pathname.</p>
<p>(Example) allow_mksock /dev/log</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_mkblock">allow_mkblock</a></h3>
<p>This keyword grants creation of block device file by the specified pathname.</p>
<p>(Example) allow_mkblock /dev/\*</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_mkchar">allow_mkchar</a></h3>
<p>This keyword grants creation of character device file by the specified pathname.</p>
<p>(Example) allow_mkchar /dev/\*</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_truncate">allow_truncate</a></h3>
<p>This keyword grants the specified pathname to be truncated or extended.</p>
<p>(Example) allow_truncate /etc/mtab</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_symlink">allow_symlink</a></h3>
<p>This keyword grants creation of symbolic link by the specified pathname.</p>
<p>(Example) allow_symlink /dev/cdrom</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_link">allow_link</a></h3>
<p>This keyword grants creation of hard link by the specified pathnames.</p>
<p>(Example) allow_link /etc/mtab~\$ /etc/mtab~</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_rename">allow_rename</a></h3>
<p>This keyword grants renaming of the specified pathnames.</p>
<p>(Example) allow_rename /etc/mtab.tmp /etc/mtab</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a></p>

<h3><a name="domain_policy_allow_rewrite">allow_rewrite</a></h3>
<p>This keyword grants the specified pathname to be rewritten when the pathname is specified by <a href="#exception_policy_deny_rewrite">deny_rewrite</a> keyword.</p>
<p>(Example) allow_rewrite /var/log/messages</p>
<p>See also:  <a href="#exception_policy_path_group">path_group</a> <a href="#exception_policy_deny_rewrite">deny_rewrite</a></p>

<h3><a name="domain_policy_allow_ioctl">allow_ioctl</a></h3>

<p>This keyword grants doing IOCTL request with the specified command numbers and the specified pathnames.</p>

<table border="1">
<tr><td>Example</td><td>Permitted access</td></tr>
<tr><td>allow_ioctl socket:[family=2:type=2:protocol=17] 35093</td><td>Allow sockets with protocol family 2, type 2, protocol 17 to do IOCTL request with command number 35093.</td></tr>
<tr><td>allow_ioctl /dev/null 10000-20000</td><td>Allow /dev/null to do IOCTL request with command number between 10000 and 20000.</td></tr>
</table>

<p>Regarding the meaning of IOCTL request's command numbers, please refer manuals provided by each module with IOCTL functionality. For example, IOCTL request with command number 21585 means, on i386 platform, FIOCLEX command which turns on the file's close-on-exec flag. For example, IOCTL request with command number 35088 means SIOCGIFNAME command which retrieves the name of network interface.</p>

<h3><a name="domain_policy_allow_mount">allow_mount</a></h3>
<p>To grant mount permission, use allow_mount keyword followed by "$devicefile $mountpoint $filesystem $options". The $devicefile need to be a canonicalized file if the $filesystem requires device file. The $mountpoint must be a canonicalized file. The $options is a hexadecimal integer expression.</p>

<p>To grant "mount -o remount $mountpoint" permission, use allow_mount keyword followed by "any $mountpoint --remount $options".</p>

<p>To grant "mount --bind $source_dir $dest_dir", use "allow_mount $source_dir $dest_dir --bind $options".<br>
To grant "mount --move $source_dir $dest_dir" permission, use "allow_mount $source_dir $dest_dir --move $options".<br>
The $source_dir and $dest_dir must be canonicalized directory.</p>

<p>Kernel 2.6.15 and later supports "Shared Subtree" functionality.<br>
To grant "mount --make-unbindable $mountpoint" permission, use allow_mount keyword followed by "any $mountpoint --make-unbindable $options".<br>
To grant "mount --make-private $mountpoint" permission, use allow_mount keyword followed by "any $mountpoint --make-private $options".<br>
To grant "mount --make-slave $mountpoint" permission, use allow_mount keyword followed by "any $mountpoint --make-slave $options".<br>
To grant "mount --make-shared $mountpoint" permission, use allow_mount keyword followed by "any $mountpoint --make-shared $options".</p>

<p>(Example)<br>
allow_mount none /dev/pts/ devpts 0x0<br>
allow_mount /proc /proc/ proc 0x0<br>
allow_mount usbdevfs /proc/bus/usb/ usbdevfs 0x0<br>
allow_mount none /data/ tmpfs 0xE<br>
allow_mount none /dev/shm/ tmpfs 0xE<br>
allow_mount /dev/hdc /var/www/ ext2 0xF<br>
allow_mount any / --remount 0x0</p>

<h3><a name="domain_policy_allow_unmount">allow_unmount</a></h3>
<p>To grant unmount request, use allow_unmount keyword followed by a canonicalized directory.</p>

<p>(Example)<br>
allow_unmount /mnt/cdrom/</p>

<h3><a name="domain_policy_allow_chroot">allow_chroot</a></h3>
<p>To grant chroot permission, use allow_chroot keyword followed by a canonicalized directory.<br>
Usually, grant /var/empty/sshd/ that sshd uses. In addition, if you have applications that runs in the chroot'ed environment or applications that uses chroot (for example, /usr/share/empty/ is used by vsftpd), grant such directories too.</p>

<p>(Example)<br>
allow_chroot /var/empty/sshd/<br>
allow_chroot /usr/share/empty/<br>
allow_chroot /var/www/html/<br>
allow_chroot /</p>

<h3><a name="domain_policy_allow_pivot_root">allow_pivot_root</a></h3>
<p>To grant pivot_root permission, use allow_pivot_root keyword followed by the new root's canonicalized directory and the previous root's canonicalized directory.<br>
Usually, you don't need this keyword.</p>

<h3><a name="domain_policy_use_profile">use_profile</a></h3>

<p>This keyword indicates the profile number currently assigned to this domain. The profile number is an integer between 0 and 255.</p>

<h3><a name="domain_policy_ignore_global_allow_read">ignore_global_allow_read</a></h3>

<p>This keyword ignores pathnames specified by <a href="#exception_policy_allow_read">allow_read</a> keyword in exception policy. You can use this keyword for domains you want to ignore globally readable files.</p>

<p>See also:  <a href="#exception_policy_allow_read">allow_read</a></p>

<h3><a name="domain_policy_quota_exceeded">quota_exceeded</a></h3>

<p>This keyword indicates that this domain has failed to append entry in learning mode since the number of entries reached to the limit specified by <a href="#profile_PREFERENCE::learning">PREFERENCE::learning</a> keyword. You need to reduce the number of entries for this domain by tuning policy.</p>

<p>See also:  <a href="#profile_PREFERENCE::learning">PREFERENCE::learning</a></p>

<h3><a name="domain_policy_transition_failed">transition_failed</a></h3>

<p>This keyword indicates that some process in this domain was not able to transit to new domain when processing the execute request.</p>

<p>If this domain was assigned a profile with <a href="#profile_CONFIG::file::execute">CONFIG::file::execute</a>=enforcing , the execute request was rejected.</p>

<p>Otherwise, the execute request was not rejected. In that case, the process continued execution without domain transition. Since the reason of transition failure is either "the name of the domain was too long" or "the kernel was unable to allocate memory", you need to consider "suppressing domain transitions" or "increasing memory quota" if you are planning to assign a profile with <a href="#profile_CONFIG::file::execute">CONFIG::file::execute</a>=enforcing to this domain.</p>

<p>See also:  <a href="#exception_policy_keep_domain">keep_domain</a> <a href="#memory_usage_infomation">Memory Usage Information</a></p>

<h2><a name="exception_policy">/sys/kernel/security/tomoyo/exception_policy</a></h2>

<p>To read or modify current exception policy, operate like below.</p>
<p>(Example)<br>
echo 'file_pattern /proc/\$/status' | tomoyo-loadpolicy -e<br>
echo 'delete file_pattern /proc/\$/status' | tomoyo-loadpolicy -e<br>
cat /sys/kernel/security/tomoyo/exception_policy</p>

<p>See also:  <a href="#policy_file_modifiers">Policy File's Modification</a></p>

<h3><a name="exception_policy_file_pattern">file_pattern</a></h3>

<p>To declare pathname pattern, use file_pattern keyword followed by pathname pattern. The pathname pattern must be a canonicalized Pathname. This keyword is not applicable to neither granting execute permissions nor domain definitions.<br>
For example, canonicalized pathname that contains a process ID (i.e. /proc/PID/ files) needs to be grouped in order to make access control work well.</p>

<h3><a name="exception_policy_path_group">path_group</a></h3>

<p>To declare pathname group, use path_group keyword followed by name of the group and pathname pattern.<br>
For example, if you want to group all files under home directory, you can define</p>

<table border="1">
<tr><td>
path_group HOME-DIR-FILE /home/\*/\*<br>
path_group HOME-DIR-FILE /home/\*/\*/\*<br>
path_group HOME-DIR-FILE /home/\*/\*/\*/\*<br>
path_group HOME-DIR-FILE /home/\*/\*/\*/\*/\*<br>
path_group HOME-DIR-FILE /home/\*/\*/\*/\*/\*/\*<br>
path_group HOME-DIR-FILE /home/\*/\*/\*/\*/\*/\*/\*
</td></tr>
</table>

<p>in the exception policy and use like</p>

<table border="1">
<tr><td>
allow_read @HOME-DIR-FILE
</td></tr>
</table>

<p>to grant file access permission.</p>

<h3><a name="exception_policy_number_group">number_group</a></h3>

<p>To declare number group, use number_group keyword followed by name of the group and number ranges.<br>
For example, if you want to group 0644 and 0664, you can define</p>

<table border="1">
<tr><td>
number_group CREATE_MODES 0644<br>
number_group CREATE_MODES 0664
</td></tr>
</table>

<p>in the exception policy and use like</p>

<table border="1">
<tr><td>
allow_create /tmp/file @CREATE_MODES
</td></tr>
</table>

<p>to grant access permission.</p>

<h3><a name="exception_policy_allow_read">allow_read</a></h3>

<p>To grant unconditionally readable permissions, use allow_read keyword followed by canonicalized file. This keyword is intended to reduce size of domain policy by granting read access to library files such as GLIBC and locale files. Exception is, if ignore_global_allow_read keyword is given to a domain, entries specified by this keyword are ignored.</p>

<p>See also:  <a href="#domain_policy_allow_read">allow_read</a> <a href="#domain_policy_ignore_global_allow_read">ignore_global_allow_read</a></p>

<h3><a name="exception_policy_deny_rewrite">deny_rewrite</a></h3>

<p>To deny overwriting already written contents of file (such as log files) by default, use deny_rewrite keyword followed by pathname pattern. Files whose pathname match the patterns are not permitted to open for writing without append mode or truncate unless the pathnames are explicitly granted using <a href="#domain_policy_allow_rewrite">allow_rewrite</a> keyword in domain policy.</p>

<p>See also:  <a href="#domain_policy_allow_rewrite">allow_rewrite</a></p>

<h3><a name="exception_policy_aggregator">aggregator</a></h3>

<p>To deal multiple programs as a single program, use aggregator keyword followed by name of original program and aggregated program. This keyword is intended to aggregate similar programs.</p>
<p>For example, /usr/bin/tac and /bin/cat are similar. By specifying "aggregator /usr/bin/tac /bin/cat", you can run /usr/bin/tac in the domain for /bin/cat .</p>
<p>For example, /usr/sbin/logrotate for Fedora Core 3 generates programs like /tmp/logrotate.\?\?\?\?\?\? and run them, but TOMOYO Linux doesn't allow using patterns for granting execute permission and defining domains. By specifying "aggregator /tmp/logrotate.\?\?\?\?\?\? /tmp/logrotate.tmp", you can run /tmp/logrotate.\?\?\?\?\?\? as if /tmp/logrotate.tmp is running.</p>

<p>See also:  <a href="#domain_policy_allow_execute">allow_execute</a></p>

<h3><a name="exception_policy_initialize_domain">initialize_domain</a></h3>

<p>To initialize domain transition when specific program is executed, use initialize_domain directive.</p>

<ul>
<li>initialize_domain "program" from "domain"
<li>initialize_domain "program" from "the last program part of domain"
<li>initialize_domain "program"
</ul>

<p>If the part "from" and after is not given, the entry is applied to all domain. If the "domain" doesn't start with "&lt;kernel&gt;", the entry is applied to all domain whose domainname ends with "the last program part of domain".</p>

<p>This directive is intended to aggregate domain transitions for daemon program and program that are invoked by the kernel on demand, by transiting to different domain.</p>

<p>See also: <a href="#domain_transition">Domain Transition</a> <a href="#exception_policy_no_initialize_domain">no_initialize_domain</a></p>

<h3><a name="exception_policy_no_initialize_domain">no_initialize_domain</a></h3>

<p>To deny the effect of "initialize_domain" directive, use "no_initialize_domain" directive.</p>

<ul>
<li>no_initialize_domain "program" from "domain"
<li>no_initialize_domain "program" from "the last program part of domain"
<li>no_initialize_domain "program"
</ul>

<p>Use this directive when you don't want to initialize domain transition.</p>

<p>See also: <a href="#domain_transition">Domain Transition</a> <a href="#exception_policy_initialize_domain">initialize_domain</a></p>

<h3><a name="exception_policy_keep_domain">keep_domain</a></h3>

<p>To prevent domain transition when program is executed from specific domain, use keep_domain directive.</p>

<ul>
<li>keep_domain "program" from "domain"
<li>keep_domain "program" from "the last program part of domain"
<li>keep_domain "domain"
<li>keep_domain "the last program part of domain"
</ul>

<p>If the part "from" and before is not given, this entry is applied to all program. If the "domain" doesn't start with "&lt;kernel&gt;", the entry is applied to all domain whose domainname ends with "the last program part of domain".</p>

<p>This directive is intended to reduce total number of domains and memory usage by suppressing unneeded domain transitions.</p>

<p>See also: <a href="#domain_transition">Domain Transition</a> <a href="#exception_policy_no_keep_domain">no_keep_domain</a></p>

<h3><a name="exception_policy_no_keep_domain">no_keep_domain</a></h3>

<p>To deny the effect of "keep_domain" directive, use "no_keep_domain" directive.</p>

<ul>
<li>no_keep_domain "program" from "domain"
<li>no_keep_domain "program" from "the last program part of domain"
<li>no_keep_domain "domain"
<li>no_keep_domain "the last program part of domain"
</ul>

<p>Use this directive when you want to escape from a domain that is kept by "keep_domain" directive.</p>

<p>See also: <a href="#domain_transition">Domain Transition</a> <a href="#exception_policy_keep_domain">keep_domain</a></p>

<h2><a name="query">/sys/kernel/security/tomoyo/query</a></h2>

<p>This file is used to manually grant or reject individual access requests when the policy violation occurs in enforcing mode. If a policy violation occur in a process whose domain is assigned a profile for enforcing mode, the administrator can judge interactively using "tomoyo-queryd" command.</p>

<h2><a name="manager">/sys/kernel/security/tomoyo/manager</a></h2>

<p>This file is used to read or append the list of programs or domains that can write to /sys/kernel/security/tomoyo/ interface.</p>

<h3><a name="manager_manage_by_non_root">manage_by_non_root</a></h3>

<p>By default, only processes with both UID = 0 and EUID = 0 can modify policy via /sys/kernel/security/tomoyo/ interface. You can use this keyword to allow policy modification by non root user.</p>

<h2><a name=".domain_status">/sys/kernel/security/tomoyo/.domain_status</a></h2>

<p>This is a view (of a DBMS) that contains only profile number and domainnames of domain so that "setprofile" command can do line-oriented processing easily.</p>

<h2><a name="meminfo">/sys/kernel/security/tomoyo/meminfo</a></h2>

<p>This file is to show the total RAM used to keep policy in the kernel by TOMOYO Linux.</p>
<p>(Example)<br>
cat /sys/kernel/security/tomoyo/meminfo<br></p>

<h2><a name="self_domain">/sys/kernel/security/tomoyo/self_domain</a></h2>

<p>This file is to show the name of domain the caller process belongs to.</p>
<p>(Example)<br>
cat /sys/kernel/security/tomoyo/self_domain</p>

<h2><a name=".process_status">/sys/kernel/security/tomoyo/.process_status</a></h2>

<p>This file is used by "tomoyo-pstree" command to show "list of processes currently running" and "domains which each process belongs to" and "profile number which the domain is currently assigned" like "pstree" command. This file is writable by programs that aren't registered as policy manager.</p>

<h2><a name="version">/sys/kernel/security/tomoyo/version</a></h2>

<p>This file is used for getting TOMOYO Linux's version.</p>
<p>(Example)<br>
cat /sys/kernel/security/tomoyo/version</p>

<h1>6. <a name="Advanced_Features">Advanced Features</a></h1>

<h2>6.1 <a name="non_root_policy_update">Allowing policy modification by non root user.</a></h2>

<p>By default, only processes with both UID = 0 and EUID = 0 can modify policy via /sys/kernel/security/tomoyo/ interface. But if you want to permit policy modification via /sys/kernel/security/tomoyo/ interface by non root user, you can write this keyword like</p>

<table border="1">
<tr><td>
# echo manage_by_non_root | /usr/sbin/tomoyo-loadpolicy -m
</td></tr>
</table>

<p>to disable UID and EUID checks. Also, you can write this keyword like</p>

<table border="1">
<tr><td>
# echo delete manage_by_non_root | /usr/sbin/tomoyo-loadpolicy -m
</td></tr>
</table>

<p>to enable UID and EUID checks again. Use chown/chmod as needed since the owner of /sys/kernel/security/tomoyo/ interface is root.<br>
To be able to do this steps, /sbin/tomoyo-init also executes /etc/tomoyo/tomoyo-post-init if /etc/tomoyo/tomoyo-post-init is executable. Therefore, to allow access to /sys/kernel/security/tomoyo/ interface by user demo, create /etc/tomoyo/tomoyo-post-init with</p>

<table border="1">
<tr><td>
#! /bin/sh<br>
echo manage_by_non_root &gt; /sys/kernel/security/tomoyo/manager<br>
chown -R demo /sys/kernel/security/tomoyo/
</td></tr>
</table>

<p>and initialize like</p>

<table border="1">
<tr><td>
# chmod 755 /etc/tomoyo/tomoyo-post-init<br>
# chown -R demo /etc/tomoyo/
</td></tr>
</table>

<p>Then, user demo will be able to access policy directories and policy editors.</p>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
