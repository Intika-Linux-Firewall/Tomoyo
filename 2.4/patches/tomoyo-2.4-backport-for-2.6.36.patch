[PATCH] TOMOYO 2.4 backport patch for Linux 2.6.36

Apply this patch after overwriting security/tomoyo/ directory by doing

 $ wget -O linux-3.1-rc8.tar.gz https://github.com/torvalds/linux/tarball/v3.1-rc8
 $ tar -zxf linux-3.1-rc8.tar.gz --strip 1 torvalds-linux-e7f2a88/security/tomoyo/

.

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/domain.c        |    4 +++-
 security/tomoyo/realpath.c      |   30 +++++++++++++++++++++---------
 security/tomoyo/securityfs_if.c |    1 +
 security/tomoyo/util.c          |    3 ++-
 4 files changed, 27 insertions(+), 11 deletions(-)

--- linux-2.6.36.4.orig/security/tomoyo/domain.c
+++ linux-2.6.36.4/security/tomoyo/domain.c
@@ -501,7 +501,8 @@ struct tomoyo_domain_info *tomoyo_assign
 			 * that domain. Do not perform domain transition if
 			 * profile for that domain is not yet created.
 			 */
-			if (!entry->ns->profile_ptr[entry->profile])
+			if (tomoyo_policy_loaded &&
+			    !entry->ns->profile_ptr[entry->profile])
 				return NULL;
 		}
 		return entry;
@@ -557,6 +558,7 @@ out:
 			tomoyo_write_log(&r, "use_profile %u\n",
 					 entry->profile);
 			tomoyo_write_log(&r, "use_group %u\n", entry->group);
+			tomoyo_update_stat(TOMOYO_STAT_POLICY_UPDATES);
 		}
 	}
 	return entry;
--- linux-2.6.36.4.orig/security/tomoyo/realpath.c
+++ linux-2.6.36.4/security/tomoyo/realpath.c
@@ -85,7 +85,9 @@ static char *tomoyo_get_absolute_path(st
 	if (buflen >= 256) {
 		struct path ns_root = { };
 		/* go to whatever namespace root we are under */
+		spin_lock(&dcache_lock);
 		pos = __d_path(path, &ns_root, buffer, buflen - 1);
+		spin_unlock(&dcache_lock);
 		if (!IS_ERR(pos) && *pos == '/' && pos[1]) {
 			struct inode *inode = path->dentry->d_inode;
 			if (inode && S_ISDIR(inode->i_mode)) {
@@ -111,17 +113,27 @@ static char *tomoyo_get_absolute_path(st
 static char *tomoyo_get_dentry_path(struct dentry *dentry, char * const buffer,
 				    const int buflen)
 {
-	char *pos = ERR_PTR(-ENOMEM);
-	if (buflen >= 256) {
-		pos = dentry_path_raw(dentry, buffer, buflen - 1);
-		if (!IS_ERR(pos) && *pos == '/' && pos[1]) {
-			struct inode *inode = dentry->d_inode;
-			if (inode && S_ISDIR(inode->i_mode)) {
-				buffer[buflen - 2] = '/';
-				buffer[buflen - 1] = '\0';
-			}
+	char *pos = buffer + buflen - 1;
+	if (buflen < 256)
+		return ERR_PTR(-ENOMEM);
+	*pos = '\0';
+	if (dentry->d_inode && S_ISDIR(dentry->d_inode->i_mode))
+		*--pos = '/';
+	spin_lock(&dcache_lock);
+	while (!IS_ROOT(dentry)) {
+		struct dentry *parent = dentry->d_parent;
+		const char *name = dentry->d_name.name;
+		const int len = dentry->d_name.len;
+		pos -= len;
+		if (pos <= buffer) {
+			pos = ERR_PTR(-ENOMEM);
+			break;
 		}
+		memmove(pos, name, len);
+		*--pos = '/';
+		dentry = parent;
 	}
+	spin_unlock(&dcache_lock);
 	return pos;
 }
 
--- linux-2.6.36.4.orig/security/tomoyo/securityfs_if.c
+++ linux-2.6.36.4/security/tomoyo/securityfs_if.c
@@ -147,6 +147,7 @@ static int __init tomoyo_initerface_init
 			    TOMOYO_MANAGER);
 	tomoyo_create_entry("version",          0400, tomoyo_dir,
 			    TOMOYO_VERSION);
+	tomoyo_load_builtin_policy();
 	return 0;
 }
 
--- linux-2.6.36.4.orig/security/tomoyo/util.c
+++ linux-2.6.36.4/security/tomoyo/util.c
@@ -925,7 +925,8 @@ int tomoyo_get_mode(const struct tomoyo_
 		return TOMOYO_CONFIG_DISABLED;
 	mode = tomoyo_profile(ns, profile)->config[index];
 	if (mode == TOMOYO_CONFIG_USE_DEFAULT)
-		mode = tomoyo_profile(ns, profile)->config[category];
+		mode = tomoyo_profile(ns, profile)->config
+			[category + TOMOYO_MAX_MAC_INDEX];
 	if (mode == TOMOYO_CONFIG_USE_DEFAULT)
 		mode = tomoyo_profile(ns, profile)->default_config;
 	return mode & 3;
