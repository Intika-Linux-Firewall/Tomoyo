<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>TOMOYO Linux 2.3.x : The Official Guide : Chapter 7</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../media/tomoyotitle.png" alt="tomoyotitle.png" width="320" height="40" border="0" align="left" title="TOMOYO Linux"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.en" title="TOMOYO Linux Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../about.html.en" title="About TOMOYO Linux">About</a></li>
<li id="tomoyo-download"><a href="../download.html.en" title="Get TOMOYO Linux">Download</a></li>
<li id="tomoyo-changelogs"><a href="../changelogs.html.en" title="TOMOYO Linux ChangeLogs">ChangeLogs</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../links.html.en" title="Links">Links</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="chapter-7.html.ja" title="Go to Japanese page">Japanese page</a></li>
</ul>
</div>

<div id="content">

<div id="documentation">

<div class="navheader">
<p><a href="chapter-6.html.en">&lt;Prev&gt;</a> <a href="index.html.en">&lt;Index&gt;</a> <a href="chapter-8.html.en">&lt;Next&gt;</a></p>
</div>

<h2>Chapter 7: How do I enforce policy?</h2>

<h3><a name="7.1">7.1. Enabling enforcing mode</a></h3>

<p>Once domain and exception policy have been sufficiently modified, the domain can be set to enforcing mode.</p>

<p>Run the policy editor and change the target domains to profile 3:</p>

<img src="media/editpolicy-httpd-profile3.png" alt="editpolicy-httpd-profile3.png" title="Assign profile 3 to domains for Apache." width="675" height="375">

<p>Press the "@" key to switch to the process list. Verify that the "<code>/usr/sbin/httpd</code>" process and descendants are assigned profile number 3:</p>

<img src="media/editpolicy-httpd-process3.png" alt="editpolicy-httpd-process3.png" title="Currently running Apache processes refer profile 3." width="675" height="375">

<p>Quit the policy editor and try an operation which is permitted by policy:</p>

<img src="media/operation-permitted.png" alt="operation-permitted.png" title="This operation was permitted by policy." width="547" height="729">

<p>The operation was successfully completed, as sending mail is permitted by policy.</p>

<p>Let's try an operation which is not permitted by policy:</p>

<img src="media/unix-penguin.png" alt="unix-penguin.png" title="Trying an operation which is not permitted by policy." width="547" height="729">

<p>Although it appears to be have been completed successfully, the warning message by <code>/bin/mail</code> shows that the input was empty and so the execution of <code>/bin/cat</code> was rejected:</p>

<img src="media/unix-penguin-rejected.png" alt="unix-penguin-rejected.png" title="This operation was rejected by policy." width="547" height="477">

<p>If the profile is configured as "PREFERENCE::enforcing={ verbose=yes }" (this is default), the "ERROR:" messages will be printed to the console when policy violations occur:</p>

<p><img src="media/enforcing-error.png" alt="enforcing-error.png" title="Error messages are printed." width="720" height="400"></p>

<h3><a name="7.2">7.2. Notification daemon</a></h3>

<p><code>tomoyo-notifyd</code> is a daemon program that can be used to report the occurrence of a policy violation. For example, to notify "root@example.com" via mail, up to once per an hour, add the following to "/etc/crontab":</p>

<pre>
00 * * * * root /usr/lib/tomoyo/tomoyo-notifyd 0 'mail root@example.com'
</pre>

<p>Rejected requests will be notified via mail:</p>

<pre class="command">
# mail
</pre>

<pre class="output">
Mail version 8.1 6/6/93.  Type ? for help.
"/var/spool/mail/root": 1 message 1 unread
&gt;U  1 root@localhost.local  Tue Jan 12 16:19  18/1234
&amp;
Message 1:
From root@localhost.localdomain  Tue Jan 12 16:19:17 2010
Date: Tue, 12 Jan 2010 16:19:17 +0900
From: root &lt;root@localhost.localdomain&gt;
To: root@localhost.localdomain

Q0-0
#2010-01-12 16:19:17# profile=3 mode=enforcing (global-pid=4836) task={ pid=4836 ppid=4835 uid=48 gid=48 euid=48 egid=48 suid=48 sgid=48 fsuid=48 fsgid=48 }
&lt;kernel&gt; /usr/sbin/httpd /bin/sh
allow_execute /bin/cat
</pre>

<p>This log reports that execution of <code>/bin/cat</code> was requested by <code>/bin/sh</code>, which was invoked by <code>/usr/sbin/httpd</code>. As its first line has "mode=enforcing", this request was rejected.</p>

<h3><a name="7.3">7.3. Handling policy violations in real-time</a></h3>

<p>Policy violations can be handled in real time using <code>tomoyo-queryd</code>. This is especially useful during the installation of software updates. When packages are updated, policy may need to be altered if any of the following occur:</p>

<ul>
<li>The pathnames of files have changed
<li>The dependencies of files have changed
<li>The access permissions required have changed or increased
</ul>

<p>The ideal way to update policy is to rebuild from scratch using learning mode as has been described. However, it is not desirable to change a domain from enforcing mode to learning mode once the system has entered into a production state as this will cause the system to become vulnerable to attack through this unrestricted domain.</p>

<p>Fortunately, <code>tomoyo-queryd</code> can help administrators update policy in real-time while running in "Enforcing Mode". Please note that this method cannot always support every case and the resulting policy may not be fully optimized.</p>

<h4><a name="7.3.1">7.3.1. Example usage of "tomoyo-queryd"</a></h4>

<p>The video below demonstrates example usage of <code>tomoyo-queryd</code>, which is summarised in the text below:</p>

<p><object data="http://www.youtube.com/v/b9q1Jo25LPA&amp;hl=en_US&amp;fs=1" type="application/x-shockwave-flash" width="425" height="344"><param name="movie" value="http://www.youtube.com/v/b9q1Jo25LPA&amp;hl=en_US&amp;fs=1"><param name="allowFullScreen" value="true"><param name="allowscriptaccess" value="always"></object></p>

<p>Use <code>tomoyo-queryd</code> to view, in realtime, the access requests that have been rejected by policy:</p>

<pre class="command">
# /usr/sbin/tomoyo-queryd
</pre>

<pre class="output">
Monitoring /sys/kernel/security/tomoyo/query . Press Ctrl-C to terminate.
</pre>

<p>Policy violations may occur while updating packages due to unusual behaviour (e.g. restarting daemons). When a policy violation occurs, a prompt appears in the <code>tomoyo-queryd</code> console:</p>

<pre class="output">
#2010-01-10 12:29:35# profile=3 mode=enforcing (global-pid=4561) task={ pid=4561 ppid=4557 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /etc/rc.d/init.d/cups
allow_execute /bin/sleep
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):
</pre>

<p>This indicates that a process that belongs to the domain "&lt;kernel&gt; /etc/rc.d/init.d/sshd" attempted to execute <code>/bin/sleep</code>. Usually this would be instantly denied, but since <code>tomoyo-queryd</code> is running, the kernel waits for the administrators decision before accepting or rejecting the request.</p>

<p>Press <strong>"Y"</strong> to grant the request.<br>
Press <strong>"N"</strong> to reject the request.<br>
Press <strong>"R"</strong> to retry the request (for example after editing domain policy manually).<br>
Press <strong>"S"</strong> to show domain policy for the process.<br>
Press <strong>"A"</strong> to append the request to domain policy and retry (a chance to edit the request is given first).</p>

<p>Do not grant access requests unconditionally. Policy violations are not always due to updating packages, but may be malicious requests by attackers.</p>

<p>Do not logout while this program is running. Access requests that violated policy are kept pending and may otherwise sleep forever. Monitor the output to make sure programs have the minimum permissions to run properly. If permissions are missing, they will be printed to the console output. Once policy has been updated, the program can be stopped with "Ctrl-C".</p>

<pre class="output">
#2010-01-10 12:30:10# profile=3 mode=enforcing (global-pid=4630) task={ pid=4630 ppid=4629 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /usr/sbin/acpid
allow_unlink /var/run/acpid.socket
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):a
Enter new entry&gt; allow_unlink /var/run/acpid.socket
Added 'allow_unlink /var/run/acpid.socket'.

The pathname /usr/lib/libpurple.so.0.5.9 was deleted. Deleted from globally readable file.

The pathname /usr/lib/libpurple-client.so.0.5.9 was deleted. Deleted from globally readable file.
</pre>

<p>When the location of shared libraries in "/etc/ld.so.cache" has changed, "tomoyo-queryd" automatically appends shared libraries to exception policy using "allow_read" directive. The following line indicates that the pathname "/usr/lib/libpurple.so.0.6.3" was appended to exception policy as it was registered to "/etc/ld.so.cache":</p>

<pre class="output">
The pathname /usr/lib/libpurple.so.0.6.3 was created. Appended to globally readable file.
</pre>

<p>In addition, "tomoyo-queryd" automatically removes the pathname from exception policy when it is unregistered from "/etc/ld.so.cache":</p>

<pre class="output">
The pathname /usr/lib/libpurple.so.0.5.9 was deleted. Deleted from globally readable file.
</pre>

<p>Note that this program directly edits policy currently loaded into the kernel, so run <code>tomoyo-savepolicy</code> to save policy to disk, otherwise policy will be lost on shutdown.</p>

<pre class="command">
# /usr/sbin/tomoyo-savepolicy
</pre>

<h4><a name="7.3.2">7.3.2. Example output from "tomoyo-queryd"</a></h4>

<p>This is an example of what the output might look like while running <code>tomoyo-queryd</code>:</p>

<pre class="output">
#2010-01-10 12:27:10# profile=3 mode=enforcing (global-pid=4210) task={ pid=4210 ppid=4205 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /etc/rc.d/init.d/sshd
allow_ioctl /dev/null 0x5401
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):s
# select global-pid=4210
&lt;kernel&gt; /etc/rc.d/init.d/sshd
use_profile 3

allow_read /bin/bash
allow_read/write /dev/tty
allow_read/write /dev/pts/\$
allow_read /usr/lib/locale/locale-archive
allow_read /etc/nsswitch.conf
allow_read /etc/passwd
allow_read /etc/rc.d/init.d/sshd
allow_read /etc/rc.d/init.d/functions
allow_execute /sbin/consoletype
allow_read /etc/profile.d/lang.sh
allow_read /etc/sysconfig/i18n
allow_read /etc/sysconfig/init
allow_execute /sbin/runlevel
allow_execute /bin/cp
allow_execute /usr/sbin/sshd
allow_execute /bin/touch
allow_read/write /dev/console
allow_execute /bin/unicode_start
allow_read /var/run/sshd.pid
allow_write /dev/null
allow_execute /bin/usleep
allow_execute /bin/rm
allow_execute /usr/bin/killall
allow_execute /usr/bin/rhgb-client
allow_execute /bin/sleep
allow_ioctl /dev/console 0x5401
allow_ioctl /etc/rc.d/init.d/sshd 0x5401
allow_ioctl /var/run/sshd.pid 0x5401
allow_ioctl /dev/pts/\$ 0x5401


#2010-01-10 12:27:20# profile=3 mode=enforcing (global-pid=4210) task={ pid=4210 ppid=4205 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /etc/rc.d/init.d/sshd
allow_ioctl /dev/null 0x5401
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):a
Enter new entry&gt; allow_ioctl /dev/null 0x5401
Added 'allow_ioctl /dev/null 0x5401'.

The pathname /usr/lib/libpurple.so.0.6.3 was created. Appended to globally readable file.

The pathname /usr/lib/libpurple-client.so.0.6.3 was created. Appended to globally readable file.

----------------------------------------
#2010-01-10 12:29:35# profile=3 mode=enforcing (global-pid=4561) task={ pid=4561 ppid=4557 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /etc/rc.d/init.d/cups
allow_execute /bin/sleep
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):a
Enter new entry&gt; allow_execute /bin/sleep
Added 'allow_execute /bin/sleep'.

#2010-01-10 12:29:55# profile=3 mode=enforcing (global-pid=4561) task={ pid=4561 ppid=4557 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /etc/rc.d/init.d/cups
# wants to create domain
&lt;kernel&gt; /etc/rc.d/init.d/cups /bin/sleep
Allow? ('Y'es/'N'o/'R'etry):y

#2010-01-10 12:29:58# profile=3 mode=enforcing (global-pid=4561) task={ pid=4561 ppid=4557 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /etc/rc.d/init.d/cups /bin/sleep
allow_read /usr/lib/locale/locale-archive
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):a
Enter new entry&gt; allow_read /usr/lib/locale/locale-archive
Added 'allow_read /usr/lib/locale/locale-archive'.

----------------------------------------
#2010-01-10 12:30:10# profile=3 mode=enforcing (global-pid=4630) task={ pid=4630 ppid=4629 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 }
&lt;kernel&gt; /usr/sbin/acpid
allow_unlink /var/run/acpid.socket
Allow? ('Y'es/'N'o/'R'etry/'S'how policy/'A'dd to policy and retry):a
Enter new entry&gt; allow_unlink /var/run/acpid.socket
Added 'allow_unlink /var/run/acpid.socket'.

The pathname /usr/lib/libpurple.so.0.5.9 was deleted. Deleted from globally readable file.

The pathname /usr/lib/libpurple-client.so.0.5.9 was deleted. Deleted from globally readable file.
</pre>

<h3><a name="7.4">7.4. Enable enforcing mode for every domain</a></h3>

<p>Once you are familiar with the methods and tools described in the previous chapters, it will be possible to develop policy for every domain in the system. Placing every domain in "Enforcing Mode" will reduce the points of vulnerability through which a system might be compromised. Thus, all the previous steps should be repeated for all the other domains.</p>

<h3><a name="7.5">7.5. Beyond the core topics</a></h3>

<p>The chapters in this guide so far aim to provide enough knowledge to set up TOMOYO Linux on a system. In order to further improve your knowledge, please read on. The following chapters cover advanced topics that are not absolutely essential, but can help to increase the security of a system. The appendices found at the end of this guide can also be very helpful, particularly the specification.</p>

<p>Remember that security is only as strong as the weakest point. While proper use of the Mandatory Access Control possible with TOMOYO Linux will strengthen a system against being compromised, other security practices and system-hardening methods must not be forgotten. These methods are beyond the scope of this guide but should be eagerly pursued by any who wish to maximize the security of their system.</p>

</div><!-- documentation -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
<a href="chapter-6.html.en">Prev</a>
</td>
<td class="docs-index">
<a href="index.html.en">Index</a>
</td>
<td class="docs-next">
<a href="chapter-8.html.en">Next</a>
</td>
</tr>
<tr>
<td class="docs-previous-description">
<p>Chapter 6: How do I develop policy?</p>
</td>
<td class="docs-home">
</td>
<td class="docs-next-description">
<p>Chapter 8: Interface permissions</p>
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="chapter-7.html.ja">Japanese page</a>.</p>
<p class="timestamp">Last modified: $Date$</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</div>

</body>
</html>
