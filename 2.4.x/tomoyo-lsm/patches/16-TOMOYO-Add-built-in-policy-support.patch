Subject: TOMOYO: Add built-in policy support.

To be able to start using enforcing mode from the early stage of boot sequence,
this patch adds support for built-in policy configuration (and next patch adds
support for activating access control without calling external policy loader
program).

Signed-off-by: Tetsuo Handa <penguin-kernel@I-love.SAKURA.ne.jp>
---
 security/tomoyo/Makefile   |   36 +++++++++++++++++++++++++++
 security/tomoyo/common.c   |   60 +++++++++++++++++++++++++++++++++++++++++++++
 security/tomoyo/common.h   |    1 
 security/tomoyo/memory.c   |   10 -------
 security/tomoyo/tomoyo2c.c |   45 +++++++++++++++++++++++++++++++++
 5 files changed, 142 insertions(+), 10 deletions(-)

--- security-testing-2.6.orig/security/tomoyo/Makefile
+++ security-testing-2.6/security/tomoyo/Makefile
@@ -1 +1,37 @@
 obj-y = audit.o common.o domain.o file.o gc.o group.o load_policy.o memory.o mount.o realpath.o securityfs_if.o tomoyo.o util.o
+
+$(obj)/tomoyo2c: $(obj)/tomoyo2c.c
+	@echo Compiling built-in policy generator for TOMOYO 2.4.x.
+	@$(HOSTCC) $(HOSTCFLAGS) -o $(obj)/tomoyo2c $(obj)/tomoyo2c.c
+
+$(obj)/policy/profile.conf:
+	@mkdir -p $(obj)/policy/
+	@echo Creating an empty policy/profile.conf
+	@touch $@
+
+$(obj)/policy/exception_policy.conf:
+	@echo Creating a default policy/exception_policy.conf
+	@echo initialize_domain /sbin/modprobe from any >> $@
+	@echo initialize_domain /sbin/hotplug from any >> $@
+
+$(obj)/policy/domain_policy.conf:
+	@echo Creating an empty policy/domain_policy.conf
+	@touch $@
+
+$(obj)/policy/manager.conf:
+	@echo Creating an empty policy/manager.conf
+	@touch $@
+
+$(obj)/policy/stat.conf:
+	@echo Creating an empty policy/stat.conf
+	@touch $@
+
+$(obj)/builtin-policy.h: $(obj)/policy/profile.conf $(obj)/policy/exception_policy.conf $(obj)/policy/domain_policy.conf $(obj)/policy/manager.conf $(obj)/policy/stat.conf $(obj)/tomoyo2c
+	@echo Generating built-in policy for TOMOYO 2.4.x.
+	@$(obj)/tomoyo2c profile < $(obj)/policy/profile.conf > $@
+	@$(obj)/tomoyo2c exception_policy < $(obj)/policy/exception_policy.conf >> $@
+	@$(obj)/tomoyo2c domain_policy < $(obj)/policy/domain_policy.conf >> $@
+	@$(obj)/tomoyo2c manager < $(obj)/policy/manager.conf >> $@
+	@$(obj)/tomoyo2c stat < $(obj)/policy/stat.conf >> $@
+
+$(obj)/common.o: $(obj)/builtin-policy.h
--- security-testing-2.6.orig/security/tomoyo/common.c
+++ security-testing-2.6/security/tomoyo/common.c
@@ -2372,3 +2372,63 @@ void tomoyo_check_profile(void)
 	tomoyo_read_unlock(idx);
 	printk(KERN_INFO "Mandatory Access Control activated.\n");
 }
+
+/**
+ * tomoyo_load_builtin_policy - Load built-in policy.
+ *
+ * Returns nothing.
+ */
+void __init tomoyo_load_builtin_policy(void)
+{
+	/*
+	 * This include file is manually created and contains built-in policy
+	 * named "tomoyo_builtin_profile", "tomoyo_builtin_exception_policy",
+	 * "tomoyo_builtin_domain_policy", "tomoyo_builtin_manager",
+	 * "tomoyo_builtin_stat" in the form of "static char [] __initdata".
+	 */
+#include "builtin-policy.h"
+	u8 i;
+	const int idx = tomoyo_read_lock();
+	for (i = 0; i < 5; i++) {
+		struct tomoyo_io_buffer head = { };
+		char *start = "";
+		switch (i) {
+		case 0:
+			start = tomoyo_builtin_profile;
+			head.type = TOMOYO_PROFILE;
+			head.write = tomoyo_write_profile;
+			break;
+		case 1:
+			start = tomoyo_builtin_exception_policy;
+			head.type = TOMOYO_EXCEPTIONPOLICY;
+			head.write = tomoyo_write_exception;
+			break;
+		case 2:
+			start = tomoyo_builtin_domain_policy;
+			head.type = TOMOYO_DOMAINPOLICY;
+			head.write = tomoyo_write_domain;
+			break;
+		case 3:
+			start = tomoyo_builtin_manager;
+			head.type = TOMOYO_MANAGER;
+			head.write = tomoyo_write_manager;
+			break;
+		case 4:
+			start = tomoyo_builtin_stat;
+			head.type = TOMOYO_STAT;
+			head.write = tomoyo_write_stat;
+			break;
+		}
+		while (1) {
+			char *end = strchr(start, '\n');
+			if (!end)
+				break;
+			*end = '\0';
+			tomoyo_normalize_line(start);
+			head.write_buf = start;
+			tomoyo_parse_policy(&head, start);
+			start = end + 1;
+		}
+	}
+	tomoyo_read_unlock(idx);
+}
--- security-testing-2.6.orig/security/tomoyo/common.h
+++ security-testing-2.6/security/tomoyo/common.h
@@ -665,6 +665,7 @@ const struct tomoyo_path_info *tomoyo_ge
 void tomoyo_convert_time(time_t time, struct tomoyo_time *stamp);
 void tomoyo_update_stat(const u8 index);
 void __init tomoyo_mm_init(void);
+void __init tomoyo_load_builtin_policy(void);
 int tomoyo_path_permission(struct tomoyo_request_info *r, u8 operation,
 			   const struct tomoyo_path_info *filename);
 int tomoyo_check_open_permission(struct tomoyo_domain_info *domain,
--- security-testing-2.6.orig/security/tomoyo/memory.c
+++ security-testing-2.6/security/tomoyo/memory.c
@@ -215,14 +215,4 @@ void __init tomoyo_mm_init(void)
 	INIT_LIST_HEAD(&tomoyo_kernel_domain.acl_info_list);
 	tomoyo_kernel_domain.domainname = tomoyo_get_name("<kernel>");
 	list_add_tail_rcu(&tomoyo_kernel_domain.list, &tomoyo_domain_list);
-#if 0
-	/* Will be replaced with tomoyo_load_builtin_policy(). */
-	{
-		/* Load built-in policy. */
-		tomoyo_write_transition_control("/sbin/hotplug", false,
-					TOMOYO_TRANSITION_CONTROL_INITIALIZE);
-		tomoyo_write_transition_control("/sbin/modprobe", false,
-					TOMOYO_TRANSITION_CONTROL_INITIALIZE);
-	}
-#endif
 }
--- /dev/null
+++ security-testing-2.6/security/tomoyo/tomoyo2c.c
@@ -0,0 +1,45 @@
+/*
+ * tomoyo2c.c
+ *
+ * Copyright (C) 2005-2011  NTT DATA CORPORATION
+ *
+ * This program converts policy for TOMOYO 2.4.x to C source.
+ */
+#include <stdio.h>
+
+int main(int argc, char *argv[])
+{
+	_Bool newline = 0;
+	int c;
+	if (argc != 2) {
+		fprintf(stderr, "%s name\n", argv[0]);
+		return 1;
+	}
+	printf("static char tomoyo_builtin_%s[] __initdata =\n", argv[1]);
+	putchar('"');
+	while ((c = fgetc(stdin)) != EOF) {
+		if (newline)
+			putchar('"');
+		newline = 0;
+		if (c == '\\') {
+			putchar('\\');
+			putchar('\\');
+		} else if (c == '"') {
+			putchar('\\');
+			putchar('"');
+		} else if (c == '\n') {
+			putchar('\\');
+			putchar('n');
+			putchar('"');
+			putchar('\n');
+			newline = 1;
+		} else {
+			putchar(c);
+		}
+	}
+	if (!newline)
+		putchar('"');
+	putchar(';');
+	putchar('\n');
+	return 0;
+}
