<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux Install manual</title>
<link rel="stylesheet" href="http://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p>This page is for TOMOYO 2.3 (for Linux 2.6.36 and later kernels). Please jump to <a href="../2.2/">this page</a> for TOMOYO 2.2 (for Linux 2.6.30 - 2.6.35 kernels).</p>
<p style="text-align:right;"><a href="initialize.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>Phase 2: Initializing configuration.</h1>

<p>This page describes basic operations needed for using TOMOYO Linux.</p>

<hr>

<h2>Step 1: Initializing Policy</h2>

<p>To initialize policy, run the following:</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/lib/tomoyo/init_policy
</td></tr>
</table>

<p>All policy files will be saved in "/etc/tomoyo/" directory.</p>

<p>Note that the policy configuration is not compatible between TOMOYO 2.2 and TOMOYO 2.3. If policy has been developed for TOMOYO 2.2 then the "/etc/tomoyo" directory needs to be deleted or renamed, otherwise there will be a kernel panic on the next boot.</p>

<hr>

<h2>Step 2: Learning how to use the policy editor</h2>

<p>Run the policy editor  with "/etc/tomoyo/" option to edit policy files within "/etc/tomoyo/":</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/tomoyo-editpolicy /etc/tomoyo/
</td></tr>
</table>

<p>This picture describes the domain tree that should be visible after running the above command. As of now, only "&lt;kernel&gt;" domain is defined:</p>

<p><img src="editpolicy-domain-list1.png" alt="editpolicy-domain-list1.png" width="720" height="400"></p>

<p>As the system runs, TOMOYO Linux will create domains and add them to the tree. After rebooting and running tomoyo-editpolicy again, the domain tree should become populated with all domains created since startup:</p>

<p><img src="editpolicy-domain-list2.png" alt="editpolicy-domain-list2.png" width="720" height="400"></p>

<p>The access analysis/restriction in TOMOYO Linux is applied in the units of domains. Every process belongs to single domain, and the process will transit to a different domain whenever it executes a program. The name of a domain is a concatenated string expression for the process execution history.</p>

<p>For example, the domain name that the kernel belongs to is <b>"&lt;kernel&gt;"</b>.<br>
When the kernel invokes "/sbin/init", the domain name that this process belongs to is <b>"&lt;kernel&gt; /sbin/init"</b>.<br>
When the kernel invokes "/sbin/init", which then invokes "/etc/rc.d/rc", the domain name that this process belongs to is <b>"&lt;kernel&gt; /sbin/init /etc/rc.d/rc"</b>.<br>
The exceptions to this transition rule are described later.</p>

<p>Look at the numbers in the second column of each line:</p>

<p><img src="editpolicy-domain-profile-number.png" alt="editpolicy-domain-profile-number.png" width="720" height="400"></p>

<p>This number is called "profile number". A profile number is an integer value which takes between 0 and 255.</p>

<p>Press "w" key, and you will see some choices:</p>

<p><img src="editpolicy-window-list.png" alt="editpolicy-window-list.png" width="720" height="400"></p>

<p>Press "p" key, and you will see the following list of profiles:</p>

<p><img src="editpolicy-profile-list.png" alt="editpolicy-profile-list.png" width="720" height="400"></p>

<table border="1">
<tr><td>Name</td><td>Control</td></tr>
<tr>
<td>PREFERENCE::learning</td>
<td>Configuration of learning mode.</td>
</tr>
<tr>
<td>PREFERENCE::permissive</td>
<td>Configuration of permissive mode.</td>
</tr>
<tr>
<td>PREFERENCE::enforcing</td>
<td>Configuration of enforcing mode.</td>
</tr>
<tr>
<td>COMMENT</td>
<td>Description of profile.</td>
</tr>
<tr>
<td>CONFIG</td>
<td>Configuration of operation mode.</td>
</tr>
</table>
<p>The "verbose=" parameter from the PREFERENCE lines can contain one of the following values:</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>no</td>
<td>Do not dump policy violation messages.</td>
</tr>
<tr>
<td>yes</td>
<td>Dump policy violation messages.</td>
</tr>
</table>
<p>The "mode=" parameter of the CONFIG line can contain one of the following values:</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>disabled</td>
<td>Works as if a regular kernel.</td>
</tr>
<tr>
<td>learning</td>
<td>Do not reject an access request if the request violates policy. Append the request to policy.</td>
</tr>
<tr>
<td>permissive</td>
<td>Do not reject an access request if the request violates policy. Do not append the request to policy.</td>
</tr>
<tr>
<td>enforcing</td>
<td>Reject an access request if the request violates policy. Do not append the request to policy.</td>
</tr>
</table>

<p>Press "w" key, then press "e" key, and you will see the picture shown below.</p>

<p><img src="editpolicy-exception-list1.png" alt="editpolicy-exception-list1.png" width="720" height="400"></p>

<p>You can scroll this window using arrow keys and/or Home/End/PageUp/PageDown keys.</p>

<p>This screen contains the following types of exceptions.</p>

<table border="1">
<tr><td>
(1) Pathname pattern
</td><td>
<p>Register pathnames with patterns using the "file_pattern" directive. When a file operation is performed and the requested pathname matches a patterned pathname registered with "file_pattern" directive, policy is generated using patterned pathnames.<br>
The following is the guideline.</p>

<ul>
<li>Files under /proc/PID/ directory.</li>
<li>Files under /sys/ directory. (Applicable to 2.6 kernels only)</li>
<li>Some files under /dev/ directory.</li>
<li>Policy files under /etc/tomoyo/ directory.</li>
<li>Manual pages.</li>
<li>Spool directories.</li>
<li>Temporary files used for sending and receiving mails.</li>
<li>Temporary files used by man command.</li>
<li>Temporary files used by mount command.</li>
</ul>

<p>TOMOYO Linux needs more patterned pathnames depending on the applications installed and their configurations. You can add missing patterned pathnames after running the system.</p>
</td></tr><tr><td>
(2) Pathname group
</td><td>
<p>Register pathname groups using the "path_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple pathnames using group names. An example usage is shown later.</p>
</td></tr><tr><td>
(3) Number group
</td><td>
<p>Register number groups using the "number_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple numbers using group names. An example usage is shown later.</p>
</td></tr><tr><td>
(4) Unconditionally readable files
</td><td>
<p>Register files that are allowed to be read by all programs using the "allow_read" directive. Patterns are allowed. When a file open request for reading is issued and the requested pathname matches a pathname registered with "allow_read" directive, the open request for read access is granted even if the pathname is not explicitly permitted by the domain policy.<br>
The following is the guideline.</p>

<ul>
<li>Dynamically-linked library files that are registered with ldconfig.</li>
<li>Some files under /proc/ directory.</li>
<li>Some locale data under /usr/share/locale/ directory.</li>
</ul>

<p>You may find more files depending on applications in your system or configurations. Add missing files after observing which files are used for read access.</p>

</td></tr><tr><td>
(5) Non-rewritable files
</td><td>
<p>Register files that you don't want to allow overwriting existing contents (like log files) using "deny_rewrite" directive. Patterns are allowed. Files registered with "deny_rewrite" directive are (as long as it is not explicitly given by "allow_rewrite" directive in domain policy) forbidden to "open for writing but not append mode" and "truncate".<br>
The following is the guideline.</p>

<ul>
<li>Files under /var/log/ directory.</li>
</ul>

<p>You may find more files depending on applications in your system or configurations. Add missing files after observing which files are used for append-only access.</p>

</td></tr><tr><td>
(6) Program aggregations
</td><td>
<p>To deal multiple programs as a single program, use aggregator directive followed by name of original program and aggregated program. Patterns are allowed for name of original program.<br>
For example, /usr/bin/tac and /bin/cat are similar. By specifying "aggregator /usr/bin/tac /bin/cat", you can run /usr/bin/tac in the domain for /bin/cat .</p>
</td></tr><tr><td>
(7) Programs that cause domain transition initialization
</td><td>
<p>Register programs that initializes the domain transition history using the "initialize_domain" directive. No patterns allowed. When a program that is registered with "initialize_domain" directive is executed, the program runs just under the  &lt;kernel&gt; domain.<br>
The following is the guideline.</p>

<ul>
<li>Scripts that start or terminate daemon programs located under /etc/init.d/ directory.</li>
<li>Daemon programs that you want to make domain names shorter (for example, httpd and sshd).</li>
</ul>

<p>You may find more programs depending on applications in your system or configurations. Add missing programs after observing which programs should be initialize their domain transition history. But be careful with the side effect of other domains. For example, when the domain policy already includes</p>

<table border="1">
<tr><td>
&lt;kernel&gt; ... /bin/bash<br>
use_profile 3<br>
allow_execute /bin/tcsh<br>
<br>
&lt;kernel&gt; ... /bin/bash /bin/tcsh<br>
use_profile 3<br>
allow_execute /bin/cat<br>
<br>
&lt;kernel&gt; ... /bin/bash /bin/tcsh /bin/cat<br>
use_profile 3<br>
allow_read /etc/fstab
</td></tr>
</table>

<p>and you add /bin/tcsh as initialize_domain, "&lt;kernel&gt; ... /bin/bash /bin/tcsh" will become  unreachable domain because /bin/tcsh runs in "&lt;kernel&gt; /bin/tcsh" domain. In that case, you will need to replace "&lt;kernel&gt; ... /bin/bash /bin/tcsh" with "&lt;kernel&gt; /bin/tcsh" as shown below.</p>

<table border="1">
<tr><td>
&lt;kernel&gt; ... /bin/bash<br>
use_profile 3<br>
allow_execute /bin/tcsh<br>
<br>
&lt;kernel&gt; /bin/tcsh<br>
use_profile 3<br>
allow_execute /bin/cat<br>
<br>
&lt;kernel&gt; /bin/tcsh /bin/cat<br>
use_profile 3<br>
allow_read /etc/fstab
</td></tr>
</table>
</td></tr><tr><td>
(8) Programs that prevent domain transition initialization
</td><td>
<p>To deny the effect of "initialize_domain" directive under specific conditions, use "no_initialize_domain" directive.</p>
</td></tr><tr><td>
(9) Domains that prevent domain transition
</td><td>
<p>To declare domain keepers, use "keep_domain" directive followed by domain definition.<br>
For example, if "keep_domain &lt;kernel&gt; /usr/sbin/sshd /bin/tcsh" is given, any process that belongs to "&lt;kernel&gt; /usr/sbin/sshd /bin/tcsh" domain stays at that domain unless any program registered with "initialize_domain" directive is executed.</p>
</td></tr><tr><td>
(10) Domains that cause domain transition
</td><td>
<p>To deny the effect of "keep_domain" directive under specific conditions, use "no_keep_domain" directive.</p>
</td></tr>
</table>

<p>Press "q" key to finish the policy editor.</p>

<p>For more information on usage of the policy editor, see <a href="tool-editpolicy.html.en">How to use Policy Editor</a>.</p>
<p>For more information on the directives, see <a href="policy-reference.html.en">Policy Specifications of TOMOYO Linux</a>.</p>

<hr>

<h2><a name="configure_notify_daemon">Step 3: Configure to mail TOMOYO Linux's policy violation events (Optional)</a></h2>

<p>The occurrence of a policy violation can be reported if a means for notification is set up. The cron daemon can be used. For example, to notify "root@example.com" via mail, once every hour, add the following to "/etc/crontab":</p>

<p>This will send mails similar to the following (identical to audit logs, but with serial numbers in the header):</p>

<table border="1">
<tr><td>
00 * * * * root /usr/lib/tomoyo/tomoyo-notifyd 0 'mail root@example.com'
</td></tr>
</table>

<p>to /etc/crontab .</p>

<hr>

<h2>Step 4: Reboot the system</h2>

<p>Now reboot with the TOMOYO Linux kernel.</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# reboot
</td></tr>
</table>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
