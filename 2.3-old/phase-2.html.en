<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux Install manual</title>
<link rel="stylesheet" href="https://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p>This page is for TOMOYO 2.3 (for Linux 2.6.36 and later kernels). Please jump to <a href="../2.2/">this page</a> for TOMOYO 2.2 (for Linux 2.6.30 - 2.6.35 kernels).</p>
<p style="text-align:right;"><a href="phase-2.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>Phase 2: Understanding TOMOYO Linux</h1>

<p style="text-align:center;">Aim: to become familiar with the concepts involved in TOMOYO Linux and usage of the associated userspace tools.</p>

<hr>

<h2><a name="2.1">Step 2.1: Understanding domains</a></h2>

<p>The main tool used for TOMOYO Linux is the policy editor. The instructions on this page provide a "quick-start guide" on using the policy editor and should be sufficient to get started. For more in depth instructions, see <a href="tool-editpolicy.html.en">How to use the Policy Editor</a>.</p>

<p>Once the system has been rebooted into the TOMOYO Linux kernel, run the policy editor with "/etc/tomoyo/" option to edit policy files within "/etc/tomoyo/":</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/tomoyo-editpolicy /etc/tomoyo/
</td></tr>
</table>

<p>The policy editor provides a number of "screens" that each serve a different role. The default screen that greets the user is the "Domain Transition Editor". The picture below describes the domain tree that should be visible after running the above command. As of now, only "&lt;kernel&gt;" domain is defined:</p>

<p><img src="editpolicy-domain-list1.png" alt="editpolicy-domain-list1.png" width="720" height="400"></p>

<p>Since this is a newly initialized policy, the policy files in "/etc/tomoyo/" are empty. There are two sets of policy involved in TOMOYO Linux: policy loaded in the kernel, and policy saved to "/etc/tomoyo/". Many sets of policies can be saved to "/etc/tomoyo/" and can be loaded into the kernel at boot or on demand. Saving policy to disk will be discussed in Phase 3. Press the "q" key to quit the policy editor.</p>

<p>Now run the policy editor again <b>without</b> the "/etc/tomoyo/" option in order to view the policy that is loaded in the kernel:</p>

<table border="1">
<tr><td>
[root@tomoyo ~]# /usr/sbin/tomoyo-editpolicy
</td></tr>
</table>

<p>As the system runs, TOMOYO Linux will create domains and add them to the tree. After running the above command, the domain tree should appear populated with all domains created since startup:</p>

<p><img src="editpolicy-domain-list2.png" alt="editpolicy-domain-list2.png" width="720" height="400"></p>

<p>The access analysis/restriction in TOMOYO Linux is applied in the units of domains. Every process belongs to single domain, and the process will transit to a different domain whenever it executes a program. The name of a domain is a concatenated string expression for the process execution history.</p>

<p>For example, the domain name that the kernel belongs to is <b>"&lt;kernel&gt;"</b>.<br>
When the kernel invokes "/sbin/init", the domain name that this process belongs to is <b>"&lt;kernel&gt; /sbin/init"</b>.<br>
When the kernel invokes "/sbin/init", which then invokes "/etc/rc.d/rc", the domain name that this process belongs to is <b>"&lt;kernel&gt; /sbin/init /etc/rc.d/rc"</b>.</p>

<p>The exceptions to this transition rule are described later.</p>

<hr>

<h2><a name="2.2">Step 2.2: Understanding profiles</a></h2>

<p>Each domain can be restricted using TOMOYO Linux by assigning a "profile".</p>

<p>Look at the numbers in the second column of each line:</p>

<p><img src="editpolicy-domain-profile-number.png" alt="editpolicy-domain-profile-number.png" width="720" height="400"></p>

<p>This number is called the "profile number". A profile number is an integer value which takes between 0 and 255. The default profile number is "0", also known as "Disabled Mode", in which the domain is completely unrestricted.</p>

<p>Press the "?" key to view the available commands. Press the "?" again to go back to the previous screen.</p>

<p>Press the "w" key to list the different "screens" that can be viewed using the policy editor:</p>

<p><img src="editpolicy-window-list.png" alt="editpolicy-window-list.png" width="720" height="400"></p>

<p>Press the "p" key to select the "Profile Editor", and you will see the list of profiles.</p>

<p><img src="editpolicy-profile-list.png" alt="editpolicy-profile-list.png" width="720" height="400"></p>

<table border="1">
<tr><td>Name</td><td>Control</td></tr>
<tr>
<td>PREFERENCE::learning</td>
<td>Configuration of learning mode.</td>
</tr>
<tr>
<td>PREFERENCE::permissive</td>
<td>Configuration of permissive mode.</td>
</tr>
<tr>
<td>PREFERENCE::enforcing</td>
<td>Configuration of enforcing mode.</td>
</tr>
<tr>
<td>COMMENT</td>
<td>Description of the profile.</td>
</tr>
<tr>
<td>CONFIG</td>
<td>Configuration of operation mode.</td>
</tr>
</table>
<p>The "verbose=" parameter from the PREFERENCE lines can contain one of the following values:</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>no</td>
<td>Do not dump policy violation messages.</td>
</tr>
<tr>
<td>yes</td>
<td>Dump policy violation messages.</td>
</tr>
</table>
<p>The "mode=" parameter of the CONFIG line can contain one of the following values:</p>
<table border="1">
<tr>
<td>Value</td>
<td>Meaning</td>
</tr>
<tr>
<td>disabled</td>
<td>Works as if a regular kernel.</td>
</tr>
<tr>
<td>learning</td>
<td>Do not reject an access request if the request violates policy. Append the request to policy.</td>
</tr>
<tr>
<td>permissive</td>
<td>Do not reject an access request if the request violates policy. Do not append the request to policy.</td>
</tr>
<tr>
<td>enforcing</td>
<td>Reject an access request if the request violates policy. Do not append the request to policy.</td>
</tr>
</table>

<br>

<hr>

<h2><a name="2.3">Step 2.3: Understanding domain policy</a></h2>

<p>The restrictions of each domain can be viewed using the "Domain Policy" screen, which can be accessed by selecting a domain in the "Domain Transition" screen, and then pressing the "Enter" key. Since no policy has been developed yet (that is saved for Phase 3), the screen is empty. This is an example of domain policy for Apache:</p>

<p><img src="editpolicy-httpd-acl1.png" alt="editpolicy-httpd-acl1.png" width="720" height="400"></p>

<p>The permissions in domain policy are represented here with directives such as "allow_read" and "allow_ioctl". Once the domain is placed in "Enforcing Mode", only the permissions defined in domain policy will be allowed, as well as the permissions defined in exception policy (see <a href="#2.4">Step 2.4: Understanding exception policy</a>). In order to develop a policy of least privilege that still allows normal usage, the "Learning Mode" and "Permissive Mode" can be used. The directives available are described in detail in the <a href="policy-reference.html.en#domain_policy">Domain Policy Specification</a>.</p>

<hr>

<h2><a name="2.4">Step 2.4: Understanding exception policy</a></h2>

<p>Press "w" key, then press "e" key, and you will see the picture shown below:</p>

<p><img src="editpolicy-exception-list1.png" alt="editpolicy-exception-list1.png" width="720" height="400"></p>

<p>You can scroll this window using the arrow keys and/or the Home/End/PageUp/PageDown keys.</p>

<p>The permissions here are similar to those in the domain policy, but apply to all domains. Permissions defined here will not be displayed in domain policy, and access requests from any domain that match a permission in exception policy will be automatically accepted. The exception policy can also be used to shorten and simplify domain policy for each domain by using the group directives.</p>

<p>For in depth details on the directives that can be used in exception policy, see the <a href="policy-reference.html.en#exception_policy">Exception Policy Specifications</a>. The following table gives a summary of these directives:</p>

<table border="1">
<tr><td>
(1) Pathname pattern
</td><td>
<p>Register pathnames with patterns using the "file_pattern" directive. When a file operation is performed and the requested pathname matches a patterned pathname registered with "file_pattern" directive, policy is generated using patterned pathnames.<br>
The following is the guideline.</p>

<ul>
<li>Files under /proc/PID/ directory.</li>
<li>Files under /sys/ directory. (Applicable to 2.6 kernels only)</li>
<li>Some files under /dev/ directory.</li>
<li>Policy files under /etc/tomoyo/ directory.</li>
<li>Manual pages.</li>
<li>Spool directories.</li>
<li>Temporary files used for sending and receiving mails.</li>
<li>Temporary files used by man command.</li>
<li>Temporary files used by mount command.</li>
</ul>

<p>TOMOYO Linux needs more patterned pathnames depending on the applications installed and their configurations. You can add missing patterned pathnames after running the system.</p>
</td></tr><tr><td>
(2) Pathname group
</td><td>
<p>Register pathname groups using the "path_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple pathnames using group names. An example usage is shown later.</p>
</td></tr><tr><td>
(3) Number group
</td><td>
<p>Register number groups using the "number_group" directive. This is a macro to reduce the amount of domain policy by grouping multiple numbers using group names. An example usage is shown later.</p>
</td></tr><tr><td>
(4) Unconditionally readable files
</td><td>
<p>Register files that are allowed to be read by all programs using the "allow_read" directive. Patterns are allowed. When a file open request for reading is issued and the requested pathname matches a pathname registered with "allow_read" directive, the open request for read access is granted even if the pathname is not explicitly permitted by the domain policy.<br>
The following is the guideline.</p>

<ul>
<li>Dynamically-linked library files that are registered with ldconfig.</li>
<li>Some files under /proc/ directory.</li>
<li>Some locale data under /usr/share/locale/ directory.</li>
</ul>

<p>You may find more files depending on applications in your system or configurations. Add missing files after observing which files are used for read access.</p>

</td></tr><tr><td>
(5) Non-rewritable files
</td><td>
<p>Register files that you don't want to allow overwriting existing contents (like log files) using "deny_rewrite" directive. Patterns are allowed. Files registered with "deny_rewrite" directive are (as long as it is not explicitly given by "allow_rewrite" directive in domain policy) forbidden to "open for writing but not append mode" and "truncate".<br>
The following is the guideline.</p>

<ul>
<li>Files under /var/log/ directory.</li>
</ul>

<p>You may find more files depending on applications in your system or configurations. Add missing files after observing which files are used for append-only access.</p>

</td></tr><tr><td>
(6) Program aggregations
</td><td>
<p>To deal multiple programs as a single program, use aggregator directive followed by name of original program and aggregated program. Patterns are allowed for name of original program.<br>
For example, /usr/bin/tac and /bin/cat are similar. By specifying "aggregator /usr/bin/tac /bin/cat", you can run /usr/bin/tac in the domain for /bin/cat .</p>
</td></tr><tr><td>
(7) Programs that cause domain transition initialization
</td><td>
<p>Register programs that initializes the domain transition history using the "initialize_domain" directive. No patterns allowed. When a program that is registered with "initialize_domain" directive is executed, the program runs just under the  &lt;kernel&gt; domain.<br>
The following is the guideline.</p>

<ul>
<li>Scripts that start or terminate daemon programs located under /etc/init.d/ directory.</li>
<li>Daemon programs that you want to make domain names shorter (for example, httpd and sshd).</li>
</ul>

<p>You may find more programs depending on applications in your system or configurations. Add missing programs after observing which programs should be initialize their domain transition history. But be careful with the side effect of other domains. For example, when the domain policy already includes</p>

<table border="1">
<tr><td>
&lt;kernel&gt; ... /bin/bash<br>
use_profile 3<br>
allow_execute /bin/tcsh<br>
<br>
&lt;kernel&gt; ... /bin/bash /bin/tcsh<br>
use_profile 3<br>
allow_execute /bin/cat<br>
<br>
&lt;kernel&gt; ... /bin/bash /bin/tcsh /bin/cat<br>
use_profile 3<br>
allow_read /etc/fstab
</td></tr>
</table>

<p>and you add /bin/tcsh as initialize_domain, "&lt;kernel&gt; ... /bin/bash /bin/tcsh" will become  unreachable domain because /bin/tcsh runs in "&lt;kernel&gt; /bin/tcsh" domain. In that case, you will need to replace "&lt;kernel&gt; ... /bin/bash /bin/tcsh" with "&lt;kernel&gt; /bin/tcsh" as shown below.</p>

<table border="1">
<tr><td>
&lt;kernel&gt; ... /bin/bash<br>
use_profile 3<br>
allow_execute /bin/tcsh<br>
<br>
&lt;kernel&gt; /bin/tcsh<br>
use_profile 3<br>
allow_execute /bin/cat<br>
<br>
&lt;kernel&gt; /bin/tcsh /bin/cat<br>
use_profile 3<br>
allow_read /etc/fstab
</td></tr>
</table>
</td></tr><tr><td>
(8) Programs that prevent domain transition initialization
</td><td>
<p>To deny the effect of "initialize_domain" directive under specific conditions, use "no_initialize_domain" directive.</p>
</td></tr><tr><td>
(9) Domains that prevent domain transition
</td><td>
<p>To declare domain keepers, use "keep_domain" directive followed by domain definition.<br>
For example, if "keep_domain &lt;kernel&gt; /usr/sbin/sshd /bin/tcsh" is given, any process that belongs to "&lt;kernel&gt; /usr/sbin/sshd /bin/tcsh" domain stays at that domain unless any program registered with "initialize_domain" directive is executed.</p>
</td></tr><tr><td>
(10) Domains that cause domain transition
</td><td>
<p>To deny the effect of "keep_domain" directive under specific conditions, use "no_keep_domain" directive.</p>
</td></tr>
</table>

<p>Press the "q" key to quit the policy editor.</p>

<br>

<div class=navfooter>
<hr align="left" width="100%">
<table summary="Footer navigation table" width="100%" border="0" cellpadding="0" cellspacing="0">
<tr>
<td width="33%" align="left" valign="top">
<a href="phase-1.html.en">Prev</a>
</td>
<td width="34%" align="center" valign="top">
<a href="index.html.en">Index</a>
</td>
<td width="33%" align="right" valign="top">
<a href="phase-3.html.en">Next</a>
</td></tr>
<tr><td width="33%" align="left" valign="top">
Phase 1: Installation and initialization
</td>
<td width="34%" align="center" valign="top">
<a href="https://tomoyo.osdn.jp/">Home</a>
</td>
<td width="33%" align="right" valign="top">
Phase 3: Analyze a domain
</td>
</tr>
</table>
</div>

<p><a href="https://osdn.jp/"><img src="https://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>

