<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>Providing download-only / uploadable SFTP service with single user account using environment variable.</title>
<link rel="stylesheet" href="http://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p>Info: Version <a href="../1.8/">1.8.x</a> is available.</p>
<p style="text-align:right;"><a href="sftp-protection-using-environment-variable.html.ja">Japanese Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>Providing download-only / uploadable SFTP service with single user account using environment variable.</h1>

<h2>About this page</h2>

<p>This page explains you how to provide both download-only SFTP service and uploadable SFTP service using single user account. The type of SFTP service (i.e. download-only or uploadable) is determined by environment variables provided by SFTP client, and normal SSH shell access is forbidden if appropriate environment variables are not provided.</p>

<hr>

<h2>Step 1: Creating user account for SFTP service</h2>

<p>In this page, we assume the name of user for SFTP service as "sftp".</p>

<p>We assume the shell program for SFTP service as /bin/sftp-shell .</p>

<p>We assume the directory for SFTP service as /var/sftp/ .</p>

<p>We assume the location of SFTP server program as /usr/libexec/openssh/sftp-server .</p>

<table border="1">
<tr><td>
useradd -s /bin/sftp-shell -d /var/sftp sftp<br>
passwd sftp
</td></tr>
</table>

<h2>Step 2: Creating programs needed for SFTP service</h2>

<p>Save the program listed below as /bin/sftp-shell and set executable bit.</p>

<table border="1">
<tr><td><pre>
#! /bin/sh
[ "$sftp_type" == "ro-sftp" ] &amp;&amp; exec /bin/ro-sftp
[ "$sftp_type" == "rw-sftp" ] &amp;&amp; exec /bin/rw-sftp
exit 1
</pre></td></tr>
</table>

<p>Save the program listed below as /bin/rw-sftp and /bin/ro-sftp and set executable bit. (/bin/rw-sftp and /bin/ro-sftp are identical.)</p>

<table border="1">
<tr><td><pre>
#! /bin/sh
umask 0022
exec /usr/libexec/openssh/sftp-server
</pre></td></tr>
</table>

<h2>Step 3: Making SSH to pass and receive environment variables</h2>

<p>Append the name of environment variable which SSH server accepts to /etc/ssh/sshd_config .</p>

<table border="1">
<tr><td>
AcceptEnv sftp_type
</td></tr>
</table>

<p>Append the name of environment variable which SSH client sends to /etc/ssh/ssh_config .</p>

<table border="1">
<tr><td>
SendEnv sftp_type
</td></tr>
</table>

<h2>Step 4: Install and initialize TOMOYO Linux</h2>

<p><a href="install.html.en">Install TOMOYO Linux</a> and run below commandline in order to initialize TOMOYO Linux.</p>

<table border="1">
<tr><td>
/usr/lib/ccs/init_policy
</td></tr>
</table>

<p>Then, please do below operations before you reboot using TOMOYO Linux kernel.</p>

<p>Append below line to /etc/ccs/exception_policy.conf in order to initialize domain transition when /bin/sftp-shell is executed.</p>

<table border="1">
<tr><td>
initialize_domain /bin/sftp-shell
</td></tr>
</table>

<p>Append below lines to /etc/ccs/exception_policy.conf so that we can specify directory for SFTP service recursively.</p>

<table border="1">
<tr><td>
path_group SFTP_DIRS /var/sftp/\{\*\}/<br>
path_group SFTP_FILES /var/sftp/\{\*\}/\*<br>
path_group SFTP_FILES /var/sftp/\*
</td></tr>
</table>

<p>Append below lines to /etc/ccs/domain_policy.conf so that we can allow downloading / uploading SFTP contents.</p>

<table border="1">
<tr><td>
&lt;kernel&gt; /bin/sftp-shell<br>
<br>
&lt;kernel&gt; /bin/sftp-shell /bin/ro-sftp /usr/libexec/openssh/sftp-server<br>
allow_read @SFTP_FILES<br>
<br>
&lt;kernel&gt; /bin/sftp-shell /bin/rw-sftp /usr/libexec/openssh/sftp-server<br>
allow_read/write @SFTP_FILES<br>
allow_create @SFTP_FILES 0644<br>
allow_unlink @SFTP_FILES<br>
allow_mkdir @SFTP_DIRS 0755<br>
allow_rmdir @SFTP_DIRS<br>
allow_rename @SFTP_FILES @SFTP_FILES<br>
allow_rename @SFTP_DIRS @SFTP_DIRS<br>
allow_truncate @SFTP_FILES
</td></tr>
</table>

<h2>Step 5: Learning and operation</h2>

<p>Now, you are ready to start operation. Please reboot using TOMOYO Linux kernel.</p>

<p>Change access control mode to learning mode by assigning profile 1.</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-setprofile -r 1 '&lt;kernel&gt; /bin/sftp-shell'
</td></tr>
</table>

<p>Set environment variable "sftp_type" with value "ro-sftp" and access the SFTP server. In this page, we assume the name of SFTP server as "server".</p>

<table border="1">
<tr><td>
export sftp_type="ro-sftp"<br>
sftp sftp@server
</td></tr>
</table>

<p>Now, the process belongs to "&lt;kernel&gt; /bin/sftp-shell /bin/ro-sftp /usr/libexec/openssh/sftp-server" domain. Do download operations from this domain. But don't do upload operations from this domain.</p>

<p>Set environment variable "sftp_type" with value "rw-sftp" and access the SFTP server.</p>

<table border="1">
<tr><td>
export sftp_type="rw-sftp"<br>
sftp sftp@server
</td></tr>
</table>

<p>Now, the process belongs to "&lt;kernel&gt; /bin/sftp-shell /bin/rw-sftp /usr/libexec/openssh/sftp-server" domain. Do download operations and upload operations from this domain.</p>

<p>Change access control mode to enforcing mode by assigning profile 3.</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-setprofile -r 3 '&lt;kernel&gt; /bin/sftp-shell'
</td></tr>
</table>

<p>Save policy files by executing ccs-savepolicy command.</p>

<table border="1">
<tr><td>
/usr/sbin/ccs-savepolicy
</td></tr>
</table>

<h2>Explanation</h2>

<p>We create two domains for sftp-server programs with different parent domain, and we give write permissions to only one domain. Since this program is just an example, we used straightforward environment variables. When you use at real systems, please use unguessable environment variables because these environment variables act as passwords.</p>

<p>If you want to forbid access to files listed using allow_read keyword in the exception policy (e.g. shared libraries), you can specify ignore_global_allow_read directive to the domain policy.</p>

<h2>Application idea</h2>

<p>You can use environment variable SSH_CLIENT to grant upload access when clients are from specific IP addresses and port numbers, download-only access otherwise.</p>

<hr>

<p><a href="index.html.en">Return to index page.</a></p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
