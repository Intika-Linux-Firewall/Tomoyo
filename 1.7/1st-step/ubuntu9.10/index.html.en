<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=us-ascii">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux Kickstarting Manual for Ubuntu 9.10</title>
<link rel="stylesheet" href="http://tomoyo.sourceforge.jp/tomoyo.css" media="all" type="text/css">
<link rev="made" href="mailto:k.takeda26@gmail.com"> 
</head>
<body>
<p style="text-align:right;"><a href="index.html.ja">Japanese Page</a></p>
<h1><a href="http://tomoyo.sourceforge.jp/">TOMOYO Linux</a> Kickstarting Manual for Ubuntu 9.10</h1>

<ul>
<li><a href="#l1">1. About this page</a></li>
<li><a href="#l2">2. Installing TOMOYO Linux kernel and tools</a></li>
<li><a href="#l3">3. Executing automatic configuration script</a>
<li><a href="#l4">4. Preparation for audit logs</a></li>
<li><a href="#l5">5. Booting with TOMOYO Linux kernel</a></li>
<li><a href="#l6">6. Generating policies for login operations</a></li>
<li><a href="#l7">7. Editing generated policies</a></li>
<li><a href="#l8">8. Applying restrictions for login operations</a></li>
<li><a href="#l9">(appendix) More information</a></li>
</ul>

<h2><a name="l1">1. About this page</a></h2>

<p>This page explains you how to introduce TOMOYO Linux 1.7.2 on Ubuntu 9.10 systems.
By operating along with this page, you will be able to experience the fundamental functionalities of TOMOYO Linux and configure and operate TOMOYO Linux.</p>

<p>The following is the flow of introduction.</p>

<ol>
<li>Install TOMOYO Linux kernel and tools</li>
<li>Configure fundamental policy</li>
<li>Policy generation and review</li>
<li>Apply reviewed policy</li>
</ol>

<h2><a name="l2">2. Installing TOMOYO Linux kernel and tools</a></h2>

<p>TOMOYO Linux is provided in the form of patches to the Linux kernels, and you need to apply these patches and compile.
But regarding Ubuntu 9.10, a binary kernel package for i686 architecture is available and this page uses it.</p>

<p>First, add repository and fetch the package information.</p>

<pre>
$ <span class="user">sudo bash</span>
# <span class="user">echo 'deb http://osdn.dl.sourceforge.jp/tomoyo/45071/ ./' &gt;&gt; /etc/apt/sources.list</span>
# <span class="user">wget -O - http://I-love.SAKURA.ne.jp/kumaneko-key | apt-key add -</span>
# <span class="user">apt-get update</span>
</pre>

<p>Next, install the packages. The ccs-tools package include programs for managing TOMOYO Linux's policy.</p>

<pre>
# <span class="user">apt-get install linux-ccs ccs-tools</span>
</pre>

<p>Comment out the "GRUB_HIDDEN_TIMEOUT=0" line and "GRUB_HIDDEN_TIMEOUT_QUIET=true" line of /etc/default/grub and then run /usr/sbin/update-grub so that you will not fail to select TOMOYO Linux's kernel.</p>

<pre>
<span class="user">#</span>GRUB_HIDDEN_TIMEOUT=0
<span class="user">#</span>GRUB_HIDDEN_TIMEOUT_QUIET=true
</pre>

<p>You have installed TOMOYO Linux.
Now proceed to configuration.</p>

<h2><a name="l3">3. Executing automatic configuration program</a></h2>

<p>A program is included in the tools package that performs configurations in this chapter. Run the program as follows.</p>

<pre># <span class="user">/usr/lib/ccs/init_policy --file-only-profile</span></pre>

<h3>About configuration directory</h3>

<p>The default directory for storing TOMOYO Linux's configuration is /etc/ccs/ .</p>

<h3>About profiles</h3>

<p>Since TOMOYO Linux has much functionality, you can selectively enable/disable them using "profiles".
Since this page explains only file access restrictions, /etc/ccs/profile.conf will contain the following entries.</p>

<pre>
PROFILE_VERSION=20090903
PREFERENCE::audit={ max_grant_log=1024 max_reject_log=1024 task_info=yes path_info=yes }
PREFERENCE::enforcing={ verbose=yes penalty=0 }
PREFERENCE::learning={ verbose=no max_entry=2048 exec.realpath=yes exec.argv0=yes symlink.target=yes }
PREFERENCE::permissive={ verbose=yes }
0-COMMENT=-----Disabled Mode-----
0-CONFIG::file={ mode=disabled grant_log=yes reject_log=yes }
1-COMMENT=-----Learning Mode-----
1-CONFIG::file={ mode=learning grant_log=yes reject_log=yes }
2-COMMENT=-----Permissive Mode-----
2-CONFIG::file={ mode=permissive grant_log=yes reject_log=yes }
3-COMMENT=-----Enforcing Mode-----
3-CONFIG::file={ mode=enforcing grant_log=yes reject_log=yes }
</pre>

<p>You can use up to 256 profiles.
Above example uses 4 profiles. Their meanings are shown below.</p>

<table><tbody>
<tr><th>Profile 0</th><td>Don't perform file access restrictions.</td></tr>
<tr><th>Profile 1</th><td>Perform file access restrictions in learning mode.</td></tr>
<tr><th>Profile 2</th><td>Perform file access restrictions in permissive mode.</td></tr>
<tr><th>Profile 3</th><td>Perform file access restrictions in enforcing mode.</td></tr>
</tbody></table>

<p>The "CONFIG::file" line means "file access restriction". It does nothing if mode=disabled, it appends to domain policy automatically if mode=learning, it accepts the request even if the request was not permitted by policy if mode=permissive, it denies the request if the request was not permitted by policy if mode=enforcing.
The basic procedure is</p>

<ol>
<li>Determine the coverage of access restriction by operating the system after assigning profile 0.</li>
<li>Generate the policy by operating the system after assigning profile 1.</li>
<li>Confirm the policy by operating the system after assigning profile 2.</li>
<li>Enforce the policy by assigning profile 3.</li>
</ol>

<p>The "COMMENT" line is for making the profiles easier to distinguish.
It does not affect TOMOYO Linux's functionality.</p>

<p>The "PREFERENCE::audit" line is configuration of access logs.
max_grant_log and max_reject_log are max number of grant logs (requests permitted by policy) and the max number of reject logs (requests not permitted by policy) respectively.</p>

<p>The "PREFERENCE::learning" line is configuration of learning mode.
verbose controls whether the policy violation warning messages should be printed on console or not.
max_entry is max number of entries that should be automatically appended by learning mode. grant_log and reject_log respectively controls whether grant logs and reject logs should be generated or not.</p>

<p>The "PREFERENCE::permissive" line is configuration of permissive mode.
verbose controls whether the policy violation warning messages should be printed on console or not.</p>

<p>The "PREFERENCE::enforcing" line is configuration of enforcing mode.
verbose controls whether the policy violation warning messages should be printed on console or not.
penalty is the period how long (in units of 0.1 second) should the process that violated policy sleep for.</p>

<h3>About programs that can update policies</h3>

<p>Programs that can update policies are listed in /etc/ccs/manager.conf .
The following programs are listed.</p>

<pre>
/usr/sbin/ccs-loadpolicy
/usr/sbin/ccs-editpolicy
/usr/sbin/ccs-setlevel
/usr/sbin/ccs-setprofile
/usr/sbin/ccs-ld-watch
/usr/sbin/ccs-queryd
</pre>

<h3>About exception policy</h3>

<p>/etc/ccs/exception_policy.conf contains the following 13 types of exceptions.</p>

<ol>
<li>Pathname's pattern (file_pattern)</li>
<li>Pathname's group (path_group)</li>
<li>Numeric value's group (number_group)</li>
<li>IP address's group (address_group)</li>
<li>Unconditionally readable files (allow_read)</li>
<li>Unconditionally usable environment variable names (allow_env)</li>
<li>Default non-rewritable files (deny_rewrite)</li>
<li>Program aggregations (aggregator)</li>
<li>Programs that cause domain transition initialization (initialize_domain)</li>
<li>Programs that prevent domain transition initialization (no_initialize_domain)</li>
<li>Domains that prevent domain transition (keep_domain)</li>
<li>Domains that cause domain transition (no_keep_domain)</li>
<li>Reserved local ports (deny_autobind)</li>
</ol>

<h2><a name="l4">4. Preparation for audit logs</a></h2>

<p>TOMOYO Linux has two types of logs, "access granted logs" (access requests that didn't violate domain policy) and "access rejected logs" (access requests that violated domain policy).
This page configures to save only "access rejected logs".</p>

<p>To save logs, you can use "ccs-auditd" daemon program.
To start "ccs-auditd" on bootup to save only "access rejected logs", create the following script in the /etc/init.d/ directory and give execute permission to the script.</p>

<pre>
# <span class="user">cat &gt; /etc/init.d/ccs-auditd &lt;&lt; EOF</span>
<span class="user">#!/bin/sh</span>
<span class="user">/usr/sbin/ccs-auditd /dev/null /var/log/tomoyo/reject_log.txt</span>
<span class="user">EOF</span>
# <span class="user">chmod +x /etc/init.d/ccs-auditd</span>
</pre>

<p>And create symbolic links to the script.</p>

<pre>
# <span class="user">update-rc.d ccs-auditd start 99 2 3 4 5 .</span>
update-rc.d: warning: /etc/init.d/ccs-auditd missing LSB information
update-rc.d: see &lt;http://wiki.debian.org/LSBInitScripts&gt;
 Adding system startup for /etc/init.d/ccs-auditd ...
   /etc/rc2.d/S99ccs-auditd -&gt; ../init.d/ccs-auditd
   /etc/rc3.d/S99ccs-auditd -&gt; ../init.d/ccs-auditd
   /etc/rc4.d/S99ccs-auditd -&gt; ../init.d/ccs-auditd
   /etc/rc5.d/S99ccs-auditd -&gt; ../init.d/ccs-auditd
</pre>

<p>This script will save "access rejected logs" as /var/log/tomoyo/reject_log.txt .
You need to create the directory to save before you run this script.</p>

<pre>
# <span class="user">mkdir -p /var/log/tomoyo</span>
</pre>

<p>You have finished all preparations.</p>

<h2><a name="l5">5. Booting with TOMOYO Linux kernel</a></h2>

<p>Now, reboot with TOMOYO Linux kernel.</p>

<pre>
# <span class="user">reboot</span>
</pre>

<p>Select the TOMOYO Linux kernel and press 'Enter' key.</p>

<p><img alt="Booting with TOMOYO Linux kernel" title="Booting with TOMOYO Linux kernel" width="640" height="480" src="grub.png"></p>

<p>After the login prompt appear, log in as root.</p>

<p>To switch from graphical login to text login, press "Ctrl"-"Alt"-"F1" keys. If you are running from VMware, press keys in "Alt"-"F1"-"Ctrl" or "Ctrl"-"F1"-"Alt" order.</p>

<p><img alt="Log in as root" title="Log in as root" width="720" height="400" src="login.png"></p>

<h2><a name="l6">6. Generating policies for login operations</a></h2>

<p>Let the TOMOYO Linux's kernel remember the following operations, and let's see any operations that weren't done in the learning mode are denied in the enforcing mode.</p>

<ol>
<li>Running "date" command</li>
<li>Printing the heading 3 lines of /etc/passwd using "head" command</li>
<li>Invoking "tcsh"</li>
<li>Printing the tailing 3 lines of /etc/passwd using "tail" command</li>
<li>Exit from "tcsh"</li>
</ol>

<p>Now, change this session to learning mode.</p>

<p>The profile 1 is defined for learning mode.
So, assign this profile to /sbin/getty and programs invoked by /sbin/getty .</p>
<pre>
# <span class="user">/usr/sbin/ccs-setprofile -r 1 '&lt;kernel&gt; /sbin/getty'</span>
</pre>

<p>This command means</p>

<blockquote><p>Assign profile 1 to /sbin/getty and all programs invoked by /sbin/getty .</p></blockquote>

<p>The /sbin/getty is a program that invokes login shell. Thus, by assigning profiles 1 to /sbin/getty and programs invoked by /sbin/getty, you can let the TOMOYO Linux kernel remember operations after login.
Changing profiles takes effect immediately. Now, this session is already in the learning mode.</p>

<p>You have to quote "&lt;kernel&gt; /sbin/getty" appropriately, or you may lose the contents of /sbin/getty because "&lt;" and "&gt;" are interpreted as redirection command.</p>

<p>Let the kernel remember the 4 operations listed above.
All you need to do is do these operations as usual.</p>

<p><img alt="Using learning mode" title="Using learning mode" width="720" height="400" src="ope_learning.png"></p>

<p>You can operate as if the usual Linux, but the TOMOYO Linux kernel is monitoring accesses and generating policies and storing on the memory in the background.</p>

<h2><a name="l7">7. Editing generated policies</a></h2>

<p>To refer and/or edit generated policy, you can use "ccs-editpolicy" in the TOMOYO Linux tools package.</p>

<pre>
# <span class="user">/usr/sbin/ccs-editpolicy</span>
</pre>

<p>When you run "ccs-editpolicy", the list of process invocation history since the bootup is shown, explaining how programs are invoked until now.
TOMOYO Linux calls these invocation chains as "Domain transition tree".</p>

<p><img alt="Domain Transition" title="Domain Transition" width="720" height="400" src="editpolicy1.png"></p>

<p>Search for getty from this tree.
Press 'f' key and enter "getty" and press 'Enter' key.</p>

<p><img alt="Domains under getty" title="Domains under getty" width="720" height="400" src="editpolicy2.png"></p>

<p>The integer that is on the right side of line number shows profile number currently assigned to the domain.
The profile number for /sbin/getty and its descendant domains is 1 because you ran earlier "ccs-setprofile -r 1 '&lt;kernel&gt; /bin/getty'".</p>

<p>You can find the tree for login operation at /bin/login under /sbin/getty .
Search for /usr/bin/head in that tree.
Press 'Enter' at the line of head command, and you will see the following window.</p>

<p><img alt="Policy for head command" title="Policy for head command" width="720" height="400" src="editpolicy3.png"></p>

<p>This is the policy generated by the previous operations and it says that</p>

<blockquote>
<p>The domain "&lt;kernel&gt; /sbin/getty /bin/login /bin/bash /usr/bin/head" (red colored underline)</p>
<ul>
<li>can open /etc/passwd for reading (blue colored underline)</li>
</ul>
</blockquote>

<p>In TOMOYO Linux, the domain is defined as the history of process invocation represented using absolute pathnames of programs.
Each process belongs to single domain, and access permissions are granted to domains.</p>

<p>The granularity of permissions is standard read/write/execute plus detailed write permission such as create, unlink, rename.</p>

<p>Policies are kept on the memory and they will be lost if you shutdown the system.
To save policies currently on the memory onto disk, run the following command.</p>

<pre>
# <span class="user">/usr/sbin/ccs-savepolicy</span>
</pre>

<h2><a name="l8">8. Applying restrictions for login operations</a></h2>

<p>Now, let's experience MAC using previously generated policy.</p>

<p>Quit the "ccs-editpolicy" with 'q' key and run the following command.</p>

<pre>
# <span class="user">/usr/sbin/ccs-setprofile -r 3 '&lt;kernel&gt; /sbin/getty'</span>
</pre>

<p>From now on, the domains under /sbin/getty are protected by MAC.</p>

<p>Now, let's do the following operations.</p>

<ol>
<li>Running "date" command</li>
<li>Printing the heading 3 lines of /etc/passwd using "head" command</li>
<li>Printing the tailing 3 lines of /etc/passwd using "tail" command (denied)</li>
<li>Printing the heading 3 lines of /etc/shadow using "head" command (denied)</li>
<li>Invoking "tcsh"</li>
<li>Running "date" command (denied)</li>
</ol>

<p><img alt="Enforcing MAC" title="Enforcing MAC" width="720" height="400" src="ope_enforcing.png"></p>

<p>Operations with red colored underline in the picture are performed normally because they are operations performed in the learning mode.
Operations with blue colored underline are denied.</p>

<p>The logs for denied operations are saved in /var/log/tomoyo/reject_log.txt by ccs-auditd.</p>

<blockquote><p>
#2010-01-02 22:19:36# profile=3 mode=enforcing (global-pid=1055) task={ pid=1055 ppid=1023 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 state[0]=0 state[1]=0 state[2]=0 type!=execute_handler } path1={ uid=0 gid=0 ino=132184 major=8 minor=1 perm=0755 type=file } path1.parent={ uid=0 gid=0 ino=131112 perm=0755 } exec={ realpath="/usr/bin/tail" argc=3 envc=15 argv[]={ "tail" "-3" "/etc/passwd" } envp[]={ "SHELL=/bin/bash" "TERM=linux" "HUSHLOGIN=FALSE" "USER=root" "LS_COLORS=rs=0:di=01;34:ln=01;36:hl=44;37:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:" "MAIL=/var/mail/root" "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games" "PWD=/root" "LANG=en_US.UTF-8" "SHLVL=1" "HOME=/root" "LOGNAME=root" "LESSOPEN=|\040/usr/bin/lesspipe\040%s" "LESSCLOSE=/usr/bin/lesspipe\040%s\040%s" "_=/usr/bin/tail" } }
&lt;kernel&gt; /sbin/getty /bin/login /bin/bash
allow_execute /usr/bin/tail

#2010-01-02 22:19:36# profile=3 mode=enforcing (global-pid=1055) task={ pid=1055 ppid=1023 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 state[0]=0 state[1]=0 state[2]=0 type!=execute_handler } path1={ uid=0 gid=0 ino=132184 major=8 minor=1 perm=0755 type=file } path1.parent={ uid=0 gid=0 ino=131112 perm=0755 }
&lt;kernel&gt; /sbin/getty /bin/login /bin/bash
allow_read /usr/bin/tail

#2010-01-02 22:19:47# profile=3 mode=enforcing (global-pid=1057) task={ pid=1057 ppid=1023 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 state[0]=0 state[1]=0 state[2]=0 type!=execute_handler } path1={ uid=0 gid=42 ino=393228 major=8 minor=1 perm=0640 type=file } path1.parent={ uid=0 gid=0 ino=393217 perm=0755 }
&lt;kernel&gt; /sbin/getty /bin/login /bin/bash /usr/bin/head
allow_read /etc/shadow

#2010-01-02 22:19:52# profile=3 mode=enforcing (global-pid=1059) task={ pid=1059 ppid=1058 uid=0 gid=0 euid=0 egid=0 suid=0 sgid=0 fsuid=0 fsgid=0 state[0]=0 state[1]=0 state[2]=0 type!=execute_handler } path1={ uid=0 gid=0 ino=335945 major=8 minor=1 perm=0755 type=file } path1.parent={ uid=0 gid=0 ino=335873 perm=0755 } exec={ realpath="/bin/date" argc=1 envc=21 argv[]={ "date" } envp[]={ "SHELL=/bin/bash" "TERM=linux" "HUSHLOGIN=FALSE" "USER=root" "LS_COLORS=rs=0:di=01;34:ln=01;36:hl=44;37:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.lzma=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.rar=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.axv=01;35:*.anx=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.axa=00;36:*.oga=00;36:*.spx=00;36:*.xspf=00;36:" "MAIL=/var/mail/root" "PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games" "PWD=/root" "LANG=en_US.UTF-8" "SHLVL=2" "HOME=/root" "LOGNAME=root" "LESSOPEN=|\040/usr/bin/lesspipe\040%s" "LESSCLOSE=/usr/bin/lesspipe\040%s\040%s" "_=/usr/bin/tcsh" "HOSTTYPE=i486-linux" "VENDOR=intel" "OSTYPE=linux" "MACHTYPE=i486" "GROUP=root" "HOST=tomoyo" } }
&lt;kernel&gt; /sbin/getty /bin/login /bin/bash /usr/bin/tcsh
allow_execute /bin/date
</p></blockquote>

<p>As you have seen above, by using TOMOYO Linux's MAC for file accesses functionality, you can monitor</p>

<ul>
<li>Which process with what invocation history is</li>
<li>When</li>
<li>Which files and directories</li>
<li>How it accessed</li>
</ul>

<p>in detail.</p>

<h2><a name="l9">(appendix) More information</a></h2>

<p>In this tutorial, you have experienced TOMOYO's basic access control functionality.
TOMOYO Linux has many features. Please see the following documents to utilize TOMOYO Linux more effectively.</p>

<ul>
<li><a href="http://tomoyo.sourceforge.jp/1.7/tool-editpolicy.html.en">How to use Policy Editor</a>: detailed usage of policy editor</li>
<li><a href="http://tomoyo.sourceforge.jp/1.7/policy-reference.html.en">Policy Specifications of TOMOYO Linux</a>: reference of TOMOYO Linux functions</li>
<li><a href="http://tomoyo.sourceforge.jp/1.7/index.html.en#tutorial">The world of TOMOYO Linux</a>: tutorial covering basic functionalities</li>
</ul>

<hr>
<address><a href="http://tomoyo.sourceforge.jp/">TOMOYO Linux</a> is supported by <a href="http://www.nttdata.co.jp/en/">NTT DATA CORPORATION</a><br>
<a href="mailto:haradats@gmail.com">Send message to Webadmin</a><br>
Last modified: $Date$<br>
<!--#include virtual="/cgi-bin/counter.pl" -->
</address>

<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</body>
</html>
