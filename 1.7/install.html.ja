<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="ja-JP">
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<meta http-equiv="Content-Style-Type" content="text/css">
<title>TOMOYO Linux 導入手順書</title>
<link rel="stylesheet" href="http://tomoyo.osdn.jp/tomoyo.css" media="all" type="text/css">
</head>
<body>
<p>Info: Version <a href="../1.8/">1.8.x</a> is available.</p>
<p style="text-align:right;"><a href="install.html.en">English Page</a></p>
<p style="text-align:right;">Last modified: $Date$</p>
<h1>第１章： TOMOYO Linux 対応カーネルとツールのインストール</h1>

<p>このページでは、 TOMOYO Linux 対応カーネルとツールをインストールする手順について説明します。</p>

<hr>

<h2>ステップ１：カーネルおよびツールのインストール</h2>

<p>カーネルをコンパイルするためには、以下のパッケージが必要です。</p>

<ul>
<li>gcc</li>
<li>make</li>
<li>ncurses</li>
</ul>

<p>カーネルのソースを <a href="https://www.kernel.org/pub/linux/kernel/v2.4/">linux-2.4</a> または <a href="https://www.kernel.org/pub/linux/kernel/v2.6/">linux-2.6</a> からダウンロードして展開して、そのディレクトリに移動してください。<br>
linux-2.4 については 2.4.37 に、 linux-2.6 については 2.6.27 ～ 2.6.37 に対応しています。例えばカーネル 2.6.37.6 を使う場合、以下の 2.$PATCHLEVEL.$SUBLEVEL を 2.6.37 に置き換えてください。</p>

<table border="1">
<tr><td>
[user@tomoyo ~]$ wget -O ccs-patch-1.7.3-20171111.tar.gz 'http://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/43375/ccs-patch-1.7.3-20171111.tar.gz'<br>
[user@tomoyo ~]$ wget -O ccs-patch-1.7.3-20171111.tar.gz.asc 'http://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/43375/ccs-patch-1.7.3-20171111.tar.gz.asc'<br>
[user@tomoyo ~]$ gpg ccs-patch-1.7.3-20171111.tar.gz.asc<br>
[user@tomoyo ~]$ tar -zxf ccs-patch-1.7.3-20171111.tar.gz<br>
[user@tomoyo ~]$ patch -sp1 &lt; patches/ccs-patch-2.$PATCHLEVEL.$SUBLEVEL.diff<br>
[user@tomoyo ~]$ make -s menuconfig
</td></tr>
</table>

<p>「Security options」画面に表示される以下の項目を選択してください。</p>

<ul>
<li>[*] CCSecurity support</li>
<li>[ ]   Compile as loadable kernel module
<li>[ ]   Disable by default
<li>(2048) Default maximal count for learning mode</li>
<li>(/sbin/ccs-init) Default policy loader</li>
<li>(/sbin/ccs-start) Alternative activation trigger</li>
<li>(/sbin/modprobe /sbin/hotplug) Built-in domain initializer programs</li>
<li>[*]&nbsp;&nbsp;&nbsp;Auditing interface support</li>
<li>(1024)&nbsp;&nbsp;Default maximal count for grant log</li>
<li>(1024)&nbsp;&nbsp;Default maximal count for reject log</li>
</ul>

<p>Compile as loadable kernel module を選択した場合、処理の大部分がカーネルモジュールとして切り出されるため、 vmlinux のサイズの増加を抑えることができます。組込み環境などで、 vmlinux のサイズに上限がある場合に選択してください。</p>

<p>Disable by default を選択した場合、カーネルのコマンドラインで ccsecurity=on という指定を行った場合だけ有効化されます。選択しなかった場合、カーネルのコマンドラインで ccsecurity=off という指定を行った場合だけ無効化されます。</p>

<p>カーネルコンフィグの作成が終わったら、カーネルをコンパイルしてください。</p>

<table border="1">
<tr><td>
[user@tomoyo ~]$ make -s dep<br>
[user@tomoyo ~]$ make -s<br>
[user@tomoyo ~]$ make -s modules<br>
[user@tomoyo ~]$ su<br>
[root@tomoyo ~]# make -s modules_install install
</td></tr>
</table>

<p>必要であれば initrd を作成してください。</p>

<p>ディストリビューション用カーネルをカスタマイズして使いたい場合は、以下の手順を参考にしてください。</p>

<table border="1">
<tr><td>
<a name="CentOS3">CentOS 3</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c3-2.4.21.sh 'http://svn.osdn.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.7.x/ccs-patch/specs/build-c3-2.4.21.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c3-2.4.21.sh<br>
</td></tr><tr><td>
<a name="CentOS4">CentOS 4</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c4-2.6.9.sh 'http://svn.osdn.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.7.x/ccs-patch/specs/build-c4-2.6.9.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c4-2.6.9.sh<br>
</td></tr><tr><td>
<a name="CentOS5">CentOS 5</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c5-2.6.18.sh 'http://svn.osdn.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.7.x/ccs-patch/specs/build-c5-2.6.18.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c5-2.6.18.sh<br>
</td></tr><tr><td>
<a name="CentOS6">CentOS 6</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-c6-2.6.32.sh 'http://svn.osdn.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.7.x/ccs-patch/specs/build-c6-2.6.32.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-c6-2.6.32.sh<br>
</td></tr><tr><td>
<a name="Asianux3">Asianux 3</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ax3-2.6.18.sh 'http://svn.osdn.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.7.x/ccs-patch/specs/build-ax3-2.6.18.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ax3-2.6.18.sh<br>
</td></tr><tr><td>
<a name="Ubuntu10.04">Ubuntu 10.04</a>
</td><td>
# ビルドスクリプトをダウンロードする。<br>
wget -O build-ubuntu_10.04.sh 'http://svn.osdn.jp/cgi-bin/viewcvs.cgi/*checkout*/trunk/1.7.x/ccs-patch/specs/build-ubuntu_10.04.sh?root=tomoyo'<br>
# ビルドスクリプトを実行する。<br>
sh build-ubuntu_10.04.sh<br>
</td></tr><tr><td>
<a name="Gentoo">Gentoo</a>
</td><td>
# layman パッケージをインストールする。<br>
emerge layman<br>
# subversion パッケージをインストールする。<br>
emerge subversion<br>
# レポジトリを登録する。<br>
layman -f -a sunrise<br>
# layman 用の make.conf を取り込むように /etc/make.conf を設定する。<br>
echo "source /usr/local/portage/layman/make.conf" &gt;&gt; /etc/make.conf<br>
# カーネルのソースをダウンロードする。<br>
emerge ccs-sources<br>
# genkernel コマンドを実行する。<br>
genkernel --menuconfig all<br>
# http://www.gentoo.org/doc/ja/kernel-upgrade.xml を見ながら grub の設定を行う。<br>
# ツールをインストールする。<br>
emerge ccs-tools
</td></tr>
</table>

<p>ツールパッケージをコンパイルするには以下のコマンドを実行してください。</p>

<table border="1">
<tr><td>
[user@tomoyo ~]$ wget -O ccs-tools-1.7.3-20120301.tar.gz 'http://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/43376/ccs-tools-1.7.3-20120301.tar.gz'<br>
[user@tomoyo ~]$ wget -O ccs-tools-1.7.3-20120301.tar.gz.asc 'http://osdn.jp/frs/redir.php?m=jaist&amp;f=/tomoyo/43376/ccs-tools-1.7.3-20120301.tar.gz.asc'<br>
[user@tomoyo ~]$ gpg ccs-tools-1.7.3-20120301.tar.gz.asc<br>
[user@tomoyo ~]$ tar -zxf ccs-tools-1.7.3-20120301.tar.gz<br>
[user@tomoyo ~]$ cd ccstools/<br>
[user@tomoyo ~]$ make -s<br>
[user@tomoyo ~]$ su<br>
[root@tomoyo ~]# make -s install
</td></tr>
</table>

<hr>

<p><a href="index.html.ja">目次へ戻る</a></p>
<p><a href="http://osdn.jp/"><img src="http://osdn.jp/sflogo.php?group_id=1973" width="96" height="31" alt="sflogo.php" title="SourceForge.jp"></a></p>
</body>
</html>
