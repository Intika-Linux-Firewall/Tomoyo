This is TOMOYO Linux patch for kernel 2.6.30-rc7.

Source code for this patch is http://www.kernel.org/pub/linux/kernel/v2.6/testing/linux-2.6.30-rc7.tar.bz2
---
 fs/Kconfig                      |    2 +
 fs/Makefile                     |    2 +
 fs/attr.c                       |   10 ++++++
 fs/compat.c                     |    5 ++-
 fs/compat_ioctl.c               |   13 ++++++++
 fs/exec.c                       |    5 ++-
 fs/fcntl.c                      |    9 ++++++
 fs/ioctl.c                      |   11 +++++++
 fs/namei.c                      |   59 ++++++++++++++++++++++++++++++++++++++++
 fs/namespace.c                  |   49 +++++++++++++++++++++++++++++++++
 fs/open.c                       |   29 +++++++++++++++++++
 fs/proc/Makefile                |    3 ++
 fs/proc/version.c               |   11 +++++++
 include/linux/init_task.h       |    4 ++
 include/linux/sched.h           |    8 +++++
 kernel/compat.c                 |    7 ++++
 kernel/kexec.c                  |    7 ++++
 kernel/kmod.c                   |    5 +++
 kernel/module.c                 |   11 +++++++
 kernel/ptrace.c                 |   11 +++++++
 kernel/sched.c                  |    7 ++++
 kernel/signal.c                 |   21 ++++++++++++++
 kernel/sys.c                    |   21 ++++++++++++++
 kernel/sysctl.c                 |    8 +++++
 kernel/time.c                   |   11 +++++++
 kernel/time/ntp.c               |   12 ++++++++
 net/ipv4/inet_connection_sock.c |    7 ++++
 net/ipv4/inet_hashtables.c      |    7 ++++
 net/ipv4/raw.c                  |    8 +++++
 net/ipv4/udp.c                  |   16 ++++++++++
 net/ipv6/raw.c                  |    8 +++++
 net/ipv6/udp.c                  |    8 +++++
 net/socket.c                    |   41 +++++++++++++++++++++++++++
 net/unix/af_unix.c              |    9 ++++++
 34 files changed, 442 insertions(+), 3 deletions(-)

--- linux-2.6.30-rc7.orig/fs/Kconfig
+++ linux-2.6.30-rc7/fs/Kconfig
@@ -265,4 +265,6 @@ endif
 source "fs/nls/Kconfig"
 source "fs/dlm/Kconfig"
 
+source "fs/Kconfig.ccs"
+
 endmenu
--- linux-2.6.30-rc7.orig/fs/Makefile
+++ linux-2.6.30-rc7/fs/Makefile
@@ -124,3 +124,5 @@ obj-$(CONFIG_OCFS2_FS)		+= ocfs2/
 obj-$(CONFIG_BTRFS_FS)		+= btrfs/
 obj-$(CONFIG_GFS2_FS)           += gfs2/
 obj-$(CONFIG_EXOFS_FS)          += exofs/
+
+include $(srctree)/fs/Makefile-2.6.ccs
--- linux-2.6.30-rc7.orig/fs/attr.c
+++ linux-2.6.30-rc7/fs/attr.c
@@ -14,6 +14,9 @@
 #include <linux/fcntl.h>
 #include <linux/quotaops.h>
 #include <linux/security.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* Taken over from the old code... */
 
@@ -162,6 +165,13 @@ int notify_change(struct dentry * dentry
 	error = security_inode_setattr(dentry, attr);
 	if (error)
 		return error;
+	/***** TOMOYO Linux start. *****/
+	if ((ia_valid & ATTR_MODE) && !ccs_capable(CCS_SYS_CHMOD))
+		return -EPERM;
+	if ((ia_valid & (ATTR_UID | ATTR_GID)) &&
+	    !ccs_capable(CCS_SYS_CHOWN))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if (ia_valid & ATTR_SIZE)
 		down_write(&dentry->d_inode->i_alloc_sem);
--- linux-2.6.30-rc7.orig/fs/compat.c
+++ linux-2.6.30-rc7/fs/compat.c
@@ -57,6 +57,9 @@
 #include <asm/mmu_context.h>
 #include <asm/ioctls.h>
 #include "internal.h"
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int compat_log = 1;
 
@@ -1543,7 +1546,7 @@ int compat_do_execve(char * filename,
 	if (retval < 0)
 		goto out;
 
-	retval = search_binary_handler(bprm, regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval < 0)
 		goto out;
 
--- linux-2.6.30-rc7.orig/fs/compat_ioctl.c
+++ linux-2.6.30-rc7/fs/compat_ioctl.c
@@ -113,6 +113,9 @@
 #ifdef CONFIG_SPARC
 #include <asm/fbio.h>
 #endif
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 static int do_ioctl32_pointer(unsigned int fd, unsigned int cmd,
 			      unsigned long arg, struct file *f)
@@ -2798,6 +2801,10 @@ asmlinkage long compat_sys_ioctl(unsigne
 
 	/* RED-PEN how should LSM module know it's handling 32bit? */
 	error = security_file_ioctl(filp, cmd, arg);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_fput;
 
@@ -2822,6 +2829,12 @@ asmlinkage long compat_sys_ioctl(unsigne
 		/*FALL THROUGH*/
 
 	default:
+		/***** TOMOYO Linux start. *****/
+		if (!ccs_capable(CCS_SYS_IOCTL)) {
+			error = -EPERM;
+			goto out_fput;
+		}
+		/***** TOMOYO Linux end. *****/
 		if (filp->f_op && filp->f_op->compat_ioctl) {
 			error = filp->f_op->compat_ioctl(filp, cmd, arg);
 			if (error != -ENOIOCTLCMD)
--- linux-2.6.30-rc7.orig/fs/exec.c
+++ linux-2.6.30-rc7/fs/exec.c
@@ -59,6 +59,9 @@
 #include <asm/mmu_context.h>
 #include <asm/tlb.h>
 #include "internal.h"
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int core_uses_pid;
 char core_pattern[CORENAME_MAX_SIZE] = "core";
@@ -1324,7 +1327,7 @@ int do_execve(char * filename,
 		goto out;
 
 	current->flags &= ~PF_KTHREAD;
-	retval = search_binary_handler(bprm,regs);
+	retval = ccs_search_binary_handler(bprm, regs);
 	if (retval < 0)
 		goto out;
 
--- linux-2.6.30-rc7.orig/fs/fcntl.c
+++ linux-2.6.30-rc7/fs/fcntl.c
@@ -24,6 +24,9 @@
 #include <asm/poll.h>
 #include <asm/siginfo.h>
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 void set_close_on_exec(unsigned int fd, int flag)
 {
@@ -157,6 +160,12 @@ static int setfl(int fd, struct file * f
 	if (((arg ^ filp->f_flags) & O_APPEND) && IS_APPEND(inode))
 		return -EPERM;
 
+	/***** TOMOYO Linux start. *****/
+	if (((arg ^ filp->f_flags) & O_APPEND) &&
+	    ccs_check_rewrite_permission(filp))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
+
 	/* O_NOATIME can only be set by the owner or superuser */
 	if ((arg & O_NOATIME) && !(filp->f_flags & O_NOATIME))
 		if (!is_owner_or_cap(inode))
--- linux-2.6.30-rc7.orig/fs/ioctl.c
+++ linux-2.6.30-rc7/fs/ioctl.c
@@ -17,6 +17,9 @@
 #include <linux/buffer_head.h>
 
 #include <asm/ioctls.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* So that the fiemap access checks can't overflow on 32 bit machines. */
 #define FIEMAP_MAX_EXTENTS	(UINT_MAX / sizeof(struct fiemap_extent))
@@ -40,6 +43,10 @@ static long vfs_ioctl(struct file *filp,
 
 	if (!filp->f_op)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_IOCTL))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if (filp->f_op->unlocked_ioctl) {
 		error = filp->f_op->unlocked_ioctl(filp, cmd, arg);
@@ -578,6 +585,10 @@ SYSCALL_DEFINE3(ioctl, unsigned int, fd,
 		goto out;
 
 	error = security_file_ioctl(filp, cmd, arg);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_ioctl_permission(filp, cmd, arg);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_fput;
 
--- linux-2.6.30-rc7.orig/fs/namei.c
+++ linux-2.6.30-rc7/fs/namei.c
@@ -37,6 +37,10 @@
 
 #define ACC_MODE(x) ("\000\004\002\006"[(x)&O_ACCMODE])
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
+
 /* [Feb-1997 T. Schoebel-Theuer]
  * Fundamental changes in the pathname lookup mechanisms (namei)
  * were necessary because of omirr.  The reason is that omirr needs
@@ -1533,6 +1537,13 @@ int may_open(struct path *path, int acc_
 		if (!is_owner_or_cap(inode))
 			return -EPERM;
 
+	/***** TOMOYO Linux start. *****/
+	/* includes O_APPEND and O_TRUNC checks */
+	error = ccs_check_open_permission(dentry, path->mnt, flag);
+	if (error)
+		return error;
+	/***** TOMOYO Linux end. *****/
+
 	/*
 	 * Ensure there are no outstanding leases on the file.
 	 */
@@ -1583,6 +1594,11 @@ static int __open_namei_create(struct na
 	if (!IS_POSIXACL(dir->d_inode))
 		mode &= ~current_umask();
 	error = security_path_mknod(&nd->path, path->dentry, mode, 0);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_mknod_permission(dir->d_inode, path->dentry,
+						   nd->path.mnt, mode, 0);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_unlock;
 	error = vfs_create(dir->d_inode, path->dentry, mode, nd);
@@ -1596,6 +1612,9 @@ out_unlock:
 	return may_open(&nd->path, 0, flag & ~O_TRUNC);
 }
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_vfs.h>
+/***** TOMOYO Linux end. *****/
 /*
  * Note that while the flag value (low two bits) for sys_open means:
  *	00 - read-only
@@ -2001,6 +2020,12 @@ SYSCALL_DEFINE4(mknodat, int, dfd, const
 	if (error)
 		goto out_dput;
 	error = security_path_mknod(&nd.path, dentry, mode, dev);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_mknod_permission(nd.path.dentry->d_inode,
+						   dentry, nd.path.mnt, mode,
+						   dev);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_drop_write;
 	switch (mode & S_IFMT) {
@@ -2076,6 +2101,11 @@ SYSCALL_DEFINE3(mkdirat, int, dfd, const
 	if (error)
 		goto out_dput;
 	error = security_path_mkdir(&nd.path, dentry, mode);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_mkdir_permission(nd.path.dentry->d_inode,
+						   dentry, nd.path.mnt, mode);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_drop_write;
 	error = vfs_mkdir(nd.path.dentry->d_inode, dentry, mode);
@@ -2190,6 +2220,11 @@ static long do_rmdir(int dfd, const char
 	if (error)
 		goto exit3;
 	error = security_path_rmdir(&nd.path, dentry);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_rmdir_permission(nd.path.dentry->d_inode,
+						   dentry, nd.path.mnt);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto exit4;
 	error = vfs_rmdir(nd.path.dentry->d_inode, dentry);
@@ -2279,6 +2314,12 @@ static long do_unlinkat(int dfd, const c
 		if (error)
 			goto exit2;
 		error = security_path_unlink(&nd.path, dentry);
+		/***** TOMOYO Linux start. *****/
+		if (!error)
+			error = ccs_check_unlink_permission(nd.path.dentry
+							    ->d_inode, dentry,
+							    nd.path.mnt);
+		/***** TOMOYO Linux end. *****/
 		if (error)
 			goto exit3;
 		error = vfs_unlink(nd.path.dentry->d_inode, dentry);
@@ -2364,6 +2405,11 @@ SYSCALL_DEFINE3(symlinkat, const char __
 	if (error)
 		goto out_dput;
 	error = security_path_symlink(&nd.path, dentry, from);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_symlink_permission(nd.path.dentry->d_inode,
+						     dentry, nd.path.mnt, from);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_drop_write;
 	error = vfs_symlink(nd.path.dentry->d_inode, dentry, from);
@@ -2464,6 +2510,12 @@ SYSCALL_DEFINE5(linkat, int, olddfd, con
 	if (error)
 		goto out_dput;
 	error = security_path_link(old_path.dentry, &nd.path, new_dentry);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_link_permission(old_path.dentry,
+						  nd.path.dentry->d_inode,
+						  new_dentry, nd.path.mnt);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto out_drop_write;
 	error = vfs_link(old_path.dentry, nd.path.dentry->d_inode, new_dentry);
@@ -2705,6 +2757,13 @@ SYSCALL_DEFINE4(renameat, int, olddfd, c
 		goto exit5;
 	error = security_path_rename(&oldnd.path, old_dentry,
 				     &newnd.path, new_dentry);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_rename_permission(old_dir->d_inode,
+						    old_dentry,
+						    new_dir->d_inode,
+						    new_dentry, newnd.path.mnt);
+	/***** TOMOYO Linux end. *****/
 	if (error)
 		goto exit6;
 	error = vfs_rename(old_dir->d_inode, old_dentry,
--- linux-2.6.30-rc7.orig/fs/namespace.c
+++ linux-2.6.30-rc7/fs/namespace.c
@@ -32,6 +32,12 @@
 #include <asm/unistd.h>
 #include "pnode.h"
 #include "internal.h"
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #define HASH_SHIFT ilog2(PAGE_SIZE / sizeof(struct list_head))
 #define HASH_SIZE (1UL << HASH_SHIFT)
@@ -1059,6 +1065,11 @@ static int do_umount(struct vfsmount *mn
 	if (retval)
 		return retval;
 
+	/***** SAKURA Linux start. *****/
+	if (ccs_may_umount(mnt))
+		return -EPERM;
+	/***** SAKURA Linux end. *****/
+
 	/*
 	 * Allow userspace to request a mountpoint be expired rather than
 	 * unmounting unconditionally. Unmount only happens if:
@@ -1148,6 +1159,10 @@ SYSCALL_DEFINE2(umount, char __user *, n
 {
 	struct path path;
 	int retval;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_UMOUNT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	retval = user_path(name, &path);
 	if (retval)
@@ -1496,6 +1511,11 @@ static int do_loopback(struct path *path
 
 	if (!check_mnt(path->mnt) || !check_mnt(old_path.mnt))
 		goto out;
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto out;
+	/***** SAKURA Linux end. *****/
 
 	err = -ENOMEM;
 	if (recurse)
@@ -1607,6 +1627,11 @@ static int do_move_mount(struct path *pa
 	if (!check_mnt(path->mnt) || !check_mnt(old_path.mnt))
 		goto out;
 
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_umount(old_path.mnt) || ccs_may_mount(path))
+		goto out;
+	/***** SAKURA Linux end. *****/
 	err = -ENOENT;
 	mutex_lock(&path->dentry->d_inode->i_mutex);
 	if (IS_DEADDIR(path->dentry->d_inode))
@@ -1710,6 +1735,11 @@ int do_add_mount(struct vfsmount *newmnt
 	err = -EINVAL;
 	if (S_ISLNK(newmnt->mnt_root->d_inode->i_mode))
 		goto unlock;
+	/***** SAKURA Linux start. *****/
+	err = -EPERM;
+	if (ccs_may_mount(path))
+		goto unlock;
+	/***** SAKURA Linux end. *****/
 
 	newmnt->mnt_flags = mnt_flags;
 	if ((err = graft_tree(newmnt, path)))
@@ -1933,6 +1963,17 @@ long do_mount(char *dev_name, char *dir_
 	if (data_page)
 		((char *)data_page)[PAGE_SIZE - 1] = 0;
 
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_MOUNT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
+	/***** SAKURA Linux start. *****/
+	retval = ccs_check_mount_permission(dev_name, dir_name, type_page,
+					    &flags);
+	if (retval)
+		return retval;
+	/***** SAKURA Linux end. *****/
+
 	/* Default to relatime unless overriden */
 	if (!(flags & MS_NOATIME))
 		mnt_flags |= MNT_RELATIME;
@@ -2141,6 +2182,10 @@ SYSCALL_DEFINE2(pivot_root, const char _
 
 	if (!capable(CAP_SYS_ADMIN))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PIVOT_ROOT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	error = user_path_dir(new_root, &new);
 	if (error)
@@ -2154,6 +2199,10 @@ SYSCALL_DEFINE2(pivot_root, const char _
 		goto out1;
 
 	error = security_sb_pivotroot(&old, &new);
+	/***** SAKURA Linux start. *****/
+	if (!error)
+		error = ccs_check_pivot_root_permission(&old, &new);
+	/***** SAKURA Linux end. *****/
 	if (error) {
 		path_put(&old);
 		goto out1;
--- linux-2.6.30-rc7.orig/fs/open.c
+++ linux-2.6.30-rc7/fs/open.c
@@ -30,6 +30,12 @@
 #include <linux/audit.h>
 #include <linux/falloc.h>
 #include <linux/fs_struct.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 int vfs_statfs(struct dentry *dentry, struct kstatfs *buf)
 {
@@ -273,6 +279,11 @@ static long do_sys_truncate(const char _
 	error = locks_verify_truncate(inode, NULL, length);
 	if (!error)
 		error = security_path_truncate(&path, length, 0);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_truncate_permission(path.dentry, path.mnt,
+						      length, 0);
+	/***** TOMOYO Linux end. *****/
 	if (!error) {
 		vfs_dq_init(inode);
 		error = do_truncate(path.dentry, length, 0, NULL);
@@ -332,6 +343,12 @@ static long do_sys_ftruncate(unsigned in
 	if (!error)
 		error = security_path_truncate(&file->f_path, length,
 					       ATTR_MTIME|ATTR_CTIME);
+	/***** TOMOYO Linux start. *****/
+	if (!error)
+		error = ccs_check_truncate_permission(dentry, file->f_vfsmnt,
+						      length,
+						      ATTR_MTIME|ATTR_CTIME);
+	/***** TOMOYO Linux end. *****/
 	if (!error)
 		error = do_truncate(dentry, length, ATTR_MTIME|ATTR_CTIME, file);
 out_putf:
@@ -586,6 +603,14 @@ SYSCALL_DEFINE1(chroot, const char __use
 	error = -EPERM;
 	if (!capable(CAP_SYS_CHROOT))
 		goto dput_and_out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_CHROOT))
+		goto dput_and_out;
+	/***** TOMOYO Linux end. *****/
+	/***** SAKURA Linux start. *****/
+	if (ccs_check_chroot_permission(&path))
+		goto dput_and_out;
+	/***** SAKURA Linux end. *****/
 
 	set_fs_root(current->fs, &path);
 	error = 0;
@@ -1157,6 +1182,10 @@ EXPORT_SYMBOL(sys_close);
  */
 SYSCALL_DEFINE0(vhangup)
 {
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_VHANGUP))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	if (capable(CAP_SYS_TTY_CONFIG)) {
 		tty_vhangup_self();
 		return 0;
--- linux-2.6.30-rc7.orig/fs/proc/Makefile
+++ linux-2.6.30-rc7/fs/proc/Makefile
@@ -25,3 +25,6 @@ proc-$(CONFIG_PROC_VMCORE)	+= vmcore.o
 proc-$(CONFIG_PROC_DEVICETREE)	+= proc_devtree.o
 proc-$(CONFIG_PRINTK)	+= kmsg.o
 proc-$(CONFIG_PROC_PAGE_MONITOR)	+= page.o
+
+proc-$(CONFIG_SAKURA) += ccs_proc.o
+proc-$(CONFIG_TOMOYO) += ccs_proc.o
--- linux-2.6.30-rc7.orig/fs/proc/version.c
+++ linux-2.6.30-rc7/fs/proc/version.c
@@ -32,3 +32,14 @@ static int __init proc_version_init(void
 	return 0;
 }
 module_init(proc_version_init);
+
+/***** CCS start. *****/
+#if defined(CONFIG_SAKURA) || defined(CONFIG_TOMOYO)
+static int __init ccs_show_version(void)
+{
+	printk(KERN_INFO "Hook version: 2.6.30-rc7 2009/05/24\n");
+	return 0;
+}
+module_init(ccs_show_version);
+#endif
+/***** CCS end. *****/
--- linux-2.6.30-rc7.orig/include/linux/init_task.h
+++ linux-2.6.30-rc7/include/linux/init_task.h
@@ -174,6 +174,10 @@ extern struct cred init_cred;
 	INIT_TRACE_IRQFLAGS						\
 	INIT_LOCKDEP							\
 	INIT_FTRACE_GRAPH						\
+	/***** TOMOYO Linux start. *****/        \
+	.ccs_domain_info = NULL,                 \
+	.ccs_flags = 0,                          \
+	/***** TOMOYO Linux end. *****/          \
 }
 
 
--- linux-2.6.30-rc7.orig/include/linux/sched.h
+++ linux-2.6.30-rc7/include/linux/sched.h
@@ -29,6 +29,10 @@
 #define CLONE_NEWNET		0x40000000	/* New network namespace */
 #define CLONE_IO		0x80000000	/* Clone io context */
 
+/***** TOMOYO Linux start. *****/
+struct ccs_domain_info;
+/***** TOMOYO Linux end. *****/
+
 /*
  * Scheduling policies
  */
@@ -1429,6 +1433,10 @@ struct task_struct {
 	/* state flags for use by tracers */
 	unsigned long trace;
 #endif
+	/***** TOMOYO Linux start. *****/
+	struct ccs_domain_info *ccs_domain_info;
+	u32 ccs_flags;
+	/***** TOMOYO Linux end. *****/
 };
 
 /* Future-safe accessor for struct task_struct's cpus_allowed. */
--- linux-2.6.30-rc7.orig/kernel/compat.c
+++ linux-2.6.30-rc7/kernel/compat.c
@@ -27,6 +27,9 @@
 #include <linux/ptrace.h>
 
 #include <asm/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * Note that the native side is already converted to a timespec, because
@@ -915,6 +918,10 @@ asmlinkage long compat_sys_stime(compat_
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	do_settimeofday(&tv);
 	return 0;
--- linux-2.6.30-rc7.orig/kernel/kexec.c
+++ linux-2.6.30-rc7/kernel/kexec.c
@@ -37,6 +37,9 @@
 #include <asm/io.h>
 #include <asm/system.h>
 #include <asm/sections.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /* Per cpu memory for storing cpu states in case of system crash. */
 note_buf_t* crash_notes;
@@ -943,6 +946,10 @@ SYSCALL_DEFINE4(kexec_load, unsigned lon
 	/* We only trust the superuser with rebooting the system. */
 	if (!capable(CAP_SYS_BOOT))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_KEXEC_LOAD))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 * Verify we have a legal set of flags
--- linux-2.6.30-rc7.orig/kernel/kmod.c
+++ linux-2.6.30-rc7/kernel/kmod.c
@@ -177,6 +177,11 @@ static int ____call_usermodehelper(void 
 	 */
 	set_user_nice(current, 0);
 
+	/***** TOMOYO Linux start. *****/
+	current->ccs_domain_info = NULL;
+	current->ccs_flags = 0;
+	/***** TOMOYO Linux end. *****/
+
 	retval = kernel_execve(sub_info->path, sub_info->argv, sub_info->envp);
 
 	/* Exec failed? */
--- linux-2.6.30-rc7.orig/kernel/module.c
+++ linux-2.6.30-rc7/kernel/module.c
@@ -52,6 +52,9 @@
 #include <linux/ftrace.h>
 #include <linux/async.h>
 #include <linux/percpu.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #if 0
 #define DEBUGP printk
@@ -779,6 +782,10 @@ SYSCALL_DEFINE2(delete_module, const cha
 
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if (strncpy_from_user(name, name_user, MODULE_NAME_LEN-1) < 0)
 		return -EFAULT;
@@ -2338,6 +2345,10 @@ SYSCALL_DEFINE3(init_module, void __user
 	/* Must have permission */
 	if (!capable(CAP_SYS_MODULE))
 		return -EPERM;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_USE_KERNEL_MODULE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/* Only one module load at a time, please */
 	if (mutex_lock_interruptible(&module_mutex) != 0)
--- linux-2.6.30-rc7.orig/kernel/ptrace.c
+++ linux-2.6.30-rc7/kernel/ptrace.c
@@ -22,6 +22,9 @@
 #include <linux/pid_namespace.h>
 #include <linux/syscalls.h>
 #include <linux/uaccess.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 
 /*
@@ -652,6 +655,10 @@ SYSCALL_DEFINE4(ptrace, long, request, l
 {
 	struct task_struct *child;
 	long ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
@@ -773,6 +780,10 @@ asmlinkage long compat_sys_ptrace(compat
 {
 	struct task_struct *child;
 	long ret;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_PTRACE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 * This lock_kernel fixes a subtle race with suid exec
--- linux-2.6.30-rc7.orig/kernel/sched.c
+++ linux-2.6.30-rc7/kernel/sched.c
@@ -76,6 +76,9 @@
 
 #include <asm/tlb.h>
 #include <asm/irq_regs.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "sched_cpupri.h"
 
@@ -5678,6 +5681,10 @@ int can_nice(const struct task_struct *p
 SYSCALL_DEFINE1(nice, int, increment)
 {
 	long nice, retval;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_NICE))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/*
 	 * Setpriority might change our priority at the same moment.
--- linux-2.6.30-rc7.orig/kernel/signal.c
+++ linux-2.6.30-rc7/kernel/signal.c
@@ -34,6 +34,9 @@
 #include <asm/unistd.h>
 #include <asm/siginfo.h>
 #include "audit.h"	/* audit_signal_info() */
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * SLAB caches for signal bits.
@@ -2268,6 +2271,12 @@ SYSCALL_DEFINE4(rt_sigtimedwait, const s
 SYSCALL_DEFINE2(kill, pid_t, pid, int, sig)
 {
 	struct siginfo info;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	info.si_signo = sig;
 	info.si_errno = 0;
@@ -2329,6 +2338,12 @@ SYSCALL_DEFINE3(tgkill, pid_t, tgid, pid
 	/* This is only valid for single tasks */
 	if (pid <= 0 || tgid <= 0)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	return do_tkill(tgid, pid, sig);
 }
@@ -2341,6 +2356,12 @@ SYSCALL_DEFINE2(tkill, pid_t, pid, int, 
 	/* This is only valid for single tasks */
 	if (pid <= 0)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (sig && !ccs_capable(CCS_SYS_KILL))
+		return -EPERM;
+	if (sig && ccs_check_signal_acl(sig, pid))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	return do_tkill(0, pid, sig);
 }
--- linux-2.6.30-rc7.orig/kernel/sys.c
+++ linux-2.6.30-rc7/kernel/sys.c
@@ -44,6 +44,9 @@
 #include <asm/uaccess.h>
 #include <asm/io.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifndef SET_UNALIGN_CTL
 # define SET_UNALIGN_CTL(a,b)	(-EINVAL)
@@ -154,6 +157,12 @@ SYSCALL_DEFINE3(setpriority, int, which,
 
 	if (which > PRIO_USER || which < PRIO_PROCESS)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_NICE)) {
+		error = -EPERM;
+		goto out;
+	}
+	/***** TOMOYO Linux end. *****/
 
 	/* normalize: avoid signed division (rounding problems) */
 	error = -ESRCH;
@@ -373,6 +382,10 @@ SYSCALL_DEFINE4(reboot, int, magic1, int
 			magic2 != LINUX_REBOOT_MAGIC2B &&
 	                magic2 != LINUX_REBOOT_MAGIC2C))
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_REBOOT))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	/* Instead of trying to make the power_off code look like
 	 * halt when pm_power_off is not set do it the easy way.
@@ -1417,6 +1430,10 @@ SYSCALL_DEFINE2(sethostname, char __user
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 	down_write(&uts_sem);
 	errno = -EFAULT;
 	if (!copy_from_user(tmp, name, len)) {
@@ -1466,6 +1483,10 @@ SYSCALL_DEFINE2(setdomainname, char __us
 		return -EPERM;
 	if (len < 0 || len > __NEW_UTS_LEN)
 		return -EINVAL;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETHOSTNAME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	down_write(&uts_sem);
 	errno = -EFAULT;
--- linux-2.6.30-rc7.orig/kernel/sysctl.c
+++ linux-2.6.30-rc7/kernel/sysctl.c
@@ -52,6 +52,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/processor.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #ifdef CONFIG_X86
 #include <asm/nmi.h>
@@ -1709,6 +1712,11 @@ int do_sysctl(int __user *name, int nlen
 
 	for (head = sysctl_head_next(NULL); head;
 			head = sysctl_head_next(head)) {
+		/***** TOMOYO Linux start. *****/
+		error = ccs_parse_table(name, nlen, oldval, newval,
+					head->ctl_table);
+		if (!error)
+		/***** TOMOYO Linux end. *****/
 		error = parse_table(name, nlen, oldval, oldlenp, 
 					newval, newlen,
 					head->root, head->ctl_table);
--- linux-2.6.30-rc7.orig/kernel/time.c
+++ linux-2.6.30-rc7/kernel/time.c
@@ -41,6 +41,9 @@
 
 #include <asm/uaccess.h>
 #include <asm/unistd.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 #include "timeconst.h"
 
@@ -92,6 +95,10 @@ SYSCALL_DEFINE1(stime, time_t __user *, 
 	err = security_settime(&tv, NULL);
 	if (err)
 		return err;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	do_settimeofday(&tv);
 	return 0;
@@ -163,6 +170,10 @@ int do_sys_settimeofday(struct timespec 
 	error = security_settime(tv, tz);
 	if (error)
 		return error;
+	/***** TOMOYO Linux start. *****/
+	if (!ccs_capable(CCS_SYS_SETTIME))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	if (tz) {
 		/* SMP safe, global irq locking makes it work. */
--- linux-2.6.30-rc7.orig/kernel/time/ntp.c
+++ linux-2.6.30-rc7/kernel/time/ntp.c
@@ -14,6 +14,9 @@
 #include <linux/timex.h>
 #include <linux/time.h>
 #include <linux/mm.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 /*
  * NTP timekeeping variables:
@@ -459,10 +462,19 @@ int do_adjtimex(struct timex *txc)
 		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
 		    !capable(CAP_SYS_TIME))
 			return -EPERM;
+		/***** TOMOYO Linux start. *****/
+		if (!(txc->modes & ADJ_OFFSET_READONLY) &&
+		    !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
+		/***** TOMOYO Linux end. *****/
 	} else {
 		/* In order to modify anything, you gotta be super-user! */
 		 if (txc->modes && !capable(CAP_SYS_TIME))
 			return -EPERM;
+		/***** TOMOYO Linux start. *****/
+		if (txc->modes && !ccs_capable(CCS_SYS_SETTIME))
+			return -EPERM;
+		/***** TOMOYO Linux end. *****/
 
 		/*
 		 * if the quartz is off by more than 10% then
--- linux-2.6.30-rc7.orig/net/ipv4/inet_connection_sock.c
+++ linux-2.6.30-rc7/net/ipv4/inet_connection_sock.c
@@ -23,6 +23,9 @@
 #include <net/route.h>
 #include <net/tcp_states.h>
 #include <net/xfrm.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 #ifdef INET_CSK_DEBUG
 const char inet_csk_timer_bug_msg[] = "inet_csk BUG: unknown timer value\n";
@@ -111,6 +114,10 @@ again:
 			head = &hashinfo->bhash[inet_bhashfn(net, rover,
 					hashinfo->bhash_size)];
 			spin_lock(&head->lock);
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(rover))
+				goto next;
+			/***** SAKURA Linux end. *****/
 			inet_bind_bucket_for_each(tb, node, &head->chain)
 				if (ib_net(tb) == net && tb->port == rover) {
 					if (tb->fastreuse > 0 &&
--- linux-2.6.30-rc7.orig/net/ipv4/inet_hashtables.c
+++ linux-2.6.30-rc7/net/ipv4/inet_hashtables.c
@@ -22,6 +22,9 @@
 #include <net/inet_connection_sock.h>
 #include <net/inet_hashtables.h>
 #include <net/ip.h>
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
 
 /*
  * Allocate and initialize a new local port bind bucket.
@@ -443,6 +446,10 @@ int __inet_hash_connect(struct inet_time
 		local_bh_disable();
 		for (i = 1; i <= remaining; i++) {
 			port = low + (i + offset) % remaining;
+			/***** SAKURA Linux start. *****/
+			if (ccs_lport_reserved(port))
+				continue;
+			/***** SAKURA Linux end. *****/
 			head = &hinfo->bhash[inet_bhashfn(net, port,
 					hinfo->bhash_size)];
 			spin_lock(&head->lock);
--- linux-2.6.30-rc7.orig/net/ipv4/raw.c
+++ linux-2.6.30-rc7/net/ipv4/raw.c
@@ -77,6 +77,9 @@
 #include <linux/seq_file.h>
 #include <linux/netfilter.h>
 #include <linux/netfilter_ipv4.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
 
 static struct raw_hashinfo raw_v4_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v4_hashinfo.lock),
@@ -666,6 +669,11 @@ static int raw_recvmsg(struct kiocb *ioc
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
+	/***** TOMOYO Linux end. *****/
 
 	copied = skb->len;
 	if (len < copied) {
--- linux-2.6.30-rc7.orig/net/ipv4/udp.c
+++ linux-2.6.30-rc7/net/ipv4/udp.c
@@ -105,6 +105,12 @@
 #include <net/checksum.h>
 #include <net/xfrm.h>
 #include "udp_impl.h"
+/***** SAKURA Linux start. *****/
+#include <linux/sakura.h>
+/***** SAKURA Linux end. *****/
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
 
 struct udp_table udp_table;
 EXPORT_SYMBOL(udp_table);
@@ -195,7 +201,10 @@ int udp_lib_get_port(struct sock *sk, un
 			 */
 			do {
 				if (low <= snum && snum <= high &&
-				    !test_bit(snum / UDP_HTABLE_SIZE, bitmap))
+				    !test_bit(snum / UDP_HTABLE_SIZE, bitmap)
+				    /***** SAKURA Linux start. *****/
+				    && !ccs_lport_reserved(snum))
+				    /***** SAKURA Linux end. *****/
 					goto found;
 				snum += rand;
 			} while (snum != first);
@@ -901,6 +910,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
+	/***** TOMOYO Linux end. *****/
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.30-rc7.orig/net/ipv6/raw.c
+++ linux-2.6.30-rc7/net/ipv6/raw.c
@@ -59,6 +59,9 @@
 
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
 
 static struct raw_hashinfo raw_v6_hashinfo = {
 	.lock = __RW_LOCK_UNLOCKED(raw_v6_hashinfo.lock),
@@ -465,6 +468,11 @@ static int rawv6_recvmsg(struct kiocb *i
 	skb = skb_recv_datagram(sk, flags, noblock, &err);
 	if (!skb)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
+	/***** TOMOYO Linux end. *****/
 
 	copied = skb->len;
 	if (copied > len) {
--- linux-2.6.30-rc7.orig/net/ipv6/udp.c
+++ linux-2.6.30-rc7/net/ipv6/udp.c
@@ -48,6 +48,9 @@
 #include <linux/proc_fs.h>
 #include <linux/seq_file.h>
 #include "udp_impl.h"
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
 
 int ipv6_rcv_saddr_equal(const struct sock *sk, const struct sock *sk2)
 {
@@ -212,6 +215,11 @@ try_again:
 				  &peeked, &err);
 	if (!skb)
 		goto out;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_recvmsg_permission(sk, skb, flags);
+	if (err)
+		goto out;
+	/***** TOMOYO Linux end. *****/
 
 	ulen = skb->len - sizeof(struct udphdr);
 	copied = len;
--- linux-2.6.30-rc7.orig/net/socket.c
+++ linux-2.6.30-rc7/net/socket.c
@@ -96,6 +96,11 @@
 #include <net/sock.h>
 #include <linux/netfilter.h>
 
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+#include <linux/tomoyo_socket.h>
+/***** TOMOYO Linux end. *****/
+
 static int sock_no_open(struct inode *irrelevant, struct file *dontcare);
 static ssize_t sock_aio_read(struct kiocb *iocb, const struct iovec *iov,
 			 unsigned long nr_segs, loff_t pos);
@@ -569,6 +574,12 @@ static inline int __sock_sendmsg(struct 
 	err = security_socket_sendmsg(sock, msg, size);
 	if (err)
 		return err;
+	/***** TOMOYO Linux start. *****/
+	if (ccs_socket_sendmsg_permission(sock,
+					  (struct sockaddr *) msg->msg_name,
+					  msg->msg_namelen))
+		return -EPERM;
+	/***** TOMOYO Linux end. *****/
 
 	return sock->ops->sendmsg(iocb, sock, msg, size);
 }
@@ -1170,6 +1181,12 @@ static int __sock_create(struct net *net
 		family = PF_PACKET;
 	}
 
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_create_permission(family, type, protocol);
+	if (err)
+		return err;
+	/***** TOMOYO Linux end. *****/
+
 	err = security_socket_create(family, type, protocol, kern);
 	if (err)
 		return err;
@@ -1418,6 +1435,13 @@ SYSCALL_DEFINE3(bind, int, fd, struct so
 			err = security_socket_bind(sock,
 						   (struct sockaddr *)&address,
 						   addrlen);
+			/***** TOMOYO Linux start. *****/
+			if (!err)
+				err = ccs_socket_bind_permission(sock,
+							 (struct sockaddr *)
+								 &address,
+								 addrlen);
+			/***** TOMOYO Linux end. *****/
 			if (!err)
 				err = sock->ops->bind(sock,
 						      (struct sockaddr *)
@@ -1447,6 +1471,10 @@ SYSCALL_DEFINE2(listen, int, fd, int, ba
 			backlog = somaxconn;
 
 		err = security_socket_listen(sock, backlog);
+		/***** TOMOYO Linux start. *****/
+		if (!err)
+			err = ccs_socket_listen_permission(sock);
+		/***** TOMOYO Linux end. *****/
 		if (!err)
 			err = sock->ops->listen(sock, backlog);
 
@@ -1517,6 +1545,13 @@ SYSCALL_DEFINE4(accept4, int, fd, struct
 	if (err < 0)
 		goto out_fd;
 
+	/***** TOMOYO Linux start. *****/
+	if (ccs_socket_accept_permission(newsock,
+					 (struct sockaddr *) &address)) {
+		err = -ECONNABORTED; /* Hope less harmful than -EPERM. */
+		goto out_fd;
+	}
+	/***** TOMOYO Linux end. *****/
 	if (upeer_sockaddr) {
 		if (newsock->ops->getname(newsock, (struct sockaddr *)&address,
 					  &len, 2) < 0) {
@@ -1580,6 +1615,12 @@ SYSCALL_DEFINE3(connect, int, fd, struct
 	err = move_addr_to_kernel(uservaddr, addrlen, (struct sockaddr *)&address);
 	if (err < 0)
 		goto out_put;
+	/***** TOMOYO Linux start. *****/
+	err = ccs_socket_connect_permission(sock, (struct sockaddr *) &address,
+					    addrlen);
+	if (err)
+		goto out_put;
+	/***** TOMOYO Linux end. *****/
 
 	err =
 	    security_socket_connect(sock, (struct sockaddr *)&address, addrlen);
--- linux-2.6.30-rc7.orig/net/unix/af_unix.c
+++ linux-2.6.30-rc7/net/unix/af_unix.c
@@ -114,6 +114,9 @@
 #include <linux/mount.h>
 #include <net/checksum.h>
 #include <linux/security.h>
+/***** TOMOYO Linux start. *****/
+#include <linux/tomoyo.h>
+/***** TOMOYO Linux end. *****/
 
 static struct hlist_head unix_socket_table[UNIX_HASH_SIZE + 1];
 static DEFINE_SPINLOCK(unix_table_lock);
@@ -837,6 +840,12 @@ static int unix_bind(struct socket *sock
 		if (err)
 			goto out_mknod_dput;
 		err = security_path_mknod(&nd.path, dentry, mode, 0);
+		/***** TOMOYO Linux start. *****/
+		if (!err)
+			err = ccs_check_mknod_permission(nd.path.dentry
+							 ->d_inode, dentry,
+							 nd.path.mnt, mode, 0);
+		/***** TOMOYO Linux end. *****/
 		if (err)
 			goto out_mknod_drop_write;
 		err = vfs_mknod(nd.path.dentry->d_inode, dentry, mode, 0);
