<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html lang="en-US">
<head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="../media/tomoyolinux.css" media="all" type="text/css">
<title>TOMOYO Linux 2.3.x : The Official Guide : Chapter 6</title>
</head>

<body>

<div id="titlebar">
<a href="../index.html.en"><img src="../media/tomoyotitle.png" alt="tomoyotitle.png" width="320" height="40" border="0" align="left"></a>
</div>

<div id="navbar" class="tomoyo-documentation">
<ul id="navbarlist">
<li id="tomoyo-home"><a href="../index.html.en" title="TOMOYO Linux Home Page">Home</a></li>
<li id="tomoyo-about"><a href="../about.html.en" title="About TOMOYO Linux">About</a></li>
<li id="tomoyo-download"><a href="../download.html.en" title="Get TOMOYO Linux">Download</a></li>
<li id="tomoyo-changelogs"><a href="../changelogs.html.en" title="TOMOYO Linux ChangeLogs">ChangeLogs</a></li>
<li id="tomoyo-documentation"><a href="../documentation.html.en" title="Official Documentation">Documentation</a></li>
<li id="tomoyo-support"><a href="../support.html.en" title="Support information">Support</a></li>
<li id="tomoyo-links"><a href="../links.html.en" title="Links">Links</a></li>
</ul>
<ul id="switch-language">
<li id="tomoyo-switch-language"><a href="chapter-6.html.ja" title="Go to Japanese page">Japanese page</a></li>
</ul>
</div>

<div id="content">

<div id="documentation">

<div class="navheader">
<p><a href="chapter-5.html.en">&lt;Prev&gt;</a> <a href="index.html.en">&lt;Index&gt;</a> <a href="chapter-7.html.en">&lt;Next&gt;</a></p>
</div>

<h2>Chapter 6: How do I develop policy?</h2>

<h3><a name="6.1">6.1. Patterning temporary files</a></h3>

<p>A particular domain may require many different access permissions to many different resources. Since "Enforcing Mode" allows access to only resources explicitly defined, it is important to cover all necessary resources. To do this, permissions can be patterned. A patterned permission will allow multiple domain policy entries to be shortened into a single entry.</p>

<p>This is particularly important for temporary files due to the variety of single-use pathnames involved. They can either be handled in the manner described below, or handled interactively using the policy editor. For details on handling permissions interactively, see how to <a href="tool-editpolicy.html.en#redundant">Remove redundant entries</a>.</p>

<p>Use <code>tomoyo-findtemp</code> to find pathnames from domain policy that are potentially temporary files:</p>

<pre class="command">
# /usr/sbin/tomoyo-findtemp &lt; /sys/kernel/security/tomoyo/domain_policy
</pre>
<pre class="output">
/tmp/RsACr8YD
/tmp/RsXg3Aav
/var/run/nscd/socket
/var/spool/clientmqueue/dfoBPETPpH002933
/var/spool/clientmqueue/dfoBPETf92002944
/var/spool/clientmqueue/qfoBPETPpH002933
/var/spool/clientmqueue/qfoBPETf92002944
/var/spool/clientmqueue/xfoBPETPpH002933
/var/spool/clientmqueue/xfoBPETf92002944
</pre>

<p>In the example above, all except "/var/run/nscd/socket" can be considered to be temporary files. Thus, patterns can be made for these pathnames.</p>

<p>First, the type of pattern must be considered. The strings here appear to be random characters. Thus, the "<strong>\?</strong>" pattern which matches any single character other than "/", and the "<strong>\*</strong>" pattern which matches zero or more repetitions of any characters other than "/" can be used. See <a href="policy-specification/expression-rules.html.en#wildcard">Wildcard expression rules</a> for a list of possible wildcards.</p>

<p>Use <code>tomoyo-patternize</code> to convert into patterns non-interactively. Rewriting rules are specified in "/etc/tomoyo/tools/patternize.conf" file, as shown below:</p>

<pre>
# This file contains rewriting rules used by tomoyo-patternize command.

# Domain policy consists with domain declaration lines (which start with
# &lt;kernel&gt; ) and acl declaration lines (which do not start with &lt;kernel&gt; ).
# You can refer the former using 'domain' keyword and the latter using 'acl'
# keyword.
#
# Words in each line are separated by a space character. Therefore, you can
# use 'domain[index]', 'acl[index]' for referring index'th word of the line.
# The index starts from 1, and 0 refers the whole line (i.e.
# 'domain[0]' = 'domain', 'acl[0]' = 'acl').
#
# Three operators are provided for conditional rewriting.
# '.contains' is for 'fgrep keyword' match.
# '.equals' is for 'grep ^keyword$' match.
# '.starts' is for 'grep ^keyword' match.
#
# Rewriting rules are defined using multi-lined chunks. A chunk is terminated
# by a 'rewrite' line which specifies old pattern and new pattern.
# A 'rewrite' line is evaluated only when all preceding 'domain' and 'acl'
# lines in that chunk have matched.
# Evaluation stops at first 'rewrite' line where a word matched old pattern.
# Therefore, no words are rewritten more than once.
#
# For user's convenience, new pattern can be omitted if old pattern is reused
# for new pattern.

# Please use TOMOYO Linux's escape rule (e.g. '\040' rather than '\ ' for
# representing a ' ' in a word).

# Files on proc filesystem.
rewrite path_pattern proc:/self/task/\$/fdinfo/\$
rewrite path_pattern proc:/self/task/\$/fd/\$
rewrite head_pattern proc:/self/task/\$/
rewrite path_pattern proc:/self/fdinfo/\$
rewrite path_pattern proc:/self/fd/\$
rewrite head_pattern proc:/self/
rewrite path_pattern proc:/\$/task/\$/fdinfo/\$
rewrite path_pattern proc:/\$/task/\$/fd/\$
rewrite head_pattern proc:/\$/task/\$/
rewrite path_pattern proc:/\$/fdinfo/\$
rewrite path_pattern proc:/\$/fd/\$
rewrite head_pattern proc:/\$/

# Files on devpts filesystem.
rewrite path_pattern devpts:/\$

# Files on pipe filesystem.
rewrite path_pattern pipe:[\$]
rewrite path_pattern pipefs:/[\$]

# Files on / partition.
rewrite tail_pattern /etc/mtab~\$
rewrite tail_pattern /etc/tomoyo/policy/\*/domain_policy.conf
rewrite tail_pattern /etc/tomoyo/policy/\*/exception_policy.conf
rewrite tail_pattern /etc/tomoyo/policy/\*/manager.conf
rewrite tail_pattern /etc/tomoyo/policy/\*/profile.conf
rewrite tail_pattern /etc/tomoyo/policy/\*/

# Files on /tmp/ partition.
rewrite tail_pattern /vte\?\?\?\?\?\?
rewrite tail_pattern /.ICE-unix/\$
rewrite tail_pattern /keyring-\?\?\?\?\?\?/socket.ssh
rewrite tail_pattern /orbit-\*/bonobo-activation-register-\X.lock
rewrite tail_pattern /orbit-\*/bonobo-activation-server-\X-ior
rewrite tail_pattern /orbit-\*/linc-\*
rewrite tail_pattern /orbit-\*/
rewrite tail_pattern /sh-thd-\$
rewrite tail_pattern /zman\?\?\?\?\?\?

# Files on home directory.
rewrite tail_pattern /.ICEauthority-\?
rewrite tail_pattern /.xauth\?\?\?\?\?\?
rewrite tail_pattern /.xauth\?\?\?\?\?\?-?
rewrite tail_pattern /.local/share/applications/preferred-mail-reader.desktop.\?\?\?\?\?\?
rewrite tail_pattern /.local/share/applications/preferred-web-browser.desktop.\?\?\?\?\?\?

# Files on /var/ partition.
rewrite tail_pattern /cache/fontconfig/\X-le64.cache-3
rewrite tail_pattern /lib/gdm/.pulse/\X-default-source
rewrite tail_pattern /lib/gdm/.pulse/\X-default-sink
rewrite tail_pattern /lib/gdm/.dbus/session-bus/\X-\X
rewrite tail_pattern /run/gdm/auth-for-\*/database-\?
rewrite tail_pattern /run/gdm/auth-for-\*/database
rewrite tail_pattern /run/gdm/auth-for-\*/
rewrite tail_pattern /spool/abrt/pyhook-\*/\{\*\}/\*
rewrite tail_pattern /spool/abrt/pyhook-\*/\{\*\}/
</pre>

<p>The <strong>"path_pattern"</strong> directive matches the whole pathname.<br>
The <strong>"head_pattern"</strong> directive matches leading pathname.<br>
The <strong>"tail_pattern"</strong> directive matches trailing pathname.</p>

<p>Append patterns for "/tmp/Rs\?\?\?\?\?\?" and "/var/spool/clientmqueue/\*" to /etc/tomoyo/tools/patternize.conf file:</p>

<pre>
rewrite tail_pattern /tmp/Rs\?\?\?\?\?\?
rewrite tail_pattern /var/spool/clientmqueue/\*
</pre>

<p>Then, convert using <code>tomoyo-patternize</code> command and compare how it was changed using <code>tomoyo-diffpolicy</code> command:</p>

<pre class="command">
# tomoyo-savepolicy -d &gt; /tmp/old
# tomoyo-patternize &lt; /tmp/old &gt; /tmp/new
# tomoyo-diffpolicy /tmp/old /tmp/new
</pre>
<pre class="output">
&lt;kernel&gt; /usr/sbin/httpd

file write proc:/self/task/\$/attr/fscreate
delete file write proc:/self/task/2766/attr/fscreate

&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/mail

file create /tmp/Rs\?\?\?\?\?\? 0666
file read /tmp/Rs\?\?\?\?\?\?
file unlink /tmp/Rs\?\?\?\?\?\?
file write /tmp/Rs\?\?\?\?\?\?
delete file create /tmp/RsACr8YD 0666
delete file create /tmp/RsXg3Aav 0666
delete file read /tmp/RsACr8YD
delete file read /tmp/RsXg3Aav
delete file unlink /tmp/RsACr8YD
delete file unlink /tmp/RsXg3Aav
delete file write /tmp/RsACr8YD
delete file write /tmp/RsXg3Aav

&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/mail

file ioctl pipefs:/[\$] 0x5413
delete file ioctl pipefs:/[11895] 0x5413
delete file ioctl pipefs:/[11965] 0x5413

&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/mail /usr/sbin/sendmail

file create /var/spool/clientmqueue/\* 0660
file read /var/spool/clientmqueue/\*
file unlink /var/spool/clientmqueue/\*
file write /var/spool/clientmqueue/\*
delete file create /var/spool/clientmqueue/dfoBPETPpH002933 0660
delete file create /var/spool/clientmqueue/dfoBPETf92002944 0660
delete file create /var/spool/clientmqueue/qfoBPETPpH002933 0660
delete file create /var/spool/clientmqueue/qfoBPETf92002944 0660
delete file read /var/spool/clientmqueue/dfoBPETPpH002933
delete file read /var/spool/clientmqueue/dfoBPETf92002944
delete file unlink /var/spool/clientmqueue/dfoBPETPpH002933
delete file unlink /var/spool/clientmqueue/dfoBPETf92002944
delete file unlink /var/spool/clientmqueue/qfoBPETPpH002933
delete file unlink /var/spool/clientmqueue/qfoBPETf92002944
delete file unlink /var/spool/clientmqueue/xfoBPETPpH002933
delete file unlink /var/spool/clientmqueue/xfoBPETf92002944
delete file write /var/spool/clientmqueue/dfoBPETPpH002933
delete file write /var/spool/clientmqueue/dfoBPETf92002944
delete file write /var/spool/clientmqueue/qfoBPETPpH002933
delete file write /var/spool/clientmqueue/qfoBPETf92002944

&lt;kernel&gt; /usr/sbin/httpd /bin/sh /bin/ls

file ioctl pipefs:/[\$] 0x5413
delete file ioctl pipefs:/[11965] 0x5413
</pre>

<p>In case the conversion did not achieve the desired result, "/tmp/new" can be edited with a text editor manually, or conversion can be retried after editing "/etc/tomoyo/tools/patternize.conf".</p>

<p>If the conversion has achieved the desired result, the changes can be applied to existing policy by loading the difference between the two:</p>

<pre class="command">
# tomoyo-diffpolicy /tmp/old /tmp/new | /usr/sbin/tomoyo-loadpolicy -d
</pre>

<p>To convert only specific domains, the <code>tomoyo-selectpolicy</code> command can be used. For example, to update only "&lt;kernel&gt; /usr/sbin/httpd" and descendent domains, do the following:</p>

<pre class="command">
# tomoyo-selectpolicy -r '&lt;kernel&gt; /usr/sbin/httpd' &lt; /sys/kernel/security/tomoyo/domain_policy &gt; /tmp/old-httpd
# tomoyo-patternize &lt; /tmp/old-httpd &gt; /tmp/new-httpd
# tomoyo-diffpolicy /tmp/old-httpd /tmp/new-httpd | tomoyo-loadpolicy -d
</pre>

<p>Conversion of a specific domain can also be managed by editing "/etc/tomoyo/tools/patternize.conf". The following line can be inserted before the "rewrite" line so that conversion is only done against "&lt;kernel&gt; /usr/sbin/httpd" and descendent domains:</p>

<pre>
domain.starts &lt;kernel&gt; /usr/sbin/httpd
</pre>

<h3><a name="6.2">6.2. Patterning file access permissions</a></h3>

<p>Access permissions can be patterned to accommodate for files that are not necessarily accessed in "Learning Mode". For example, the domain policy can be changed to accommodate for web server contents:</p>

<div class="simple-table">
<table>
<tr>
<th>
<p>Before</p>
</th>
<th>
<p>After</p>
</th>
</tr>
<tr>
<td>
<p>&lt;kernel&gt; /usr/sbin/httpd</p>
<br>
<p>file read /var/www/html/index.html</p>
<p>file read /var/www/html/alice/index.html</p>
<p>file read /var/www/html/alice/page1.html</p>
<p>file read /var/www/html/alice/page2.html</p>
<p>file read /var/www/html/alice/image1.jpg</p>
<p>file read /var/www/html/alice/image2.jpg</p>
<p>file read /var/www/html/alice/archive/page1.html</p>
<p>file read /var/www/html/alice/archive/image1.jpg</p>
<p>file read /var/www/html/alice/archive/page2.html</p>
<p>file read /var/www/html/alice/archive/image2.jpg</p>
<p>file read /var/www/html/bob/index.html</p>
<p>file read /var/www/html/bob/page1.html</p>
<p>file read /var/www/html/bob/page2.html</p>
<p>file read /var/www/html/bob/image1.jpg</p>
<p>file read /var/www/html/bob/image2.jpg</p>
<p>file read /var/www/html/bob/archive/page1.html</p>
<p>file read /var/www/html/bob/archive/image1.jpg</p>
<p>file read /var/www/html/bob/archive/page2.html</p>
<p>file read /var/www/html/bob/archive/image2.jpg</p>
</td>
<td>
<p>&lt;kernel&gt; /usr/sbin/httpd</p>
<br>
<p>file read /var/www/html/\*.html</p>
<p>file read /var/www/html/\{\*\}/\*.html</p>
<p>file read /var/www/html/\{\*\}/\*.jpg</p>
</td>
</tr>
</table>
</div>

<p>Domain policy can be further simplified by placing directives in the exception policy, such as:</p>

<pre>
path_group WEB-CONTENTS /var/www/html/\*.html
path_group WEB-CONTENTS /var/www/html/\{\*\}/\*.html
path_group WEB-CONTENTS /var/www/html/\{\*\}/\*.jpg
</pre>

<p>The following can then be defined in domain policy:</p>

<pre>
&lt;kernel&gt; /usr/sbin/httpd

file read @WEB-CONTENTS
</pre>

<p>The above conversion using <code>tomoyo-editpolicy</code> can also be managed using <code>tomoyo-patternize</code>. Add "path_group" to the exception policy like above (as tomoyo-patternize only deals with domain policy), and the following can then be added to "/etc/tomoyo/tools/patternize.conf" similar to section <a href="#6.1">6.1. Patterning temporary files</a>:</p>

<pre>
domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts file read
rewrite path_pattern /var/www/html/\*.html @WEB-CONTENTS

domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts file read
rewrite path_pattern /var/www/html/\{\*\}/\*.html @WEB-CONTENTS

domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts file read
rewrite path_pattern /var/www/html/\{\*\}/\*.jpg @WEB-CONTENTS
</pre>

<h3><a name="6.3">6.3. Patterning numeric permissions</a></h3>

<p>Patterns can be used for numeric parameters such as the creation mode of a file or a network's port numbers.</p>

<p>The following domain policy example permits the domain "&lt;kernel&gt; /usr/sbin/httpd" to accept connections from port numbers between 1024 and 65535:</p>

<div class="simple-table">
<table>
<tr>
<th>
<p>Before</p>
</th>
<th>
<p>After</p>
</th>
</tr>
<tr>
<td>
<p>&lt;kernel&gt; /usr/sbin/httpd</p>
<br>
<p>network inet stream accept 0:0:0:0:0:ffff:c0a8:801 3810</p>
<p>network inet stream accept 0:0:0:0:0:ffff:c0a8:801 3829</p>
<p>network inet stream accept 0:0:0:0:0:ffff:c0a8:801 3829</p>
</td>
<td>
<p>&lt;kernel&gt; /usr/sbin/httpd</p>
<br>
<p>network inet stream accept 0:0:0:0:0:ffff:c0a8:801 1024-65535</p>
</td>
</tr>
</table>
</div>

<p>Domain policy can be further simplified by placing directives in the exception policy, such as:</p>

<pre>
number_group WEB-CLIENT-PORTS 1024-65535
</pre>

<p>The following can then be defined in domain policy:</p>

<pre>
&lt;kernel&gt; /usr/sbin/httpd

network inet stream accept 0:0:0:0:0:ffff:c0a8:801 @WEB-CLIENT-PORTS
</pre>

<p>The above conversion using <code>tomoyo-editpolicy</code> can also be managed using <code>tomoyo-patternize</code>. Add "number_group" to the exception policy like above, and the following can then be added to "/etc/tomoyo/tools/patternize.conf" similar to section <a href="#6.1">6.1. Patterning temporary files</a>:</p>

<pre>
domain.equals &lt;kernel&gt; /usr/sbin/httpd
acl.starts network inet stream accept
rewrite number_pattern 1024-65535 @WEB-CLIENT-PORTS
</pre>

<h3><a name="6.5">6.5. Reviewing gathered permissions</a></h3>

<p>Once you think you have done everything you want to allow Apache to do, run the policy editor and change the profile number to 2.</p>

<p>Note that Apache may have executed some external programs (e.g. <code>/bin/sh</code>, <code>/usr/bin/perl</code>, <code>/usr/lib/sendmail</code>) and thus has some descendent domains. Be sure to change the profile number for all descendent domains as well.</p>

<img src="media/editpolicy-httpd-profile2.png" alt="editpolicy-httpd-profile2.png" width="675" height="375">

<p>Quit the policy editor and continue using Apache:</p>

<img src="media/operation-permissive.png" alt="operation-permissive.png" width="575" height="475">

</div><!-- documentation -->

</div><!-- content -->

<div id="navfooter">
<hr>
<table>
<tr>
<td class="docs-previous">
<a href="chapter-5.html.en">Prev</a>
</td>
<td class="docs-index">
<a href="index.html.en">Index</a>
</td>
<td class="docs-next">
<a href="chapter-7.html.en">Next</a>
</td>
</tr>
<tr>
<td class="docs-previous-description">
<p>Chapter 5: How do I manage domains?</p>
</td>
<td class="docs-home">
</td>
<td class="docs-next-description">
<p>Chapter 7: How do I enforce policy?</p>
</td>
</tr>
</table>
</div>

<div id="footer">
<p class="language">Go to <a href="chapter-6.html.ja">Japanese page</a>.</p>
<p class="timestamp">Last modified: $Date$</p>
<p class="trademark">Linux&reg; is a registered trademark of Linus Torvalds world-wide. TOMOYO&reg; is a registered trademark of <a href="http://www.nttdata.co.jp/en/">NTT DATA Corporation</a>.</p>
<p><a href="http://sourceforge.jp/"><img src="http://sourceforge.jp/sflogo.php?group_id=1973" width="96" height="31" alt="SourceForge.jp"></a></p>
</div>

</body>
</html>
